"""Handlers for common user commands (/start, /help)."""

from __future__ import annotations

import logging

from aiogram import F, Router
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.types import CallbackQuery, Message

from ..service.api import APIClientError, BoostAPIClient
from ..keyboards import main_menu_keyboard


logger = logging.getLogger("boost.bot.handlers.start")

router = Router(name="common")


def _get_api_client(message: Message | CallbackQuery) -> BoostAPIClient:
    api_client = message.bot.get("api_client") if isinstance(message, Message) else message.message.bot.get("api_client")
    if not isinstance(api_client, BoostAPIClient):
        raise RuntimeError("BoostAPIClient is not configured for the bot instance")
    return api_client


@router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject | None = None) -> None:
    """Greet the user and show the main menu."""

    api_client = _get_api_client(message)
    user = message.from_user
    referral = command.args if command else None

    stats_text = ""
    try:
        stats = await api_client.fetch_public_stats()
    except APIClientError as exc:  # pragma: no cover - network errors are logged
        logger.warning("Failed to fetch public stats: %s", exc)
        stats = {}
    if stats:
        users = stats.get("total_users") or stats.get("users")
        total_paid = stats.get("total_paid_uzt") or stats.get("total_deposit_uzt")
        completed = stats.get("tasks_completed")
        stats_chunks = []
        if users is not None:
            stats_chunks.append(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users}</b>")
        if total_paid is not None:
            stats_chunks.append(f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: <b>{float(total_paid):,.0f} UZT</b>")
        if completed is not None:
            stats_chunks.append(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: <b>{completed}</b>")
        if stats_chunks:
            stats_text = "\n".join(stats_chunks)

    greeting = [
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>",
        "–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã <b>Boost</b>.",
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º, –ø–æ–ø–æ–ª–Ω—è—Ç—å —Å—á—ë—Ç –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
    ]

    if user and user.full_name:
        greeting.insert(0, f"üë§ <b>{user.full_name}</b>")

    if stats_text:
        greeting.append("\n" + stats_text)

    if referral:
        greeting.append("\nüîó –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ö–æ–¥ —É—á—Ç—ë–Ω.")

    await message.answer("\n".join(greeting), reply_markup=main_menu_keyboard())


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """Provide a short help message."""

    help_text = (
        "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        "‚Ä¢ –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @boost_support.\n"
        "‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5‚Äì15 –º–∏–Ω—É—Ç."
    )
    await message.answer(help_text, reply_markup=main_menu_keyboard())


@router.callback_query(F.data == "start:help")
async def cb_help(callback: CallbackQuery) -> None:
    """Handle inline request for help."""

    await callback.answer()
    await cmd_help(callback.message)


@router.callback_query(F.data == "start:stats")
async def cb_stats(callback: CallbackQuery) -> None:
    """Send fresh stats on demand."""

    await callback.answer()
    api_client = _get_api_client(callback)
    try:
        stats = await api_client.fetch_public_stats()
    except APIClientError as exc:
        logger.error("Failed to fetch stats via callback: %s", exc)
        await callback.message.answer("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    text_lines = ["üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Boost</b>"]
    for key, title in (
        ("total_users", "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        ("active_orders", "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"),
        ("tasks_completed", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á"),
        ("total_paid_uzt", "–ü–æ–ø–æ–ª–Ω–µ–Ω–æ UZT"),
    ):
        value = stats.get(key)
        if value is None:
            continue
        formatted = f"{float(value):,.0f}" if isinstance(value, (int, float)) else value
        text_lines.append(f"‚Ä¢ {title}: <b>{formatted}</b>")

    await callback.message.answer("\n".join(text_lines))


@router.callback_query(F.data == "balance:show")
async def cb_balance(callback: CallbackQuery) -> None:
    """Show current balance fetched from backend."""

    await callback.answer()
    api_client = _get_api_client(callback)
    user = callback.from_user
    if not user:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    try:
        balance = await api_client.fetch_balance(user.id)
    except APIClientError as exc:
        logger.error("Failed to fetch balance: %s", exc)
        await callback.message.answer("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if balance is None:
        await callback.message.answer("‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await callback.message.answer(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} UZT</b>")
