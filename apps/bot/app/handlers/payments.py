"""Handlers responsible for payment-related interactions."""

from __future__ import annotations

import logging
from typing import Any

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

from ..service.api import APIClientError, BoostAPIClient


logger = logging.getLogger("boost.bot.handlers.payments")

router = Router(name="payments")


class ManualDepositState(StatesGroup):
    """Conversation states for manual deposit request."""

    waiting_for_amount = State()
    waiting_for_receipt = State()


def _get_api_client(message: Message | CallbackQuery) -> BoostAPIClient:
    api_client = message.bot.get("api_client") if isinstance(message, Message) else message.message.bot.get("api_client")
    if not isinstance(api_client, BoostAPIClient):
        raise RuntimeError("BoostAPIClient is not configured")
    return api_client


@router.callback_query(F.data == "payments:deposit")
async def cb_deposit(callback: CallbackQuery, state: FSMContext) -> None:
    """Initiate manual deposit request flow."""

    await callback.answer()
    await state.set_state(ManualDepositState.waiting_for_amount)
    await callback.message.answer(
        "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ UZT (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150 –∏–ª–∏ 200.5).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext) -> None:
    """Allow user to cancel the current payment flow."""

    if await state.get_state() is None:
        return

    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())


@router.message(ManualDepositState.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext) -> None:
    """Validate and store the deposit amount."""

    raw_amount = (message.text or "").replace(",", ".").strip()
    try:
        amount = float(raw_amount)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: <b>150</b> –∏–ª–∏ <b>250.5</b>.")
        return

    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return

    await state.update_data(amount=amount)
    await state.set_state(ManualDepositState.waiting_for_receipt)
    await message.answer(
        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω —á–µ–∫–∞. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ,"
        " –Ω–µ —Ñ–∞–π–ª–æ–º. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(ManualDepositState.waiting_for_receipt)
async def process_receipt(message: Message, state: FSMContext) -> None:
    """Finalize manual deposit request by sending data to backend."""

    if not message.photo:
        await message.answer("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    user = message.from_user
    if not user:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    data: dict[str, Any] = await state.get_data()
    amount = data.get("amount")
    if amount is None:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        await state.clear()
        return

    receipt_file_id = message.photo[-1].file_id
    api_client = _get_api_client(message)

    try:
        response = await api_client.submit_manual_deposit(
            telegram_id=user.id,
            amount=float(amount),
            receipt_file_id=receipt_file_id,
        )
    except APIClientError as exc:
        logger.error("Failed to submit manual deposit: %s", exc)
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        invoice_id = response.get("invoice_id")
        status = response.get("status", "pending")
        await message.answer(
            (
                "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
                f"ID –∑–∞—è–≤–∫–∏: <b>{invoice_id or '‚Äî'}</b>\n"
                f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
                "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            ),
            reply_markup=ReplyKeyboardRemove(),
        )
    finally:
        await state.clear()


@router.callback_query(F.data == "payments:rates")
async def cb_rates(callback: CallbackQuery) -> None:
    """Provide current exchange rates."""

    await callback.answer()
    api_client = _get_api_client(callback)
    try:
        rates = await api_client.fetch_exchange_rates()
    except APIClientError as exc:
        logger.error("Failed to fetch exchange rates: %s", exc)
        await callback.message.answer("–°–µ–π—á–∞—Å –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    uzs_rate = rates.get("UZT_to_SUM")
    min_deposit = rates.get("min_deposit")
    parts = ["üí± <b>–¢–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã</b>"]
    if uzs_rate:
        parts.append(f"1 UZT ‚âà <b>{uzs_rate}</b> —Å—É–º")
    if min_deposit:
        parts.append(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{min_deposit} UZT</b>")

    await callback.message.answer("\n".join(parts))
