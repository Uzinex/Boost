"""Administrative handlers restricted to privileged users."""

from __future__ import annotations

import logging
from typing import Iterable

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

from ..config import BotSettings
from ..service.api import APIClientError, BoostAPIClient


logger = logging.getLogger("boost.bot.handlers.admin")

router = Router(name="admin")


def _is_admin(message: Message, settings: BotSettings) -> bool:
    admin_ids: Iterable[int] = getattr(settings, "admin_ids", [])
    return bool(message.from_user) and message.from_user.id in set(admin_ids)


async def _ensure_admin(message: Message, settings: BotSettings) -> bool:
    if not _is_admin(message, settings):
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logger.warning("Unauthorized admin command from %s", message.from_user.id if message.from_user else "unknown")
        return False
    return True


@router.message(Command("admin"))
async def admin_menu(message: Message, settings: BotSettings) -> None:
    """Display available admin commands."""

    if not await _ensure_admin(message, settings):
        return

    text = (
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Boost</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /admin_stats ‚Äî —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n"
        "‚Ä¢ /admin_health ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.\n"
        "‚Ä¢ /notify &lt;user_id&gt; &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
    )
    await message.answer(text)


@router.message(Command("admin_stats"))
async def admin_stats(
    message: Message,
    settings: BotSettings,
    api_client: BoostAPIClient,
) -> None:
    """Fetch and display system-level statistics."""

    if not await _ensure_admin(message, settings):
        return
    try:
        stats = await api_client.fetch_system_stats()
    except APIClientError as exc:
        logger.error("Failed to fetch system stats: %s", exc)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    lines = ["üìä <b>–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>"]
    for key, title in (
        ("total_users", "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        ("total_payments", "–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫"),
        ("total_volume_uzt", "–û–±–æ—Ä–æ—Ç UZT"),
        ("active_orders", "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"),
    ):
        value = stats.get(key)
        if value is None:
            continue
        formatted = f"{float(value):,.0f}" if isinstance(value, (int, float)) else value
        lines.append(f"‚Ä¢ {title}: <b>{formatted}</b>")

    await message.answer("\n".join(lines))


@router.message(Command("admin_health"))
async def admin_health(
    message: Message,
    settings: BotSettings,
    api_client: BoostAPIClient,
) -> None:
    """Run backend health check via API."""

    if not await _ensure_admin(message, settings):
        return
    try:
        health = await api_client.health()
    except APIClientError as exc:
        logger.error("Failed to fetch health status: %s", exc)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã.")
        return

    details = health.get("details", {})
    lines = ["ü©∫ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>"]
    lines.append(f"–°—Ç–∞—Ç—É—Å: <b>{'OK' if health.get('ok') else 'FAIL'}</b>")
    for component, status in details.items():
        lines.append(f"‚Ä¢ {component.title()}: <b>{status}</b>")

    await message.answer("\n".join(lines))


@router.message(Command("notify"))
async def notify_user(
    message: Message,
    command: CommandObject,
    settings: BotSettings,
    api_client: BoostAPIClient,
) -> None:
    """Forward custom notification to a specific user."""

    if not await _ensure_admin(message, settings):
        return

    if not command.args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify &lt;telegram_id&gt; &lt;—Ç–µ–∫—Å—Ç&gt;")
        return

    parts = command.args.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    try:
        user_id = int(parts[0])
    except ValueError:
        await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    text = parts[1].strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    try:
        await api_client.send_notification(user_id=user_id, text=text)
    except APIClientError as exc:
        logger.error("Failed to send notification via backend: %s", exc)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ backend.")
        return

    await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

