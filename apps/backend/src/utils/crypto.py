"""
Uzinex Boost ‚Äî Crypto Utilities
===============================

–ú–æ–¥—É–ª—å –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
- —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π (bcrypt);
- —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ JWT-—Ç–æ–∫–µ–Ω–æ–≤;
- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–ª—é—á–µ–π;
- —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- core.security
- domain.services.user_service
- api.v1.auth
"""

import os
import jwt
import bcrypt
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

# -------------------------------------------------
# üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
# -------------------------------------------------
JWT_SECRET = os.getenv("JWT_SECRET", "UZINEX_SUPER_SECRET_KEY")
JWT_ALGORITHM = "HS256"
JWT_EXPIRE_HOURS = 48  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


# -------------------------------------------------
# üîπ –ü–∞—Ä–æ–ª–∏
# -------------------------------------------------
def hash_password(password: str) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç bcrypt-—Ö—ç—à –ø–∞—Ä–æ–ª—è.
    """
    if not password:
        raise ValueError("Password cannot be empty")
    salt = bcrypt.gensalt()
    return bcrypt.hashpw(password.encode("utf-8"), salt).decode("utf-8")


def verify_password(password: str, hashed: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–æ–ª—è –∏ —Ö—ç—à–∞.
    """
    if not password or not hashed:
        return False
    try:
        return bcrypt.checkpw(password.encode("utf-8"), hashed.encode("utf-8"))
    except Exception:
        return False


# -------------------------------------------------
# üîπ JWT —Ç–æ–∫–µ–Ω—ã
# -------------------------------------------------
def create_jwt(
    data: Dict[str, Any],
    expires_delta: Optional[timedelta] = None,
    secret: Optional[str] = None,
) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç JWT-—Ç–æ–∫–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    expire = datetime.utcnow() + (expires_delta or timedelta(hours=JWT_EXPIRE_HOURS))
    payload = {**data, "exp": expire, "iat": datetime.utcnow()}
    token = jwt.encode(payload, secret or JWT_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_jwt(token: str, secret: Optional[str] = None) -> Optional[Dict[str, Any]]:
    """
    –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç JWT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É.
    """
    try:
        payload = jwt.decode(token, secret or JWT_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None


# -------------------------------------------------
# üîπ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–¥–ø–∏—Å–∏
# -------------------------------------------------
def generate_secure_token(length: int = 32) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω.
    """
    return os.urandom(length).hex()


def compare_secure(a: str, b: str) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ (—É—Å—Ç–æ–π—á–∏–≤–æ –∫ —Ç–∞–π–º–∏–Ω–≥-–∞—Ç–∞–∫–∞–º).
    """
    if not a or not b:
        return False
    if len(a) != len(b):
        return False

    result = 0
    for x, y in zip(a.encode(), b.encode()):
        result |= x ^ y
    return result == 0
