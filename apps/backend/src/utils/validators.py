"""
Uzinex Boost ‚Äî Validators
=========================

–ú–æ–¥—É–ª—å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
- —Ñ–æ—Ä–º–∞—Ç–∞ email –∏ username;
- –¥–ª–∏–Ω—ã –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π;
- —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (—Å—É–º–º, –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤);
- –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- api.v1.schemas
- domain.services.user_service
- core.security
"""

import re
from typing import Optional


# -------------------------------------------------
# üîπ Email
# -------------------------------------------------
EMAIL_REGEX = re.compile(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$")


def validate_email(email: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email-–∞–¥—Ä–µ—Å–∞.
    """
    if not email or len(email) > 255:
        return False
    return bool(EMAIL_REGEX.match(email))


# -------------------------------------------------
# üîπ Username
# -------------------------------------------------
USERNAME_REGEX = re.compile(r"^[A-Za-z0-9_.-]{3,30}$")


def validate_username(username: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤,
    - –¥–æ–ø—É—Å—Ç–∏–º—ã –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, '_', '-', '.'.
    """
    if not username:
        return False
    return bool(USERNAME_REGEX.match(username))


# -------------------------------------------------
# üîπ –ü–∞—Ä–æ–ª—å
# -------------------------------------------------
PASSWORD_REGEX = re.compile(
    r"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':\",.<>\/?]).{8,64}$"
)


def validate_password(password: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è:
    - –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤;
    - —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ, —Å—Ç—Ä–æ—á–Ω—ã–µ, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã.
    """
    if not password:
        return False
    return bool(PASSWORD_REGEX.match(password))


# -------------------------------------------------
# üîπ –°—É–º–º—ã –∏ —á–∏—Å–ª–∞
# -------------------------------------------------
def validate_amount(amount: Optional[float]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã (UZT):
    - —á–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ,
    - –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1 –º–ª—Ä–¥.
    """
    if amount is None:
        return False
    try:
        return 0 < float(amount) <= 1_000_000_000
    except (ValueError, TypeError):
        return False


# -------------------------------------------------
# üîπ –¢–µ–ª–µ—Ñ–æ–Ω
# -------------------------------------------------
PHONE_REGEX = re.compile(r"^\+998\d{9}$")  # –§–æ—Ä–º–∞—Ç –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞


def validate_phone(phone: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (UZ —Ñ–æ—Ä–º–∞—Ç):
    +998 –∏ 9 —Ü–∏—Ñ—Ä.
    """
    if not phone:
        return False
    return bool(PHONE_REGEX.match(phone))


# -------------------------------------------------
# üîπ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
# -------------------------------------------------
def validate_id(value: Optional[int]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ ID ‚Äî —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
    """
    return isinstance(value, int) and value > 0


# -------------------------------------------------
# üîπ –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
# -------------------------------------------------
def is_non_empty(value: Optional[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞ –∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤.
    """
    return bool(value and str(value).strip())


def validate_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL.
    """
    pattern = re.compile(
        r"^(https?:\/\/)?([A-Za-z0-9.-]+)\.([A-Za-z]{2,})([\/\w .-]*)*\/?$"
    )
    return bool(pattern.match(url))
