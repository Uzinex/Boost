"""
Uzinex Boost ‚Äî Time Utilities
=============================

–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º, –¥–∞—Ç–∞–º–∏ –∏ —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
- —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å UTC;
- –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ (Tashkent, Asia/Tashkent);
- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤;
- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–æ–∫ –¥–ª—è –ª–æ–≥–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- core.logging
- domain.services.*
- db.repositories.*
"""

from __future__ import annotations
from datetime import datetime, timedelta, timezone
import pytz


# -------------------------------------------------
# üîπ –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# -------------------------------------------------
UZBEK_TZ = pytz.timezone("Asia/Tashkent")
ISO_FORMAT = "%Y-%m-%dT%H:%M:%SZ"
DATE_FORMAT = "%Y-%m-%d"
TIME_FORMAT = "%H:%M:%S"


# -------------------------------------------------
# üîπ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
# -------------------------------------------------
def utc_now() -> datetime:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC.
    """
    return datetime.now(timezone.utc)


def now_tashkent() -> datetime:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞.
    """
    return datetime.now(UZBEK_TZ)


# -------------------------------------------------
# üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------------------------------
def format_iso(dt: datetime) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç (UTC).
    """
    if not dt:
        return ""
    return dt.astimezone(timezone.utc).strftime(ISO_FORMAT)


def format_date(dt: datetime) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.
    """
    if not dt:
        return ""
    return dt.strftime(DATE_FORMAT)


def format_time(dt: datetime) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS.
    """
    if not dt:
        return ""
    return dt.strftime(TIME_FORMAT)


# -------------------------------------------------
# üîπ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏
# -------------------------------------------------
def format_timedelta(delta: timedelta) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.
    –ü—Ä–∏–º–µ—Ä: "2h 15m", "1d 3h", "45s".
    """
    if not delta:
        return "0s"

    seconds = int(delta.total_seconds())
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)

    parts = []
    if days:
        parts.append(f"{days}d")
    if hours:
        parts.append(f"{hours}h")
    if minutes:
        parts.append(f"{minutes}m")
    if seconds or not parts:
        parts.append(f"{seconds}s")

    return " ".join(parts)


def humanize_datetime(dt: datetime) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Å–µ–π—á–∞—Å –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ.
    –ü—Ä–∏–º–µ—Ä: "2 hours ago", "3 days ago", "just now".
    """
    if not dt:
        return "unknown"

    delta = utc_now() - dt.replace(tzinfo=timezone.utc)
    seconds = delta.total_seconds()

    if seconds < 60:
        return "just now"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        return f"{minutes} minute{'s' if minutes != 1 else ''} ago"
    elif seconds < 86400:
        hours = int(seconds // 3600)
        return f"{hours} hour{'s' if hours != 1 else ''} ago"
    elif seconds < 2592000:
        days = int(seconds // 86400)
        return f"{days} day{'s' if days != 1 else ''} ago"
    else:
        months = int(seconds // 2592000)
        return f"{months} month{'s' if months != 1 else ''} ago"


# -------------------------------------------------
# üîπ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
# -------------------------------------------------
def to_local_time(dt: datetime, tz: str = "Asia/Tashkent") -> datetime:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è UTC –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.
    """
    if not dt:
        return None
    local_tz = pytz.timezone(tz)
    return dt.astimezone(local_tz)


def to_utc(dt: datetime, tz: str = "Asia/Tashkent") -> datetime:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC.
    """
    if not dt:
        return None
    local_tz = pytz.timezone(tz)
    return local_tz.localize(dt).astimezone(pytz.utc)
