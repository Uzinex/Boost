"""
Uzinex Boost ‚Äî Formatters
=========================

–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª, –≤–∞–ª—é—Ç, –¥–∞—Ç, –∏–º—ë–Ω –∏ —Ç–µ–∫—Å—Ç–æ–≤.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ API,
–¥–∞—à–±–æ—Ä–¥–∞—Ö, –ª–æ–≥–∞—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–∞—Ö.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- api.v1.responses
- domain.services.analytics
- utils.time_utils
"""

from __future__ import annotations
from datetime import datetime
import math
import locale

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ)
try:
    locale.setlocale(locale.LC_ALL, "ru_RU.UTF-8")
except locale.Error:
    pass


# -------------------------------------------------
# üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –∏ –≤–∞–ª—é—Ç
# -------------------------------------------------
def format_number(value: float, decimals: int = 0) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á.
    –ü—Ä–∏–º–µ—Ä: 15000 ‚Üí '15 000'
    """
    try:
        return f"{value:,.{decimals}f}".replace(",", " ")
    except (ValueError, TypeError):
        return "0"


def format_currency(amount: float, currency: str = "UZT") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É —Å –≤–∞–ª—é—Ç–Ω—ã–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º.
    –ü—Ä–∏–º–µ—Ä: 15000 ‚Üí '15 000 UZT'
    """
    if amount is None:
        return "0 UZT"
    formatted = format_number(amount, 0)
    return f"{formatted} {currency}"


def compact_number(value: float) -> str:
    """
    –ö—Ä–∞—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª.
    –ü—Ä–∏–º–µ—Ä: 1200 ‚Üí '1.2K', 2500000 ‚Üí '2.5M'
    """
    if value is None:
        return "0"
    abs_val = abs(value)
    if abs_val >= 1_000_000_000:
        return f"{value / 1_000_000_000:.1f}B"
    elif abs_val >= 1_000_000:
        return f"{value / 1_000_000:.1f}M"
    elif abs_val >= 1_000:
        return f"{value / 1_000:.1f}K"
    return f"{value:.0f}"


# -------------------------------------------------
# üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
# -------------------------------------------------
def format_date(dt: datetime, pattern: str = "%d %b %Y") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
    –ü—Ä–∏–º–µ—Ä: datetime(2025,10,13) ‚Üí '13 Oct 2025'
    """
    if not dt:
        return ""
    try:
        return dt.strftime(pattern)
    except Exception:
        return str(dt)


def format_datetime(dt: datetime, pattern: str = "%d %b %Y, %H:%M") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
    –ü—Ä–∏–º–µ—Ä: '13 Oct 2025, 18:45'
    """
    if not dt:
        return ""
    try:
        return dt.strftime(pattern)
    except Exception:
        return str(dt)


# -------------------------------------------------
# üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º—ë–Ω
# -------------------------------------------------
def short_name(full_name: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—É—é —Ñ–æ—Ä–º—É.
    –ü—Ä–∏–º–µ—Ä: 'Feruz Dilov' ‚Üí 'Feruz D.'
    """
    if not full_name or " " not in full_name:
        return full_name
    parts = full_name.strip().split()
    if len(parts) == 1:
        return parts[0]
    return f"{parts[0]} {parts[1][0].upper()}."


# -------------------------------------------------
# üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ –¥–æ–ª–µ–π
# -------------------------------------------------
def format_percent(value: float, decimals: int = 1) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç.
    –ü—Ä–∏–º–µ—Ä: 0.25 ‚Üí '25.0%'
    """
    if value is None:
        return "0%"
    return f"{round(value * 100, decimals)}%"


def format_ratio(part: float, total: float, decimals: int = 1) -> str:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
    –ü—Ä–∏–º–µ—Ä: 25, 100 ‚Üí '25.0%'
    """
    if not total or total == 0:
        return "0%"
    return format_percent(part / total, decimals)


# -------------------------------------------------
# üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
# -------------------------------------------------
def format_event(event_type: str, actor: str, value: str | float | None = None) -> str:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ª–æ–≥–æ–≤.
    –ü—Ä–∏–º–µ—Ä: ('payment', 'User#5', '15 000 UZT') ‚Üí '[PAYMENT] User#5 ‚Üí 15 000 UZT'
    """
    value_str = f" ‚Üí {value}" if value is not None else ""
    return f"[{event_type.upper()}] {actor}{value_str}"


def format_duration(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
    –ü—Ä–∏–º–µ—Ä: 3661 ‚Üí '1h 1m 1s'
    """
    if seconds < 60:
        return f"{seconds}s"
    elif seconds < 3600:
        m, s = divmod(seconds, 60)
        return f"{m}m {s}s"
    else:
        h, remainder = divmod(seconds, 3600)
        m, s = divmod(remainder, 60)
        return f"{h}h {m}m {s}s"
