"""
Uzinex Boost ‚Äî Logger Utilities
===============================

–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Uzinex Boost v2.0.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –≤ dev/prod —Å—Ä–µ–¥–∞—Ö:
- —Ü–≤–µ—Ç–Ω–æ–π –∏ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤);
- JSON-—Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ (–¥–ª—è production);
- –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (user_id, service, request_id);
- –∫–æ–Ω—Ç—Ä–æ–ª—å —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- core.logging
- domain.services.*
- api.v1.middleware
"""

from __future__ import annotations
import json
import sys
from loguru import logger
from datetime import datetime
from typing import Any, Optional, Dict

# -------------------------------------------------
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
# -------------------------------------------------
LOG_LEVEL = "INFO"
LOG_FORMAT_DEV = (
    "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
    "<level>{level: <8}</level> | "
    "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> ‚Äî "
    "<white>{message}</white>"
)

# JSON-—Ñ–æ—Ä–º–∞—Ç (–¥–ª—è production / –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
def json_formatter(record: Dict[str, Any]) -> str:
    log = {
        "timestamp": record["time"].strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
        "level": record["level"].name,
        "message": record["message"],
        "module": record["name"],
        "function": record["function"],
        "line": record["line"],
    }
    if record["extra"]:
        log["context"] = record["extra"]
    return json.dumps(log, ensure_ascii=False)


# -------------------------------------------------
# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------------------------------
def init_logger(environment: str = "development"):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–≥–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã.
    """
    logger.remove()  # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π handler

    if environment == "production":
        logger.add(sys.stdout, level=LOG_LEVEL, serialize=True, format=json_formatter)
    else:
        logger.add(sys.stdout, colorize=True, format=LOG_FORMAT_DEV, level=LOG_LEVEL)

    logger.info(f"Logger initialized for {environment.upper()} environment")


# -------------------------------------------------
# üîπ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------------------------------
def with_context(**kwargs):
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –ª–æ–≥–≥–µ—Ä—É.
    –ü—Ä–∏–º–µ—Ä:
        log = with_context(user_id=42, service="balance")
        log.info("–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
    """
    return logger.bind(**kwargs)


# -------------------------------------------------
# üîπ –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------------------------------
def log_info(message: str, **kwargs):
    """–ò–Ω—Ñ–æ-–ª–æ–≥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
    with_context(**kwargs).info(message)


def log_warning(message: str, **kwargs):
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ."""
    with_context(**kwargs).warning(message)


def log_error(message: str, **kwargs):
    """–û—à–∏–±–∫–∞."""
    with_context(**kwargs).error(message)


def log_debug(message: str, **kwargs):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥."""
    with_context(**kwargs).debug(message)
