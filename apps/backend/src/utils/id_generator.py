"""
Uzinex Boost ‚Äî ID Generator
===========================

–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤, —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ID –¥–ª—è:
- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–∫–∞–∑–æ–≤, –∑–∞–¥–∞—á, –ø–ª–∞—Ç–µ–∂–µ–π;
- —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤;
- –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–ª—é—á–µ–π –∏ —Ç–æ–∫–µ–Ω–æ–≤.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.*
- core.security
- db.models.*
"""

import uuid
import random
import string
import secrets
import hashlib
from datetime import datetime


# -------------------------------------------------
# üîπ UUID –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ ID
# -------------------------------------------------
def generate_uuid() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUIDv4.
    –ü—Ä–∏–º–µ—Ä: 'a4f29d4e-ff12-43b3-bc60-1ad57b5cb6d3'
    """
    return str(uuid.uuid4())


def generate_short_id(prefix: str = "UZ") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —á–∏—Ç–∞–µ–º—ã–π ID (8‚Äì10 —Å–∏–º–≤–æ–ª–æ–≤).
    –ü—Ä–∏–º–µ—Ä: 'UZ-8F9C3D1A'
    """
    base = uuid.uuid4().hex[:8].upper()
    return f"{prefix}-{base}"


# -------------------------------------------------
# üîπ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥—ã
# -------------------------------------------------
def generate_ref_code(length: int = 8) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ü–∏—Ñ—Ä.
    –ü—Ä–∏–º–µ—Ä: 'NEXR8Z2Q'
    """
    alphabet = string.ascii_uppercase + string.digits
    return "".join(secrets.choice(alphabet) for _ in range(length))


def generate_invite_token(length: int = 32) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    –ü—Ä–∏–º–µ—Ä: 'd2f8ac9b3e45a8c7b123...'
    """
    return secrets.token_hex(length // 2)


# -------------------------------------------------
# üîπ –•—ç—à-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
# -------------------------------------------------
def generate_hash_id(value: str) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç —Ö—ç—à-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ SHA256.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è ID –∏–∑ —Å—Ç—Ä–æ–∫–∏.
    """
    if not value:
        value = str(datetime.utcnow().timestamp())
    return hashlib.sha256(value.encode("utf-8")).hexdigest()


# -------------------------------------------------
# üîπ –ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
# -------------------------------------------------
def generate_numeric_code(length: int = 6) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è SMS –∏–ª–∏ e-mail –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏).
    –ü—Ä–∏–º–µ—Ä: '482193'
    """
    return "".join(random.choices(string.digits, k=length))


# -------------------------------------------------
# üîπ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
# -------------------------------------------------
def generate_composite_key(user_id: int, prefix: str = "KEY") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á, –∫–æ–º–±–∏–Ω–∏—Ä—É—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â–∏–π timestamp.
    –ü—Ä–∏–º–µ—Ä: 'KEY-1-1734109212'
    """
    timestamp = int(datetime.utcnow().timestamp())
    return f"{prefix}-{user_id}-{timestamp}"
