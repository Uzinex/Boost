"""
Uzinex Boost ‚Äî Telegram Data Types
==================================

–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
- TelegramUser
- TelegramChat
- TelegramMessage
- WebAppData (initData)
- TelegramCallback

–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏, —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
–≤–Ω—É—Ç—Ä–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞ Telegram –∏ API-—Å–ª–æ—ë–≤.
"""

from __future__ import annotations

from typing import Optional, Dict, Any
from pydantic import BaseModel, Field
from datetime import datetime


# ----------------------------
# üîπ Telegram –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
# ----------------------------

class TelegramUser(BaseModel):
    """–ú–æ–¥–µ–ª—å Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ update –∏–ª–∏ initData)."""

    id: int = Field(..., description="Telegram user ID")
    is_bot: Optional[bool] = False
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    username: Optional[str] = None
    language_code: Optional[str] = None
    is_premium: Optional[bool] = None

    def full_name(self) -> str:
        parts = [self.first_name or "", self.last_name or ""]
        return " ".join(p for p in parts if p).strip() or "Unknown User"

    def mention(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if self.username:
            return f"@{self.username}"
        return f"<a href='tg://user?id={self.id}'>{self.full_name()}</a>"


class TelegramChat(BaseModel):
    """–ú–æ–¥–µ–ª—å —á–∞—Ç–∞ (private / group / channel)."""

    id: int
    type: str
    title: Optional[str] = None
    username: Optional[str] = None


class TelegramMessage(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ callback)."""

    message_id: int
    date: datetime
    chat: TelegramChat
    from_user: TelegramUser
    text: Optional[str] = None


# ----------------------------
# üîπ WebApp –º–æ–¥–µ–ª–∏
# ----------------------------

class WebAppUser(BaseModel):
    """Telegram WebApp user –∏–∑ initData."""

    id: int
    first_name: Optional[str]
    last_name: Optional[str]
    username: Optional[str]
    language_code: Optional[str]
    is_premium: Optional[bool] = None

    def full_name(self) -> str:
        parts = [self.first_name or "", self.last_name or ""]
        return " ".join(p for p in parts if p).strip()


class WebAppData(BaseModel):
    """
    –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–∞–µ–º—ã–µ –∏–∑ Telegram WebApp initData.
    –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """

    user: WebAppUser
    auth_date: int
    query_id: Optional[str] = None
    hash: str

    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ dict (–¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)."""
        return self.model_dump()

    def auth_datetime(self) -> datetime:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç auth_date –≤ –≤–∏–¥–µ datetime UTC."""
        return datetime.utcfromtimestamp(self.auth_date)


# ----------------------------
# üîπ Callback / Interaction –º–æ–¥–µ–ª–∏
# ----------------------------

class TelegramCallback(BaseModel):
    """CallbackQuery –æ–±—ä–µ–∫—Ç –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫."""

    id: str
    from_user: TelegramUser = Field(..., alias="from")
    data: Optional[str] = None
    chat_instance: Optional[str] = None


# ----------------------------
# üîπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
# ----------------------------

class WebAppValidationResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ initData."""

    valid: bool
    reason: Optional[str] = None
    user_id: Optional[int] = None
    username: Optional[str] = None
    auth_datetime: Optional[datetime] = None


# ----------------------------
# üîπ –≠–∫—Å–ø–æ—Ä—Ç
# ----------------------------

__all__ = [
    "TelegramUser",
    "TelegramChat",
    "TelegramMessage",
    "WebAppUser",
    "WebAppData",
    "TelegramCallback",
    "WebAppValidationResult",
]
