"""
Uzinex Boost ‚Äî Telegram Webhook Handler
=======================================

–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–∏—ë–º–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram Bot API.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram;
- –≤–∞–ª–∏–¥–∞—Ü–∏—è update-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã;
- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FastAPI (—á–µ—Ä–µ–∑ router –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é);
- —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.

Webhook –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ —á–µ—Ä–µ–∑ polling.
"""

from __future__ import annotations

import logging
from typing import Any, Dict

from fastapi import APIRouter, Request, HTTPException, status

from .exceptions import WebhookUnauthorized, WebhookProcessingError
from .types import TelegramMessage, TelegramCallback
from .utils import log_event


logger = logging.getLogger("uzinex.telegram.webhook")

router = APIRouter(prefix="/telegram", tags=["Telegram Webhook"])


# ----------------------------
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ----------------------------

async def _parse_update(data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (message / callback_query)
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    """
    if "message" in data:
        message = data["message"]
        parsed = {
            "update_type": "message",
            "user_id": message["from"]["id"],
            "text": message.get("text"),
        }
        return parsed

    if "callback_query" in data:
        callback = data["callback_query"]
        parsed = {
            "update_type": "callback",
            "user_id": callback["from"]["id"],
            "data": callback.get("data"),
        }
        return parsed

    return {"update_type": "unknown", "raw": data}


# ----------------------------
# üîπ –û—Å–Ω–æ–≤–Ω–æ–π webhook endpoint
# ----------------------------

@router.post("/webhook")
async def telegram_webhook(request: Request) -> Dict[str, Any]:
    """
    –ì–ª–∞–≤–Ω—ã–π endpoint –¥–ª—è Telegram Webhook.

    –ü—Ä–∏–º–µ—Ä: POST /telegram/webhook
    """
    try:
        body = await request.json()
        logger.info(f"[Webhook] Incoming update: {body}")

        update = await _parse_update(body)
        log_event(f"Received {update['update_type']} from user {update.get('user_id')}", level="info")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        # await process_telegram_event(update)

        return {"ok": True, "status": "processed", "update_type": update["update_type"]}

    except WebhookUnauthorized as e:
        logger.warning(f"[Webhook] Unauthorized request: {e}")
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Unauthorized webhook")

    except Exception as e:
        logger.exception(f"[Webhook] Processing error: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Webhook processing failed")


# ----------------------------
# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ)
# ----------------------------

async def verify_webhook_source(request: Request, secret_token: str | None = None) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ X-Telegram-Bot-Api-Secret-Token, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω).
    Telegram –¥–æ–±–∞–≤–ª—è–µ—Ç —ç—Ç–æ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ webhook.
    """
    if not secret_token:
        return  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω

    header_token = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if header_token != secret_token:
        logger.warning("[Webhook] Invalid secret token")
        raise WebhookUnauthorized("Invalid webhook secret token")
