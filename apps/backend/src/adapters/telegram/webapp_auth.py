"""
Uzinex Boost ‚Äî Telegram WebApp Auth Validator
=============================================

–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp (initData).

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ hash —Å –ø–æ–º–æ—â—å—é HMAC SHA256 (bot_token);
- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è auth_date;
- –≤–æ–∑–≤—Ä–∞—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://core.telegram.org/bots/webapps#validating-data-received-via-the-web-app
"""

from __future__ import annotations

import hmac
import hashlib
import logging
import urllib.parse
from datetime import datetime, timezone, timedelta
from typing import Dict, Any

from .types import WebAppData, WebAppValidationResult
from .exceptions import InvalidInitData, ExpiredInitData


logger = logging.getLogger("uzinex.telegram.webapp_auth")


# ----------------------------
# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
# ----------------------------

def validate_webapp_data(init_data: str, bot_token: str, max_age_seconds: int = 86400) -> WebAppValidationResult:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç initData, –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∏–∑ Telegram WebApp.

    :param init_data: —Å—Ç—Ä–æ–∫–∞ initData, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–∑ window.Telegram.WebApp.initData
    :param bot_token: —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
    :param max_age_seconds: –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è auth_date (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞)
    :return: WebAppValidationResult
    """
    if not init_data:
        logger.warning("[WebAppAuth] initData is empty")
        raise InvalidInitData("Missing initData")

    # –ü–∞—Ä—Å–∏–º initData –≤ dict
    parsed_data = dict(urllib.parse.parse_qsl(init_data, strict_parsing=True))
    user_data = parsed_data.get("user")
    auth_date = parsed_data.get("auth_date")
    received_hash = parsed_data.get("hash")

    if not all([user_data, auth_date, received_hash]):
        raise InvalidInitData("initData missing required fields")

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è HMAC-–ø—Ä–æ–≤–µ—Ä–∫–∏
    check_pairs = [f"{k}={v}" for k, v in sorted(parsed_data.items()) if k != "hash"]
    data_check_string = "\n".join(check_pairs)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    secret_key = hashlib.sha256(bot_token.encode()).digest()

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å
    expected_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    if not hmac.compare_digest(expected_hash, received_hash):
        logger.warning("[WebAppAuth] Invalid HMAC signature")
        raise InvalidInitData("Invalid signature in initData")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    try:
        auth_timestamp = int(auth_date)
    except ValueError:
        raise InvalidInitData("Invalid auth_date format")

    now = int(datetime.now(timezone.utc).timestamp())
    if now - auth_timestamp > max_age_seconds:
        logger.warning("[WebAppAuth] initData expired")
        raise ExpiredInitData("initData expired")

    # –ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî —Å–æ–∑–¥–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = WebAppValidationResult(
        valid=True,
        user_id=_extract_user_id(user_data),
        username=_extract_username(user_data),
        auth_datetime=datetime.fromtimestamp(auth_timestamp, tz=timezone.utc),
    )

    logger.info(f"[WebAppAuth] ‚úÖ Valid initData for user {result.user_id}")
    return result


# ----------------------------
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ----------------------------

def _extract_user_id(user_json: str) -> int:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user.id –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏."""
    import json
    try:
        user = json.loads(user_json)
        return int(user.get("id"))
    except Exception as e:
        logger.error(f"[WebAppAuth] Failed to extract user_id: {e}")
        raise InvalidInitData("Invalid user JSON format")


def _extract_username(user_json: str) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏."""
    import json
    try:
        user = json.loads(user_json)
        return user.get("username")
    except Exception:
        return None
