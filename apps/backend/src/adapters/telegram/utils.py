"""
Uzinex Boost ‚Äî Telegram Utilities
=================================

–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞;
- –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤—ã–∑–æ–≤—ã Telegram API;
- –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏;
- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º–∏ –ø–æ–¥—Å–∏—Å—Ç–µ–º–∞–º–∏ Telegram –∞–¥–∞–ø—Ç–µ—Ä–∞.
"""

from __future__ import annotations

import asyncio
import logging
import html
from datetime import datetime, timezone
from typing import Any, Awaitable, Callable, Optional

from .exceptions import TelegramAPIError


logger = logging.getLogger("uzinex.telegram.utils")


# ----------------------------
# üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
# ----------------------------

def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Ç–µ–≥–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª–æ–º–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram."""
    if not text:
        return ""
    return html.escape(text)


def bold(text: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∂–∏—Ä–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç."""
    return f"<b>{escape_html(text)}</b>"


def italic(text: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å–∏–≤–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç."""
    return f"<i>{escape_html(text)}</i>"


def monospace(text: str) -> str:
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —Å—Ç–∏–ª–µ (–∫–æ–¥)."""
    return f"<code>{escape_html(text)}</code>"


def format_user_link(user_id: int, name: str) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-—Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return f"<a href='tg://user?id={user_id}'>{escape_html(name)}</a>"


def format_currency(amount: float, currency: str = "UZT") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ."""
    return f"{amount:,.2f} {currency}".replace(",", " ")


def timestamp() -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π Unix-timestamp."""
    return int(datetime.now(tz=timezone.utc).timestamp())


def utcnow() -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ UTC-–≤—Ä–µ–º—è."""
    return datetime.now(tz=timezone.utc)


# ----------------------------
# üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã
# ----------------------------

async def safe_call(
    func: Callable[..., Awaitable[Any]],
    *args,
    retries: int = 2,
    delay: float = 1.0,
    **kwargs,
) -> Optional[Any]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é Telegram API.
    –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.

    :param func: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä client.send_message)
    :param retries: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    :param delay: –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫)
    :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ –∏–ª–∏ None
    """
    for attempt in range(1, retries + 1):
        try:
            result = await func(*args, **kwargs)
            if attempt > 1:
                logger.info(f"[Retry OK] {func.__name__} succeeded on attempt {attempt}")
            return result
        except TelegramAPIError as e:
            logger.warning(f"[TelegramAPIError] {func.__name__}: {e}")
            if attempt == retries:
                logger.error(f"[Fail] {func.__name__} failed after {attempt} attempts.")
                return None
            await asyncio.sleep(delay)
        except Exception as e:
            logger.exception(f"[safe_call] Unexpected error in {func.__name__}: {e}")
            return None


async def async_sleep(seconds: float) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ rate-limit)."""
    try:
        await asyncio.sleep(seconds)
    except asyncio.CancelledError:
        logger.warning("[async_sleep] Task cancelled during delay.")


# ----------------------------
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ----------------------------

def log_event(event: str, user_id: Optional[int] = None, level: str = "info") -> None:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π Telegram-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
    """
    msg = f"[Telegram] {event}"
    if user_id:
        msg += f" (user={user_id})"

    if level == "error":
        logger.error(msg)
    elif level == "warning":
        logger.warning(msg)
    else:
        logger.info(msg)


# ----------------------------
# üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# ----------------------------

def format_notification(title: str, text: str, emoji: str = "üí¨") -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    return f"{emoji} <b>{escape_html(title)}</b>\n{text}"
