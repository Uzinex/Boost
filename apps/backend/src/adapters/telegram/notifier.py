"""
Uzinex Boost ‚Äî Telegram Notifier
================================

–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.

–ó–∞–¥–∞—á–∏:
- —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram;
- –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å send_notification();
- –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å–∞–º–∏ Boost (–Ω–∞–ø—Ä–∏–º–µ—Ä, Payments, Orders, Balance)
–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö.
"""

from __future__ import annotations

import logging
from typing import Optional, Dict, Any

from .client import TelegramClient
from .exceptions import TelegramMessageError, TelegramUserNotFound, TelegramAPIError


logger = logging.getLogger("uzinex.telegram.notifier")


# ----------------------------
# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# ----------------------------

async def send_notification(
    client: TelegramClient,
    user_id: int | str,
    text: str,
    *,
    message_type: str = "info",
    photo_url: Optional[str] = None,
    parse_mode: str = "HTML",
    reply_markup: Optional[Dict[str, Any]] = None,
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∞–¥–º–∏–Ω—É.

    :param client: —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramClient
    :param user_id: Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    :param text: —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    :param message_type: —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ("info", "success", "error", "system")
    :param photo_url: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    :param parse_mode: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (HTML / Markdown)
    :param reply_markup: inline –∏–ª–∏ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    :return: bool ‚Äî —É—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """

    prefix_map = {
        "info": "‚ÑπÔ∏è",
        "success": "‚úÖ",
        "error": "‚ùå",
        "system": "‚öôÔ∏è",
    }

    emoji = prefix_map.get(message_type, "üí¨")
    message_text = f"{emoji} {text}"

    try:
        if photo_url:
            await client.send_photo(chat_id=user_id, photo_url=photo_url, caption=message_text, parse_mode=parse_mode)
        else:
            await client.send_message(chat_id=user_id, text=message_text, parse_mode=parse_mode, reply_markup=reply_markup)

        logger.info(f"[Notifier] Sent {message_type.upper()} to {user_id}: {text[:80]}")
        return True

    except TelegramAPIError as e:
        logger.error(f"[Notifier] Telegram API error for {user_id}: {e}")
        raise TelegramMessageError(f"Failed to send message: {e}") from e

    except Exception as e:
        logger.exception(f"[Notifier] Unexpected error while sending message to {user_id}: {e}")
        raise TelegramUserNotFound(f"User {user_id} not found or message failed") from e


# ----------------------------
# üîπ –ì—Ä—É–ø–ø–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# ----------------------------

async def broadcast(
    client: TelegramClient,
    user_ids: list[int | str],
    text: str,
    *,
    message_type: str = "info",
    chunk_size: int = 20,
) -> int:
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (batch).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    success = 0
    for i, uid in enumerate(user_ids, start=1):
        try:
            await send_notification(client, uid, text, message_type=message_type)
            success += 1
        except Exception as e:
            logger.warning(f"[Notifier] Failed to deliver to {uid}: {e}")

        if i % chunk_size == 0:
            logger.info(f"[Notifier] Sent to {i} users (current batch size {chunk_size})")

    logger.info(f"[Notifier] Broadcast completed: {success}/{len(user_ids)} delivered.")
    return success


# ----------------------------
# üîπ –ê–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# ----------------------------

async def notify_admins(
    client: TelegramClient,
    admin_ids: list[int | str],
    text: str,
    *,
    alert: bool = False,
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    prefix = "üö®" if alert else "üì¢"
    message = f"{prefix} {text}"

    for admin_id in admin_ids:
        try:
            await client.send_message(chat_id=admin_id, text=message)
        except Exception as e:
            logger.warning(f"[Notifier] Failed to notify admin {admin_id}: {e}")
