"""
Uzinex Boost ‚Äî Payment Utilities
================================

–°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤:
- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è invoice_id, —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å–∏–≥–Ω–∞—Ç—É—Ä;
- –ø—Ä–æ–≤–µ—Ä–∫–∞ HMAC-–ø–æ–¥–ø–∏—Å–∏ webhook‚Äô–æ–≤;
- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—É–º–º;
- timestamp –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏.
"""

from __future__ import annotations

import hashlib
import hmac
import uuid
import time
from datetime import datetime, timezone
from typing import Any, Dict, Optional, Union


# ----------------------------
# üîπ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã / —Ç–æ–∫–µ–Ω—ã
# ----------------------------

def generate_invoice_id(prefix: str = "inv") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π invoice_id –≤ —Ñ–æ—Ä–º–∞—Ç–µ inv_xxx-uuid.
    """
    return f"{prefix}_{uuid.uuid4().hex[:12]}"


def generate_txn_id(prefix: str = "txn") -> str:
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
    return f"{prefix}_{uuid.uuid4().hex[:10]}"


def generate_secret_token(length: int = 24) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–æ–∫–µ–Ω (hex)."""
    return uuid.uuid4().hex[:length]


# ----------------------------
# üîπ –ü–æ–¥–ø–∏—Å–∏ –∏ —Ö—ç—à–∏
# ----------------------------

def compute_hmac_sha256(secret: str, message: str) -> str:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç HMAC SHA256-–ø–æ–¥–ø–∏—Å—å –¥–ª—è —Å—Ç—Ä–æ–∫–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ callback-–∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    return hmac.new(secret.encode(), message.encode(), hashlib.sha256).hexdigest()


def verify_signature(secret: str, message: str, signature: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–º–µ–Ω—ã).
    """
    try:
        expected = compute_hmac_sha256(secret, message)
        return hmac.compare_digest(expected, signature)
    except Exception:
        return False


def md5_hash(data: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç MD5-—Ö—ç—à —Å—Ç—Ä–æ–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ API, –Ω–∞–ø—Ä–∏–º–µ—Ä Click)."""
    return hashlib.md5(data.encode()).hexdigest()


# ----------------------------
# üîπ –°—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
# ----------------------------

def normalize_amount(value: Union[int, float, str]) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—É–º–º—É –≤ float (2 –∑–Ω–∞–∫–∞)."""
    try:
        return round(float(value), 2)
    except Exception:
        return 0.0


def uzs_to_uzt(amount_uzs: float, rate: float = 75.0) -> float:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—É–º–º—É –∏–∑ —Å—É–º–æ–≤ –≤ UZT (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É).
    –ü—Ä–∏–º–µ—Ä: 7500 —Å—É–º ‚Üí 100 UZT –ø—Ä–∏ rate=75.
    """
    return round(amount_uzs / rate, 2)


def uzt_to_uzs(amount_uzt: float, rate: float = 75.0) -> float:
    """–û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (UZT ‚Üí —Å—É–º—ã)."""
    return round(amount_uzt * rate, 2)


def format_currency(value: float, currency: str = "UZS") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞: 12 345.00 UZS."""
    return f"{value:,.2f} {currency}".replace(",", " ")


# ----------------------------
# üîπ –í—Ä–µ–º—è –∏ timestamp
# ----------------------------

def now_utc() -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC."""
    return datetime.now(timezone.utc)


def timestamp() -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç UNIX timestamp (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)."""
    return int(time.time())


def isoformat(dt: Optional[datetime] = None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ISO-—Å—Ç—Ä–æ–∫—É (UTC)."""
    return (dt or now_utc()).isoformat()


# ----------------------------
# üîπ Callback-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
# ----------------------------

def validate_callback_fields(data: Dict[str, Any], required: list[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ callback-–∑–∞–ø—Ä–æ—Å–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å–µ –µ—Å—Ç—å.
    """
    return all(field in data for field in required)


def build_signature_payload(data: Dict[str, Any], fields: list[str]) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (–≤ –ø–æ—Ä—è–¥–∫–µ).
    –ü—Ä–∏–º–µ—Ä:
        fields = ["merchant_id", "amount", "transaction_id"]
        ‚Üí "123|15000|tx_abc"
    """
    return "|".join(str(data.get(f, "")) for f in fields)


# ----------------------------
# üîπ –†–∞–∑–Ω–æ–µ
# ----------------------------

def safe_int(value: Any, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int."""
    try:
        return int(value)
    except Exception:
        return default


def safe_str(value: Any, default: str = "") -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É."""
    if value is None:
        return default
    return str(value)
