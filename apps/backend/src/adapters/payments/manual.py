"""
Uzinex Boost ‚Äî Manual Payment Provider
======================================

–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è —Ä—É—á–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ —á–µ–∫–∏.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞, –∞–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç.
–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è (—É–∑—Ç –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –∫–æ—à–µ–ª—ë–∫).
"""

from __future__ import annotations

from typing import Any, Dict, Optional
from datetime import datetime

from .base import PaymentProvider, PaymentInvoice
from .exceptions import (
    PaymentError,
    PaymentNotFound,
    PaymentPending,
    PaymentDeclined,
    PaymentAlreadyProcessed,
    UnsupportedOperation,
)


class ManualPaymentProvider(PaymentProvider):
    """
    –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ä—É—á–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π (—á–µ—Ä–µ–∑ —á–µ–∫–∏).

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∂–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API.
    """

    def __init__(self, **kwargs):
        super().__init__(name="manual")
        self._storage: Dict[str, Dict[str, Any]] = {}  # –∏–º–∏—Ç–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ—Ä–∞ (–≤ –±—É–¥—É—â–µ–º ‚Äî DB –∑–∞–ø–∏—Å–∏ boost_deposits)

    # ----------------------------
    # üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ (invoice)
    # ----------------------------

    async def create_invoice(self, user_id: str, amount_uzt: float, **kwargs) -> PaymentInvoice:
        """
        –°–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–≤ —Å—Ç–∞—Ç—É—Å–µ pending).
        """
        invoice_id = self.make_invoice_id()
        invoice = PaymentInvoice(
            id=invoice_id,
            user_id=user_id,
            amount_uzt=self.normalize_amount(amount_uzt),
            provider=self.name,
            status="pending",
            currency="UZS",
            pay_url=None,  # –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            created_at=datetime.utcnow(),
            extra={"type": "manual", "note": kwargs.get("note")},
        )
        self._storage[invoice_id] = invoice.to_dict()
        return invoice

    # ----------------------------
    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    # ----------------------------

    async def verify_payment(self, invoice_id: str, **kwargs) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–º).
        """
        record = self._storage.get(invoice_id)
        if not record:
            raise PaymentNotFound("Manual invoice not found", provider=self.name, invoice_id=invoice_id)

        status = record.get("status")
        if status == "paid":
            raise PaymentAlreadyProcessed("Invoice already confirmed", provider=self.name, invoice_id=invoice_id)
        elif status == "declined":
            raise PaymentDeclined("Invoice was rejected", provider=self.name, invoice_id=invoice_id)
        elif status == "pending":
            # –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
            raise PaymentPending("Invoice awaiting approval", provider=self.name, invoice_id=invoice_id)

        raise PaymentError(f"Unknown status: {status}", provider=self.name, invoice_id=invoice_id)

    # ----------------------------
    # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    # ----------------------------

    async def get_status(self, invoice_id: str, **kwargs) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ (pending / paid / declined).
        """
        record = self._storage.get(invoice_id)
        if not record:
            raise PaymentNotFound("Invoice not found", provider=self.name, invoice_id=invoice_id)
        return record.get("status", "unknown")

    # ----------------------------
    # üîπ –í–æ–∑–≤—Ä–∞—Ç (refund)
    # ----------------------------

    async def refund(self, invoice_id: str, **kwargs) -> bool:
        """
        –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.
        """
        raise UnsupportedOperation("Manual provider does not support refunds")

    # ----------------------------
    # üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback/webhook (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    # ----------------------------

    async def parse_callback(self, data: Dict[str, Any], headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
        """
        –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ callback –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
        –ú–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        """
        return {
            "invoice_id": data.get("invoice_id"),
            "status": data.get("status", "pending"),
            "amount_uzt": data.get("amount_uzt", 0),
            "signature_valid": True,
        }

    # ----------------------------
    # üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    # ----------------------------

    async def approve_invoice(self, invoice_id: str) -> bool:
        """
        –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É –≤—Ä—É—á–Ω—É—é.
        """
        record = self._storage.get(invoice_id)
        if not record:
            raise PaymentNotFound("Invoice not found", provider=self.name, invoice_id=invoice_id)

        record["status"] = "paid"
        record["confirmed_at"] = datetime.utcnow().isoformat()
        self._storage[invoice_id] = record
        return True

    async def reject_invoice(self, invoice_id: str, reason: str) -> bool:
        """
        –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ–ø–ª–∞—Ç—É –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π —á–µ–∫).
        """
        record = self._storage.get(invoice_id)
        if not record:
            raise PaymentNotFound("Invoice not found", provider=self.name, invoice_id=invoice_id)

        record["status"] = "declined"
        record["reason"] = reason
        record["confirmed_at"] = datetime.utcnow().isoformat()
        self._storage[invoice_id] = record
        return True
