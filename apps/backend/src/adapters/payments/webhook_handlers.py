"""
Uzinex Boost ‚Äî Payment Webhook Handlers
=======================================

–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö callback/webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.

–ó–∞–¥–∞—á–∏:
- –ø—Ä–∏–Ω—è—Ç—å –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞,
- –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (click, payme, apelsin –∏ —Ç.–¥.),
- –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö,
- –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å payload –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π.

–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ `parse_callback()` –≤ —Å–≤–æ—ë–º –∞–¥–∞–ø—Ç–µ—Ä–µ.
"""

from __future__ import annotations

import logging
from typing import Any, Dict, Optional

from fastapi import Request

from . import get_provider
from .exceptions import InvalidSignature, WebhookAuthError, PaymentError


logger = logging.getLogger("uzinex.payments.webhook")


# ----------------------------
# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ----------------------------

async def handle_webhook(request: Request, provider_name: str) -> Dict[str, Any]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç webhook –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π payload.

    :param request: FastAPI Request –æ–±—ä–µ–∫—Ç
    :param provider_name: –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ("click", "payme", "apelsin" –∏ —Ç.–¥.)
    :return: dict –≤–∏–¥–∞:
        {
            "invoice_id": str,
            "status": str,
            "amount_uzt": float,
            "signature_valid": bool,
            "raw": dict
        }
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider = get_provider(provider_name)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        headers = dict(request.headers)
        content_type = headers.get("content-type", "").lower()
        if "application/json" in content_type:
            data = await request.json()
        else:
            form = await request.form()
            data = dict(form)

        logger.info(f"[Webhook] Received from {provider_name}: {data}")

        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
        parsed = await provider.parse_callback(data, headers)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if not parsed.get("signature_valid", False):
            logger.warning(f"[Webhook] Invalid signature from {provider_name}: {data}")
            raise InvalidSignature(f"Invalid signature from {provider_name}")

        normalized = {
            "invoice_id": parsed.get("invoice_id"),
            "status": parsed.get("status"),
            "amount_uzt": parsed.get("amount_uzt", 0),
            "signature_valid": True,
            "provider": provider_name,
            "raw": data,
        }

        logger.info(f"[Webhook] Validated callback from {provider_name}: {normalized}")
        return normalized

    except InvalidSignature as e:
        raise WebhookAuthError(str(e)) from e

    except Exception as e:
        logger.exception(f"[Webhook] Error handling callback from {provider_name}: {e}")
        raise PaymentError(f"Webhook processing failed: {e}") from e


# ----------------------------
# üîπ –•–µ–ª–ø–µ—Ä –¥–ª—è FastAPI –º–∞—Ä—à—Ä—É—Ç–∞
# ----------------------------

async def webhook_entrypoint(request: Request, provider_name: str) -> Dict[str, Any]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ FastAPI router.
    –ú–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–∫:
        @router.post("/webhook/{provider_name}")
        async def payment_webhook(provider_name: str, request: Request):
            return await webhook_entrypoint(request, provider_name)
    """
    result = await handle_webhook(request, provider_name)
    return {"ok": True, "provider": provider_name, "data": result}
