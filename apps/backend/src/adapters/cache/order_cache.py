"""
Uzinex Boost ‚Äî Order Cache Adapter
==================================

–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (orders) –≤ Redis.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
- —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∑–∞–∫–∞–∑–æ–≤,
- —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è,
- –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
- —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ PostgreSQL.
"""

from __future__ import annotations

from typing import Any, Dict, List, Optional

from .base import CacheBackend
from .exceptions import CacheError


class OrderCache:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis (–∏–ª–∏ –¥—Ä—É–≥–æ–π CacheBackend) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """

    def __init__(self, cache: CacheBackend, namespace: str = "orders", ttl: int = 300):
        """
        :param cache: —ç–∫–∑–µ–º–ø–ª—è—Ä CacheBackend
        :param namespace: –ø—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–µ–π Redis
        :param ttl: –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        """
        self.cache = cache
        self.namespace = namespace
        self.ttl = ttl

    # --------------------------
    # üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    # --------------------------

    def _key(self, *parts: Any) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª—é—á —Å namespace."""
        return self.cache.build_key(self.namespace, *parts)

    async def set_order_stats(
        self,
        order_id: str,
        total: int,
        done: int,
        status: str,
        owner_id: Optional[str] = None,
    ) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–∞.

        :param order_id: UUID –∑–∞–∫–∞–∑–∞
        :param total: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
        :param done: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        :param status: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        :param owner_id: id –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤)
        """
        key = self._key(order_id, "stats")
        data = {
            "total": total,
            "done": done,
            "status": status,
        }
        if owner_id:
            data["owner_id"] = owner_id

        return await self.cache.set(key, self.cache.to_json(data), expire=self.ttl)

    async def get_order_stats(self, order_id: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –∫—ç—à–µ."""
        key = self._key(order_id, "stats")
        raw = await self.cache.get(key)
        if not raw:
            return None
        return self.cache.from_json(raw)

    async def update_done_count(self, order_id: str, increment: int = 1) -> Optional[int]:
        """
        –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –∫—ç—à–µ (done_count).
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ approve –∑–∞–¥–∞—á.
        """
        stats = await self.get_order_stats(order_id)
        if not stats:
            return None
        stats["done"] = int(stats.get("done", 0)) + increment
        await self.cache.set(self._key(order_id, "stats"), self.cache.to_json(stats), expire=self.ttl)
        return stats["done"]

    async def cache_active_orders(self, owner_id: str, order_ids: List[str]) -> bool:
        """
        –ö—ç—à–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        key = self._key("user", owner_id, "active")
        return await self.cache.set(key, self.cache.to_json(order_ids), expire=self.ttl)

    async def get_active_orders(self, owner_id: str) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å).
        """
        key = self._key("user", owner_id, "active")
        data = await self.cache.get(key)
        if not data:
            return []
        return self.cache.from_json(data)

    async def invalidate_order(self, order_id: str) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
        """
        key = self._key(order_id, "stats")
        await self.cache.delete(key)

    async def invalidate_user_orders(self, owner_id: str) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –∫—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        key = self._key("user", owner_id, "active")
        await self.cache.delete(key)

    # --------------------------
    # üîπ –£—Ç–∏–ª–∏—Ç—ã
    # --------------------------

    async def refresh_ttl(self, order_id: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç TTL —É –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–∞."""
        key = self._key(order_id, "stats")
        return await self.cache.expire(key, self.ttl)

    async def get_progress_percent(self, order_id: str) -> Optional[float]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ.
        """
        stats = await self.get_order_stats(order_id)
        if not stats:
            return None
        total = max(1, int(stats.get("total", 1)))
        done = int(stats.get("done", 0))
        return round(done / total * 100, 2)

    async def get_summary_for_user(self, owner_id: str) -> Dict[str, Any]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        (–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã, —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π)
        """
        active_orders = await self.get_active_orders(owner_id)
        if not active_orders:
            return {"active_count": 0, "avg_progress": 0.0, "total_done": 0}

        progresses = []
        total_done = 0

        for order_id in active_orders:
            stats = await self.get_order_stats(order_id)
            if stats:
                done = int(stats.get("done", 0))
                total = int(stats.get("total", 1))
                progresses.append(done / max(1, total))
                total_done += done

        avg_progress = round(sum(progresses) / len(progresses) * 100, 2) if progresses else 0.0
        return {
            "active_count": len(active_orders),
            "avg_progress": avg_progress,
            "total_done": total_done,
        }
