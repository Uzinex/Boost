"""
Uzinex Boost ‚Äî Task Cache Adapter
=================================

–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π (tasks) –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (proofs).

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
- —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
- –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—ã–¥–∞—á–∏ —Ç–æ–≥–æ –∂–µ –∑–∞–¥–∞–Ω–∏—è,
- –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è proof –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º,
- —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏–π –±–µ–∑ –ª–∏—à–Ω–∏—Ö SQL-–∑–∞–ø—Ä–æ—Å–æ–≤.
"""

from __future__ import annotations

from typing import Any, Dict, List, Optional
from datetime import timedelta

from .base import CacheBackend


class TaskCache:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –∏ proof-–¥–∞–Ω–Ω—ã—Ö.

    –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Redis (CacheBackend).
    TTL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 5 –º–∏–Ω—É—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, 15 –º–∏–Ω—É—Ç –¥–ª—è proof.
    """

    def __init__(
        self,
        cache: CacheBackend,
        namespace: str = "tasks",
        ttl_active: int = 300,
        ttl_proof: int = 900,
    ):
        """
        :param cache: —ç–∫–∑–µ–º–ø–ª—è—Ä CacheBackend (RedisCache –∏–ª–∏ MemoryCache)
        :param namespace: –ø—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–µ–π
        :param ttl_active: TTL –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param ttl_proof: TTL –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è proof-–¥–∞–Ω–Ω—ã—Ö
        """
        self.cache = cache
        self.namespace = namespace
        self.ttl_active = ttl_active
        self.ttl_proof = ttl_proof

    # ----------------------------
    # üîπ –ö–ª—é—á–∏
    # ----------------------------

    def _key(self, *parts: Any) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç namespaced –∫–ª—é—á."""
        return self.cache.build_key(self.namespace, *parts)

    # ----------------------------
    # üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    # ----------------------------

    async def cache_active_task(self, user_id: str, task_id: str, order_id: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–¥–∞—á–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
        """
        key = self._key("active", user_id)
        data = {"task_id": task_id, "order_id": order_id}
        return await self.cache.set(key, self.cache.to_json(data), expire=self.ttl_active)

    async def get_active_task(self, user_id: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
        key = self._key("active", user_id)
        raw = await self.cache.get(key)
        if not raw:
            return None
        return self.cache.from_json(raw)

    async def clear_active_task(self, user_id: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ submit –∏–ª–∏ timeout)."""
        key = self._key("active", user_id)
        await self.cache.delete(key)

    async def is_task_active(self, user_id: str, task_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É ID.
        """
        active = await self.get_active_task(user_id)
        return bool(active and active.get("task_id") == task_id)

    # ----------------------------
    # üîπ Proof (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    # ----------------------------

    async def cache_proof(self, task_id: str, proof_data: Dict[str, Any]) -> bool:
        """
        –ö—ç—à–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (proof).
        Proof —Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏.
        """
        key = self._key("proof", task_id)
        return await self.cache.set(key, self.cache.to_json(proof_data), expire=self.ttl_proof)

    async def get_proof(self, task_id: str) -> Optional[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç proof-–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã.
        """
        key = self._key("proof", task_id)
        raw = await self.cache.get(key)
        if not raw:
            return None
        return self.cache.from_json(raw)

    async def delete_proof(self, task_id: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç proof –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (approve/reject)."""
        key = self._key("proof", task_id)
        await self.cache.delete(key)

    # ----------------------------
    # üîπ –ê–Ω—Ç–∏-–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
    # ----------------------------

    async def mark_task_given(self, user_id: str, order_id: str) -> bool:
        """
        –ü–æ–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –≤—ã–¥–∞–≤–∞–ª–æ—Å—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É.
        –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—ã–¥–∞—á–∏.
        """
        key = self._key("given", user_id, order_id)
        return await self.cache.set(key, "1", expire=self.ttl_active)

    async def was_task_given(self, user_id: str, order_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–¥–∞–≤–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É."""
        key = self._key("given", user_id, order_id)
        return await self.cache.exists(key)

    async def clear_given_tasks(self, user_id: str) -> None:
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ —Å–±—Ä–æ—Å–µ)."""
        pattern = self._key("given", user_id, "*")
        keys = []
        try:
            if hasattr(self.cache, "keys"):
                keys = await self.cache.keys(pattern)
        except Exception:
            pass

        for k in keys:
            await self.cache.delete(k)

    # ----------------------------
    # üîπ –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
    # ----------------------------

    async def get_user_summary(self, user_id: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        active = await self.get_active_task(user_id)
        return {
            "has_active_task": bool(active),
            "active_task_id": active.get("task_id") if active else None,
            "active_order_id": active.get("order_id") if active else None,
        }
