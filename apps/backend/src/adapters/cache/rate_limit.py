"""
Uzinex Boost ‚Äî Rate Limit Adapter
=================================

–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π (rate limiting).

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
- –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–ª—É–¥–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π,
- –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π,
- –∑–∞—â–∏—Ç—ã API –∏ WebApp –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.
"""

from __future__ import annotations

from datetime import timedelta
from typing import Any, Optional

from .base import CacheBackend
from .exceptions import RateLimitExceeded


class RateLimiter:
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ rate-limit –º–µ—Ö–∞–Ω–∏–∑–º–∞ –Ω–∞ Redis (—á–µ—Ä–µ–∑ CacheBackend).

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:
    - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ (fixed window counter)
    - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, IP –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—é
    """

    def __init__(
        self,
        cache: CacheBackend,
        namespace: str = "ratelimit",
        ttl: int = 10,
        limit: int = 5,
    ):
        """
        :param cache: —ç–∫–∑–µ–º–ø–ª—è—Ä CacheBackend (–æ–±—ã—á–Ω–æ RedisCache)
        :param namespace: –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–ª—é—á–µ–π
        :param ttl: –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 —Å–µ–∫)
        :param limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ ttl
        """
        self.cache = cache
        self.namespace = namespace
        self.ttl = ttl
        self.limit = limit

    def _key(self, scope: str, identifier: Any) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç namespaced –∫–ª—é—á, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        ratelimit:task_claim:user_123
        """
        return self.cache.build_key(self.namespace, scope, str(identifier))

    # --------------------------
    # üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # --------------------------

    async def check(self, scope: str, identifier: Any) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç.

        :param scope: –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä "task_claim", "deposit", "api_call")
        :param identifier: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (user_id, ip, tg_id)
        :raises RateLimitExceeded: –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
        """
        key = self._key(scope, identifier)
        count = await self.cache.incr(key, amount=1, expire=self.ttl)

        if count > self.limit:
            retry_after = await self.get_ttl_remaining(key)
            raise RateLimitExceeded(retry_after or self.ttl, key=key)

    async def get_ttl_remaining(self, key: str) -> Optional[int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ).
        """
        try:
            # –î–ª—è RedisCache ‚Äî TTL –µ—Å—Ç—å, –Ω–æ –≤ MemoryCache –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            ttl_method = getattr(self.cache, "get_ttl", None)
            if callable(ttl_method):
                return await ttl_method(key)
        except Exception:
            return None
        return None

    async def reset(self, scope: str, identifier: Any) -> None:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –ª–∏–º–∏—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–¥–µ–π—Å—Ç–≤–∏—è.
        """
        key = self._key(scope, identifier)
        await self.cache.delete(key)

    async def allow_once(self, scope: str, identifier: Any) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ ¬´–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è¬ª –≤ –æ–∫–Ω–µ TTL.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–ø–µ—Ä–≤—ã–µ.
        False, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–µ–ª–∞–ª —ç—Ç–æ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ.
        """
        key = self._key(scope, identifier)
        exists = await self.cache.exists(key)
        if exists:
            return False
        await self.cache.set(key, "1", expire=self.ttl)
        return True

    # --------------------------
    # üîπ –£—Ç–∏–ª–∏—Ç–∞: –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    # --------------------------

    def guard(self, scope: str, identifier: Any):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º –∫–æ–¥–∞.
        –ü—Ä–∏–º–µ—Ä:
            async with limiter.guard("task_submit", user_id):
                await service.submit_task(...)
        """
        return _RateLimitGuard(self, scope, identifier)


class _RateLimitGuard:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è RateLimiter."""

    def __init__(self, limiter: RateLimiter, scope: str, identifier: Any):
        self.limiter = limiter
        self.scope = scope
        self.identifier = identifier

    async def __aenter__(self):
        await self.limiter.check(self.scope, self.identifier)
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        return False  # –Ω–µ –ø–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
