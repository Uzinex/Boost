"""
Uzinex Boost ‚Äî Cache Utilities
==============================

–°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
- —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π,
- —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON,
- —Ä–∞–±–æ—Ç–∞ —Å TTL,
- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –∏ timestamp'–æ–≤.
"""

from __future__ import annotations

import json
import time
import hashlib
import uuid
from datetime import datetime, timedelta
from typing import Any, Optional, Union


# ----------------------------
# üîπ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
# ----------------------------

def build_cache_key(namespace: str, *parts: Union[str, int]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç namespaced-–∫–ª—é—á –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ.
    –ü—Ä–∏–º–µ—Ä: build_cache_key('orders', 123, 'stats') -> 'orders:123:stats'
    """
    clean_parts = [str(p).strip() for p in parts if p is not None]
    return ":".join([namespace, *clean_parts])


def hash_key(value: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ö—ç—à (SHA1) —Å—Ç—Ä–æ–∫–∏ ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö URL –∏–ª–∏ initData.
    """
    return hashlib.sha1(value.encode("utf-8")).hexdigest()[:24]


# ----------------------------
# üîπ TTL –∏ –≤—Ä–µ–º—è
# ----------------------------

def ttl_to_seconds(ttl: Union[int, timedelta, None]) -> Optional[int]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç timedelta –∏–ª–∏ int –≤ —Å–µ–∫—É–Ω–¥—ã."""
    if ttl is None:
        return None
    if isinstance(ttl, timedelta):
        return int(ttl.total_seconds())
    return int(ttl)


def is_expired(created_at: float, ttl: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞.
    :param created_at: UNIX timestamp (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    :param ttl: –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    return (time.time() - created_at) > ttl


# ----------------------------
# üîπ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ----------------------------

def to_json(value: Any) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è Python ‚Üí JSON."""
    try:
        return json.dumps(value, ensure_ascii=False, separators=(",", ":"))
    except Exception as e:
        raise ValueError(f"JSON serialization error: {e}")


def from_json(value: Optional[str]) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON ‚Üí Python."""
    if value is None:
        return None
    try:
        return json.loads(value)
    except Exception:
        return value


# ----------------------------
# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π / –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
# ----------------------------

def make_idempotency_key(prefix: str, unique_value: str) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Idempotency-Key –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
    –ü—Ä–∏–º–µ—Ä: make_idempotency_key('deposit', 'user123') -> 'deposit:1c9e3a8b...'
    """
    uid = uuid.uuid5(uuid.NAMESPACE_DNS, unique_value)
    return f"{prefix}:{uid.hex}"


def generate_timestamp_key(prefix: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è –ª–æ–≥–æ–≤ –∏ –∞—É–¥–∏—Ç–∞.
    –ü—Ä–∏–º–µ—Ä: generate_timestamp_key('proof') -> 'proof:20251012T001532'
    """
    ts = datetime.utcnow().strftime("%Y%m%dT%H%M%S")
    return f"{prefix}:{ts}"


# ----------------------------
# üîπ –ü—Ä–æ—á–µ–µ
# ----------------------------

def safe_int(value: Any, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int."""
    try:
        return int(value)
    except Exception:
        return default


def current_timestamp() -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π UNIX timestamp (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)."""
    return int(time.time())
