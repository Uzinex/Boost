"""
Uzinex Boost ‚Äî User Cache Adapter
=================================

–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ Telegram WebApp —Å–µ—Å—Å–∏–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
- —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (id, —Ä–æ–ª—å, –±–∞–ª–∞–Ω—Å),
- –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö initData (Telegram WebApp auth),
- —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –±–µ–∑ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤,
- –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.
"""

from __future__ import annotations

from typing import Any, Dict, Optional
from datetime import timedelta

from .base import CacheBackend


class UserCache:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ WebApp-—Å–µ—Å—Å–∏–π.
    """

    def __init__(
        self,
        cache: CacheBackend,
        namespace: str = "users",
        ttl_profile: int = 600,
        ttl_session: int = 900,
    ):
        """
        :param cache: —ç–∫–∑–µ–º–ø–ª—è—Ä CacheBackend (RedisCache / MemoryCache)
        :param namespace: –ø—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–µ–π
        :param ttl_profile: TTL –∫—ç—à–∞ –ø—Ä–æ—Ñ–∏–ª—è (10 –º–∏–Ω—É—Ç)
        :param ttl_session: TTL Telegram WebApp —Å–µ—Å—Å–∏–∏ (15 –º–∏–Ω—É—Ç)
        """
        self.cache = cache
        self.namespace = namespace
        self.ttl_profile = ttl_profile
        self.ttl_session = ttl_session

    # ----------------------------
    # üîπ –ö–ª—é—á–∏
    # ----------------------------

    def _key(self, *parts: Any) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç namespaced –∫–ª—é—á."""
        return self.cache.build_key(self.namespace, *parts)

    # ----------------------------
    # üîπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # ----------------------------

    async def set_profile(self, user_id: str, profile_data: Dict[str, Any]) -> bool:
        """
        –ö—ç—à–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å:
        {
            "id": "uuid",
            "tg_id": 123456,
            "username": "john",
            "balance": 145.7,
            "role": "user",
            "status": "active"
        }
        """
        key = self._key("profile", user_id)
        return await self.cache.set(key, self.cache.to_json(profile_data), expire=self.ttl_profile)

    async def get_profile(self, user_id: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –∫—ç—à–µ."""
        key = self._key("profile", user_id)
        raw = await self.cache.get(key)
        if not raw:
            return None
        return self.cache.from_json(raw)

    async def invalidate_profile(self, user_id: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞)."""
        key = self._key("profile", user_id)
        await self.cache.delete(key)

    async def refresh_profile_ttl(self, user_id: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç TTL –ø—Ä–æ—Ñ–∏–ª—è."""
        key = self._key("profile", user_id)
        return await self.cache.expire(key, self.ttl_profile)

    # ----------------------------
    # üîπ Telegram WebApp —Å–µ—Å—Å–∏—è
    # ----------------------------

    async def cache_session(self, session_hash: str, user_id: str, data: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram WebApp initData.

        :param session_hash: HMAC-—Ö–µ—à Telegram initData (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è —Å–µ—Å—Å–∏–∏)
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param data: –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram WebApp (username, auth_date –∏ —Ç.–¥.)
        """
        key = self._key("session", session_hash)
        payload = {"user_id": user_id, "data": data}
        return await self.cache.set(key, self.cache.to_json(payload), expire=self.ttl_session)

    async def get_session(self, session_hash: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Telegram WebApp-—Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞."""
        key = self._key("session", session_hash)
        raw = await self.cache.get(key)
        if not raw:
            return None
        return self.cache.from_json(raw)

    async def invalidate_session(self, session_hash: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç WebApp-—Å–µ—Å—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ logout)."""
        key = self._key("session", session_hash)
        await self.cache.delete(key)

    async def is_session_active(self, session_hash: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è (initData –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞)."""
        key = self._key("session", session_hash)
        return await self.cache.exists(key)

    # ----------------------------
    # üîπ –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    # ----------------------------

    async def get_role(self, user_id: str) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('user' / 'admin'), –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫—ç—à–µ.
        """
        profile = await self.get_profile(user_id)
        return profile.get("role") if profile else None

    async def is_admin(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–ø–æ –∫—ç—à—É)."""
        role = await self.get_role(user_id)
        return role == "admin"

    async def is_active(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ –∫—ç—à—É)."""
        profile = await self.get_profile(user_id)
        return profile is not None and profile.get("status") == "active"

    async def update_balance_in_cache(self, user_id: str, new_balance: float) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –¥—Ä—É–≥–∏–µ –ø–æ–ª—è.
        """
        profile = await self.get_profile(user_id)
        if not profile:
            return
        profile["balance"] = new_balance
        await self.set_profile(user_id, profile)

    # ----------------------------
    # üîπ –°–≤–æ–¥–∫–∞ / —É—Ç–∏–ª–∏—Ç—ã
    # ----------------------------

    async def get_summary(self, user_id: str) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –¥–ª—è WebApp:
        {
            "user_id": ...,
            "username": ...,
            "role": ...,
            "balance": ...,
            "is_active": True/False
        }
        """
        profile = await self.get_profile(user_id)
        if not profile:
            return {"user_id": user_id, "is_active": False}
        return {
            "user_id": profile.get("id"),
            "username": profile.get("username"),
            "role": profile.get("role"),
            "balance": profile.get("balance"),
            "is_active": profile.get("status") == "active",
        }
