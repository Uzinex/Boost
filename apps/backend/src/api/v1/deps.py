"""
Uzinex Boost API v1 ‚Äî Dependencies
===================================

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ FastAPI –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ API:
- –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (JWT / Telegram WebApp);
- –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ Redis;
- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (domain layer);
- Telegram-–∫–ª–∏–µ–Ω—Ç –∏ –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.

–í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã /api/v1/routes/* –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Depends().
"""

from __future__ import annotations

import logging
from fastapi import Depends, HTTPException, status
from typing import AsyncGenerator, Any

from core.database import get_async_session
from core.security import decode_session_token
from domain.services import (
    UserService,
    BalanceService,
    OrderService,
    TaskService,
    PaymentService,
    HealthService,
)
from adapters.cache.redis_cache import RedisCache
from adapters.telegram.client import TelegramClient

logger = logging.getLogger("uzinex.api.deps")


# -------------------------------------------------
# üîπ Database session
# -------------------------------------------------

async def get_db_session() -> AsyncGenerator:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –ë–î.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ domain-—É—Ä–æ–≤–Ω—è.
    """
    async for session in get_async_session():
        yield session


# -------------------------------------------------
# üîπ Redis Cache
# -------------------------------------------------

async def get_cache() -> RedisCache:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä RedisCache (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)."""
    cache = RedisCache()
    await cache.connect()
    return cache


# -------------------------------------------------
# üîπ Telegram Client
# -------------------------------------------------

def get_telegram_client() -> TelegramClient:
    """–°–æ–∑–¥–∞—ë—Ç Telegram-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ Webhook."""
    return TelegramClient()


# -------------------------------------------------
# üîπ Current User Authorization
# -------------------------------------------------

async def get_current_user(
    token: str = Depends(decode_session_token),
    user_service: UserService = Depends(lambda: UserService()),
) -> dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT / session_token –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö ( /users, /balance, /orders –∏ —Ç.–¥. ).
    """
    try:
        user_id = token.get("sub")
        if not user_id:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid session token")

        user = await user_service.get_user_by_id(user_id)
        if not user:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="User not found")

        return {
            "id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "language": user.language,
        }
    except Exception as e:
        logger.warning(f"[Auth] Unauthorized access attempt: {e}")
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid or expired token")


# -------------------------------------------------
# üîπ Domain Services
# -------------------------------------------------

def get_user_service() -> UserService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä UserService."""
    return UserService()


def get_balance_service() -> BalanceService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä BalanceService."""
    return BalanceService()


def get_order_service() -> OrderService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä OrderService."""
    return OrderService()


def get_task_service() -> TaskService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TaskService."""
    return TaskService()


def get_payment_service() -> PaymentService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä PaymentService."""
    return PaymentService()


def get_health_service() -> HealthService:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä HealthService (–¥–ª—è /system/health)."""
    return HealthService()
