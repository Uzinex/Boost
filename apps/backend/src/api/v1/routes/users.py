"""
Uzinex Boost API v1 ‚Äî Users Routes
===================================

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—á–µ—Ä–µ–∑ Telegram WebApp);
- –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è;
- —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è;
- –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
–∏—Å–ø–æ–ª—å–∑—É–µ—Ç domain.services.users, balance, telegram, security.
"""

from __future__ import annotations

import logging
from typing import Any, Dict

from fastapi import APIRouter, Depends, HTTPException, status, Query

from domain.services.users import UserService
from domain.services.balance import BalanceService
from adapters.telegram import TelegramClient, send_notification
from core.security import get_current_user

logger = logging.getLogger("uzinex.api.users")

router = APIRouter(tags=["Users"], prefix="/users")


# -------------------------------------------------
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# -------------------------------------------------

async def get_user_service() -> UserService:
    return UserService()


async def get_balance_service() -> BalanceService:
    return BalanceService()


# -------------------------------------------------
# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
# -------------------------------------------------

@router.get("/me", response_model=Dict[str, Any])
async def get_profile(
    current_user: Dict[str, Any] = Depends(get_current_user),
    balance_service: BalanceService = Depends(get_balance_service),
):
    """
    üë§ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å.
    """
    try:
        balance = await balance_service.get_balance(current_user["id"])
        return {
            "ok": True,
            "user": {
                "id": current_user["id"],
                "username": current_user.get("username"),
                "first_name": current_user.get("first_name"),
                "language": current_user.get("language", "ru"),
                "balance": balance,
            },
        }
    except Exception as e:
        logger.exception("[Users] Failed to fetch profile")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# -------------------------------------------------
# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
# -------------------------------------------------

@router.post("/update", response_model=Dict[str, Any])
async def update_profile(
    username: str | None = Query(None, description="–ù–∏–∫–Ω–µ–π–º Telegram –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    language: str | None = Query(None, description="–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"),
    user_service: UserService = Depends(get_user_service),
    current_user: Dict[str, Any] = Depends(get_current_user),
):
    """
    ‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        updated = await user_service.update_user(
            user_id=current_user["id"],
            username=username,
            language=language,
        )
        logger.info(f"[Users] Updated profile for user {current_user['id']}")
        return {"ok": True, "user": updated}
    except Exception as e:
        logger.exception("[Users] Failed to update profile")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# -------------------------------------------------
# üîπ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
# -------------------------------------------------

@router.get("/referrals", response_model=Dict[str, Any])
async def get_referrals(
    user_service: UserService = Depends(get_user_service),
    current_user: Dict[str, Any] = Depends(get_current_user),
):
    """
    ü§ù –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        referrals = await user_service.get_referrals(current_user["id"])
        return {"ok": True, "count": len(referrals), "referrals": referrals}
    except Exception as e:
        logger.exception("[Users] Failed to fetch referrals")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# -------------------------------------------------
# üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
# -------------------------------------------------

@router.post("/notify", response_model=Dict[str, Any])
async def user_notify(
    telegram_client: TelegramClient = Depends(),
    text: str = Query(..., description="–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
    current_user: Dict[str, Any] = Depends(get_current_user),
):
    """
    üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–µ—Å—Ç–æ–≤–æ–µ).
    """
    try:
        await send_notification(
            telegram_client,
            user_id=current_user["id"],
            text=text,
            message_type="info",
        )
        logger.info(f"[Users] Notification sent to user {current_user['id']}")
        return {"ok": True, "message": "Notification sent"}
    except Exception as e:
        logger.exception("[Users] Failed to send notification")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# -------------------------------------------------
# üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
# -------------------------------------------------

@router.delete("/delete", response_model=Dict[str, Any])
async def delete_account(
    user_service: UserService = Depends(get_user_service),
    current_user: Dict[str, Any] = Depends(get_current_user),
):
    """
    ‚ö†Ô∏è –£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –∑–∞–ø—Ä–æ—Å—É).
    """
    try:
        await user_service.delete_user(current_user["id"])
        logger.warning(f"[Users] User {current_user['id']} deleted their account")
        return {"ok": True, "message": "Account deleted"}
    except Exception as e:
        logger.exception("[Users] Failed to delete account")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
