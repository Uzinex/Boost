"""
Uzinex Boost API v1 ‚Äî Orders Routes
===================================

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ (–Ω–∞–∫—Ä—É—Ç–∫–∏, –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ).

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞;
- –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
- –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞;
- –æ—Ç–º–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞;
- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ UZT –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
–∏—Å–ø–æ–ª—å–∑—É–µ—Ç domain.services.orders –∏ –±–∞–ª–∞–Ω—Å UZT.
"""

from __future__ import annotations

import logging
from typing import Any, Dict, List

from fastapi import APIRouter, Depends, HTTPException, status, Query

from domain.services.orders import OrderService
from domain.services.balance import BalanceService
from adapters.telegram import TelegramClient, send_notification
from core.security import get_current_user  # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp

logger = logging.getLogger("uzinex.api.orders")

router = APIRouter(tags=["Orders"], prefix="/orders")


# ----------------------------
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# ----------------------------

async def get_order_service() -> OrderService:
    return OrderService()


async def get_balance_service() -> BalanceService:
    return BalanceService()


# ----------------------------
# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
# ----------------------------

@router.post("/", response_model=Dict[str, Any])
async def create_order(
    order_type: str = Query(..., description="–¢–∏–ø –∑–∞–∫–∞–∑–∞: channel | group"),
    target_url: str = Query(..., description="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É"),
    quantity: int = Query(..., ge=10, le=10000, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤/–ø–æ–¥–ø–∏—Å–æ–∫"),
    current_user: Dict[str, Any] = Depends(get_current_user),
    order_service: OrderService = Depends(get_order_service),
    balance_service: BalanceService = Depends(get_balance_service),
    telegram_client: TelegramClient = Depends(),
):
    """
    ‚ûï –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ.
    –°–ø–∏—Å—ã–≤–∞–µ—Ç UZT —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        cost_per_action = 0.6 if order_type == "channel" else 0.4
        total_cost = quantity * cost_per_action

        balance = await balance_service.get_balance(current_user["id"])
        if balance < total_cost:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        await balance_service.decrease_balance(current_user["id"], total_cost)
        order = await order_service.create_order(
            user_id=current_user["id"],
            order_type=order_type,
            target_url=target_url,
            quantity=quantity,
            cost_per_action=cost_per_action,
            total_cost=total_cost,
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_notification(
            telegram_client,
            user_id=current_user["id"],
            text=(
                f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"<b>–¢–∏–ø:</b> {order_type}\n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}\n"
                f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost:.2f} UZT"
            ),
            message_type="success",
        )

        logger.info(f"[Orders] User {current_user['id']} created order #{order.id}")
        return {"ok": True, "order_id": order.id, "total_cost": total_cost}

    except Exception as e:
        logger.exception("[Orders] Failed to create order")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤
# ----------------------------

@router.get("/", response_model=List[Dict[str, Any]])
async def list_user_orders(
    current_user: Dict[str, Any] = Depends(get_current_user),
    order_service: OrderService = Depends(get_order_service),
):
    """
    üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        orders = await order_service.list_user_orders(current_user["id"])
        logger.info(f"[Orders] {current_user['id']} fetched their orders ({len(orders)} total)")
        return orders
    except Exception as e:
        logger.exception("[Orders] Failed to fetch user orders")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
# ----------------------------

@router.get("/{order_id}", response_model=Dict[str, Any])
async def get_order_details(
    order_id: int,
    current_user: Dict[str, Any] = Depends(get_current_user),
    order_service: OrderService = Depends(get_order_service),
):
    """
    üîç –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    """
    try:
        order = await order_service.get_order(order_id, user_id=current_user["id"])
        if not order:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return order
    except Exception as e:
        logger.exception("[Orders] Failed to fetch order details")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
# ----------------------------

@router.post("/{order_id}/cancel", response_model=Dict[str, Any])
async def cancel_order(
    order_id: int,
    current_user: Dict[str, Any] = Depends(get_current_user),
    order_service: OrderService = Depends(get_order_service),
    balance_service: BalanceService = Depends(get_balance_service),
    telegram_client: TelegramClient = Depends(),
):
    """
    ‚ùå –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è UZT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        refund_amount = await order_service.cancel_order(order_id, user_id=current_user["id"])
        if refund_amount > 0:
            await balance_service.increase_balance(current_user["id"], refund_amount)

            await send_notification(
                telegram_client,
                user_id=current_user["id"],
                text=f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—Ç: {refund_amount:.2f} UZT üí∞",
                message_type="info",
            )

        logger.info(f"[Orders] User {current_user['id']} canceled order #{order_id}")
        return {"ok": True, "order_id": order_id, "refund": refund_amount}
    except Exception as e:
        logger.exception("[Orders] Failed to cancel order")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
# ----------------------------

@router.get("/stats/summary", response_model=Dict[str, Any])
async def get_orders_summary(
    current_user: Dict[str, Any] = Depends(get_current_user),
    order_service: OrderService = Depends(get_order_service),
):
    """
    üìä –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        summary = await order_service.get_user_summary(user_id=current_user["id"])
        return summary
    except Exception as e:
        logger.exception("[Orders] Failed to get summary")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
