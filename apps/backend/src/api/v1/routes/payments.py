"""
Uzinex Boost API v1 ‚Äî Payments Routes
=====================================

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (manual, click, payme);
- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏;
- –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏ —Å–ø–∏—Å–∞–Ω–∏–π;
- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ UZT-–±–∞–ª–∞–Ω—Å–æ–º.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
–∏—Å–ø–æ–ª—å–∑—É–µ—Ç domain.services.payments –∏ adapters.payments
"""

from __future__ import annotations

import logging
from typing import Any, Dict, List

from fastapi import APIRouter, Depends, HTTPException, Query, status

from domain.services.payment_service import PaymentService
from domain.services.balance_service import BalanceService
from adapters.payments import get_provider
from adapters.telegram import TelegramClient, send_notification
from core.security import get_current_user  # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp

logger = logging.getLogger("uzinex.api.payments")

router = APIRouter(tags=["Payments"], prefix="/payments")


# ----------------------------
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# ----------------------------

async def get_payment_service() -> PaymentService:
    return PaymentService()


async def get_balance_service() -> BalanceService:
    return BalanceService()


# ----------------------------
# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
# ----------------------------

@router.post("/manual", response_model=Dict[str, Any])
async def create_manual_payment(
    amount: float = Query(..., gt=0, description="–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ UZT"),
    check_photo_url: str = Query(..., description="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞ (Telegram FileID –∏–ª–∏ URL)"),
    current_user: Dict[str, Any] = Depends(get_current_user),
    payment_service: PaymentService = Depends(get_payment_service),
    telegram_client: TelegramClient = Depends(),
):
    """
    üßæ –°–æ–∑–¥–∞—ë—Ç —Ä—É—á–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–ø–æ —á–µ–∫—É).
    """
    try:
        provider = get_provider("manual")

        invoice = await provider.create_invoice(
            user_id=current_user["id"],
            amount_uzt=amount,
            check_photo_url=check_photo_url,
        )

        await payment_service.register_invoice(invoice)

        await send_notification(
            telegram_client,
            user_id=current_user["id"],
            text=(
                f"üßæ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ <b>{amount:.2f} UZT</b> —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚è≥"
            ),
            message_type="info",
        )

        logger.info(f"[Payments] Manual invoice created for user {current_user['id']}, amount={amount}")
        return {"ok": True, "invoice_id": invoice.id, "status": "pending"}

    except Exception as e:
        logger.exception("[Payments] Failed to create manual payment")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
# ----------------------------

@router.get("/{invoice_id}/status", response_model=Dict[str, Any])
async def get_payment_status(
    invoice_id: str,
    payment_service: PaymentService = Depends(get_payment_service),
    current_user: Dict[str, Any] = Depends(get_current_user),
):
    """
    üìä –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    try:
        invoice = await payment_service.get_invoice(invoice_id)
        if not invoice or invoice.user_id != current_user["id"]:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        return {
            "ok": True,
            "invoice_id": invoice.id,
            "status": invoice.status,
            "amount_uzt": invoice.amount_uzt,
            "created_at": str(invoice.created_at),
        }

    except Exception as e:
        logger.exception("[Payments] Failed to fetch payment status")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
# ----------------------------

@router.get("/history", response_model=List[Dict[str, Any]])
async def get_payment_history(
    payment_service: PaymentService = Depends(get_payment_service),
    current_user: Dict[str, Any] = Depends(get_current_user),
):
    """
    üìú –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        history = await payment_service.list_user_invoices(user_id=current_user["id"])
        return history
    except Exception as e:
        logger.exception("[Payments] Failed to fetch payment history")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –£–¥–∞–ª–µ–Ω–∏–µ (–æ—Ç–º–µ–Ω–∞) –∑–∞—è–≤–∫–∏
# ----------------------------

@router.post("/{invoice_id}/cancel", response_model=Dict[str, Any])
async def cancel_payment(
    invoice_id: str,
    payment_service: PaymentService = Depends(get_payment_service),
    telegram_client: TelegramClient = Depends(),
    current_user: Dict[str, Any] = Depends(get_current_user),
):
    """
    ‚ùå –û—Ç–º–µ–Ω—è–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.
    """
    try:
        canceled = await payment_service.cancel_invoice(invoice_id, user_id=current_user["id"])
        if not canceled:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

        await send_notification(
            telegram_client,
            user_id=current_user["id"],
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ #{invoice_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            message_type="error",
        )

        logger.info(f"[Payments] User {current_user['id']} canceled invoice {invoice_id}")
        return {"ok": True, "invoice_id": invoice_id, "status": "canceled"}

    except Exception as e:
        logger.exception("[Payments] Failed to cancel payment")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö (UZT ‚Üí SUM)
# ----------------------------

@router.get("/rates", response_model=Dict[str, Any])
async def get_exchange_rates():
    """
    üí± –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –æ–±–º–µ–Ω–∞ UZT ‚Üí —Å—É–º.
    (–ø—Ä–∏–º–µ—Ä: 1 UZT = 68 —Å—É–º –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ)
    """
    try:
        rates = {
            "UZT_to_SUM": 68,
            "SUM_to_UZT": 1 / 68,
            "min_deposit": 100,
        }
        return {"ok": True, "rates": rates}
    except Exception as e:
        logger.exception("[Payments] Failed to get exchange rates")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
