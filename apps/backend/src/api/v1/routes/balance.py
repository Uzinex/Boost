"""
Uzinex Boost API v1 ‚Äî Balance Routes
====================================

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ UZT).

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞;
- –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π;
- (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏;
- —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å Telegram WebApp.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
–∏—Å–ø–æ–ª—å–∑—É–µ—Ç domain.services.balance –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
"""

from __future__ import annotations

import logging
from typing import Any, Dict, List

from fastapi import APIRouter, Depends, HTTPException, status, Query

from domain.services.balance import BalanceService
from domain.services.payments import PaymentService
from adapters.telegram import TelegramClient, send_notification
from core.security import get_current_user  # –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (WebApp initData)


logger = logging.getLogger("uzinex.api.balance")

router = APIRouter(tags=["Balance"], prefix="/balance")


# ----------------------------
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# ----------------------------

async def get_balance_service() -> BalanceService:
    return BalanceService()


async def get_payment_service() -> PaymentService:
    return PaymentService()


# ----------------------------
# üîπ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
# ----------------------------

@router.get("/", response_model=Dict[str, Any])
async def get_balance(
    current_user: Dict[str, Any] = Depends(get_current_user),
    balance_service: BalanceService = Depends(get_balance_service),
):
    """
    üí∞ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UZT.
    """
    try:
        balance = await balance_service.get_balance(user_id=current_user["id"])
        logger.info(f"[Balance] User {current_user['id']} checked balance ({balance} UZT)")
        return {"ok": True, "balance": balance}
    except Exception as e:
        logger.exception(f"[Balance] Failed to fetch balance: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
# ----------------------------

@router.get("/history", response_model=List[Dict[str, Any]])
async def get_balance_history(
    current_user: Dict[str, Any] = Depends(get_current_user),
    payment_service: PaymentService = Depends(get_payment_service),
    limit: int = Query(20, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π"),
):
    """
    üìú –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        history = await payment_service.list_user_transactions(user_id=current_user["id"], limit=limit)
        return history
    except Exception as e:
        logger.exception(f"[Balance] Failed to fetch transaction history: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Telegram WebApp
# ----------------------------

@router.post("/sync", response_model=Dict[str, Any])
async def sync_balance_with_webapp(
    telegram_client: TelegramClient = Depends(),
    current_user: Dict[str, Any] = Depends(get_current_user),
    balance_service: BalanceService = Depends(get_balance_service),
):
    """
    üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram WebApp.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º –±–∞–ª–∞–Ω—Å–µ.
    """
    try:
        balance = await balance_service.get_balance(user_id=current_user["id"])

        await send_notification(
            telegram_client,
            user_id=current_user["id"],
            text=f"–í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} UZT</b>",
            message_type="info",
        )

        logger.info(f"[Balance] Synced WebApp for user {current_user['id']}")
        return {"ok": True, "balance": balance}
    except Exception as e:
        logger.exception(f"[Balance] Sync error for {current_user['id']}: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ----------------------------

@router.post("/transfer", response_model=Dict[str, Any])
async def transfer_balance(
    recipient_id: int = Query(..., description="ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
    amount: float = Query(..., description="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ UZT"),
    balance_service: BalanceService = Depends(get_balance_service),
    current_user: Dict[str, Any] = Depends(get_current_user),
):
    """
    üí∏ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º –≤–µ—Ä—Å–∏—è—Ö Boost).
    """
    try:
        if amount <= 0:
            raise HTTPException(status_code=400, detail="Invalid amount")

        await balance_service.transfer(
            sender_id=current_user["id"],
            recipient_id=recipient_id,
            amount_uzt=amount,
        )
        logger.info(f"[Balance] {current_user['id']} transferred {amount} UZT to {recipient_id}")
        return {"ok": True, "amount": amount, "recipient_id": recipient_id}
    except Exception as e:
        logger.exception("[Balance] Transfer failed")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
