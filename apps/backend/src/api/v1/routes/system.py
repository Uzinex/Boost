"""
Uzinex Boost API v1 ‚Äî System Routes
===================================

–°–ª—É–∂–µ–±–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API (/ping)
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—Ä–∫–µ (/version)
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (/health)

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
- Railway / Docker healthcheck
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ uptime –∏ –º–µ—Ç—Ä–∏–∫
- DevOps-–∞–ª–µ—Ä—Ç—ã –∏ CI/CD –ø–∞–π–ø–ª–∞–π–Ω—ã
"""

from __future__ import annotations

import os
import time
import logging
from fastapi import APIRouter, HTTPException, status

# from domain.services.health import HealthService
from adapters.cache.redis_cache import RedisCache  # –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Å–ª–æ–π


# -------------------------------------------------
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# -------------------------------------------------

logger = logging.getLogger("uzinex.api.system")
router = APIRouter(tags=["System"], prefix="/system")

START_TIME = time.time()
VERSION = "2.0.0"
BUILD = "Uzinex Boost v2.0 ‚Äî FastAPI core"
AUTHOR = "Uzinex Engineering Team"
ENV = os.getenv("APP_ENV", "production").lower()


# -------------------------------------------------
# üîπ /ping ‚Äî –ø—Ä–æ—Å—Ç–µ–π—à–∏–π health-check
# -------------------------------------------------

@router.get("/ping", summary="Ping API", response_model=dict)
async def ping() -> dict:
    """
    üèì –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Railway, Docker, CI/CD –∏ Telegram –±–æ—Ç–æ–º.
    """
    return {
        "ok": True,
        "service": "Uzinex Boost API",
        "message": "pong",
        "version": VERSION,
        "environment": ENV,
    }


# -------------------------------------------------
# üîπ /version ‚Äî –≤–µ—Ä—Å–∏—è –∏ –∞–ø—Ç–∞–π–º
# -------------------------------------------------

@router.get("/version", summary="Get current API version", response_model=dict)
async def get_version() -> dict:
    """
    üîñ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ —Å–±–æ—Ä–∫–∏, –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ –∞–ø—Ç–∞–π–º–µ.
    """
    uptime = round(time.time() - START_TIME, 2)
    return {
        "ok": True,
        "version": VERSION,
        "build": BUILD,
        "author": AUTHOR,
        "environment": ENV,
        "uptime_seconds": uptime,
    }


# -------------------------------------------------
# üîπ /health ‚Äî —Å–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
# -------------------------------------------------

@router.get("/health", summary="Check system dependencies", response_model=dict)
async def health_check() -> dict:
    """
    üíö –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
    - PostgreSQL (—á–µ—Ä–µ–∑ HealthService)
    - Redis (—á–µ—Ä–µ–∑ RedisCache)
    - Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è DevOps –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    """
    try:
        health_service = HealthService()
        redis = RedisCache()

        db_status = await health_service.check_database()
        cache_status = await redis.ping()

        uptime = round(time.time() - START_TIME, 2)
        system_ok = all([db_status, cache_status])

        logger.info(f"[System] Health check: DB={db_status}, Cache={cache_status}, Env={ENV}")

        return {
            "ok": system_ok,
            "details": {
                "database": "ok" if db_status else "fail",
                "cache": "ok" if cache_status else "fail",
            },
            "environment": ENV,
            "uptime_seconds": uptime,
        }

    except Exception as e:
        logger.exception("[System] Health check failed")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
