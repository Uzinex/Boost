"""
Uzinex Boost API v1 ‚Äî Telegram Routes
=====================================

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram Bot –∏ WebApp:
- /webhook ‚Äî –ø—Ä–∏—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram Bot API;
- /auth/webapp ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ initData;
- /notify ‚Äî —Å–ª—É–∂–µ–±–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤).

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
–∏—Å–ø–æ–ª—å–∑—É–µ—Ç adapters.telegram (client, webapp_auth, notifier)
"""

from __future__ import annotations

import logging
from typing import Any, Dict

from fastapi import APIRouter, Request, Depends, HTTPException, status, Query

from adapters.telegram.webhook import telegram_webhook
from api.v1.deps import get_bot_service
from bot.app.service import BotService, NotificationDeliveryError, WebAppAuthError
from core.config import settings

logger = logging.getLogger("uzinex.api.telegram")

router = APIRouter(tags=["Telegram"], prefix="/telegram")


# -------------------------------------------------
# üîπ Webhook endpoint (–±–æ—Ç)
# -------------------------------------------------

@router.post("/webhook")
async def telegram_bot_webhook(request: Request):
    """
    ü§ñ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç webhook-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram Bot API.
    """
    return await telegram_webhook(request)


# -------------------------------------------------
# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp
# -------------------------------------------------

@router.post("/auth/webapp", response_model=Dict[str, Any])
async def telegram_webapp_auth(
    init_data: str = Query(..., description="Telegram WebApp initData —Å—Ç—Ä–æ–∫–∞"),
    bot_token: str = Query(..., description="–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞"),
    bot_service: BotService = Depends(get_bot_service),
):
    """
    üîê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å initData –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (UZT-session).
    """
    try:
        auth_result = await bot_service.authenticate_webapp(init_data=init_data, bot_token=bot_token)
        logger.info(
            "[Telegram] WebApp auth OK for telegram_id=%s",
            auth_result.user.telegram_id,
        )
        return auth_result.to_dict()
    except WebAppAuthError as exc:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(exc)) from exc
    except Exception as exc:  # pragma: no cover - defensive branch
        logger.exception("[Telegram] WebApp auth failed")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(exc))


@router.post("/auth/mock", response_model=Dict[str, Any])
async def telegram_webapp_auth_mock(
    telegram_id: int | None = Query(None, description="Telegram ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    username: str | None = Query(None, description="Username —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    first_name: str | None = Query(None, description="–ò–º—è (first_name) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    last_name: str | None = Query(None, description="–§–∞–º–∏–ª–∏—è (last_name) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    language: str | None = Query(None, description="–ö–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    language_code_param: str | None = Query(None, description="Alias –¥–ª—è language", alias="language_code"),
    bot_service: BotService = Depends(get_bot_service),
):
    """üß™ –°–æ–∑–¥–∞—ë—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é WebApp –±–µ–∑ Telegram initData (debug-—Ä–µ–∂–∏–º)."""

    if not settings.TELEGRAM_DEBUG_MODE:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Mock WebApp auth is disabled")

    try:
        auth_result = await bot_service.create_debug_session(
            telegram_id=telegram_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            language_code=language_code_param or language,
        )
        logger.info(
            "[Telegram] Mock WebApp auth issued for telegram_id=%s",
            auth_result.user.telegram_id,
        )
        return auth_result.to_dict()
    except WebAppAuthError as exc:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(exc)) from exc
    except Exception as exc:  # pragma: no cover - defensive branch
        logger.exception("[Telegram] Mock WebApp auth failed")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(exc))


# -------------------------------------------------
# üîπ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
# -------------------------------------------------

@router.post("/notify", response_model=Dict[str, Any])
async def send_test_notification(
    bot_service: BotService = Depends(get_bot_service),
    user_id: int = Query(..., description="Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
    text: str = Query(..., description="–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
):
    """
    üß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Bot API.
    """
    try:
        result = await bot_service.notify_user(user_id=user_id, text=text, message_type="info")
        logger.info("[Telegram] Test notification sent to %s", user_id)
        return {"ok": result.delivered, "message": "Notification sent"}
    except NotificationDeliveryError as exc:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(exc)) from exc
    except Exception as exc:  # pragma: no cover - defensive branch
        logger.exception("[Telegram] Failed to send test notification")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(exc))
