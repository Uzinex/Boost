"""
Uzinex Boost API v1 ‚Äî Telegram Routes
=====================================

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram Bot –∏ WebApp:
- /webhook ‚Äî –ø—Ä–∏—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram Bot API;
- /auth/webapp ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ initData;
- /notify ‚Äî —Å–ª—É–∂–µ–±–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤).

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
–∏—Å–ø–æ–ª—å–∑—É–µ—Ç adapters.telegram (client, webapp_auth, notifier)
"""

from __future__ import annotations

import logging
from typing import Any, Dict

from fastapi import APIRouter, Request, Depends, HTTPException, status, Query

from adapters.telegram import (
    TelegramClient,
    validate_webapp_data,
    send_notification,
)
from adapters.telegram.webhook import telegram_webhook
from core.security import create_user_session  # —Å–æ–∑–¥–∞—ë—Ç JWT/UZT-—Ç–æ–∫–µ–Ω –¥–ª—è WebApp
from domain.services.users import UserService

logger = logging.getLogger("uzinex.api.telegram")

router = APIRouter(tags=["Telegram"], prefix="/telegram")


# -------------------------------------------------
# üîπ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# -------------------------------------------------

async def get_user_service() -> UserService:
    return UserService()


# -------------------------------------------------
# üîπ Webhook endpoint (–±–æ—Ç)
# -------------------------------------------------

@router.post("/webhook")
async def telegram_bot_webhook(request: Request):
    """
    ü§ñ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç webhook-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram Bot API.
    """
    return await telegram_webhook(request)


# -------------------------------------------------
# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp
# -------------------------------------------------

@router.post("/auth/webapp", response_model=Dict[str, Any])
async def telegram_webapp_auth(
    init_data: str = Query(..., description="Telegram WebApp initData —Å—Ç—Ä–æ–∫–∞"),
    bot_token: str = Query(..., description="–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞"),
    user_service: UserService = Depends(get_user_service),
):
    """
    üîê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å initData –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (UZT-session).
    """
    try:
        validation = validate_webapp_data(init_data, bot_token)
        if not validation.valid:
            raise HTTPException(status_code=400, detail="Invalid Telegram data")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        user = await user_service.get_or_create_telegram_user(
            telegram_id=validation.user_id,
            username=validation.username,
        )

        # –°–æ–∑–¥–∞—ë–º JWT/UZT session-—Ç–æ–∫–µ–Ω
        token = create_user_session(user)

        logger.info(f"[Telegram] WebApp auth OK for {validation.username} (ID={validation.user_id})")
        return {
            "ok": True,
            "user": {
                "id": user.id,
                "username": user.username,
                "balance": user.balance_uzt,
            },
            "session_token": token,
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.exception("[Telegram] WebApp auth failed")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# -------------------------------------------------
# üîπ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
# -------------------------------------------------

@router.post("/notify", response_model=Dict[str, Any])
async def send_test_notification(
    telegram_client: TelegramClient = Depends(),
    user_id: int = Query(..., description="Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
    text: str = Query(..., description="–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
):
    """
    üß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Bot API.
    """
    try:
        await send_notification(telegram_client, user_id=user_id, text=text, message_type="info")
        logger.info(f"[Telegram] Test notification sent to {user_id}")
        return {"ok": True, "message": "Notification sent"}
    except Exception as e:
        logger.exception("[Telegram] Failed to send test notification")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
