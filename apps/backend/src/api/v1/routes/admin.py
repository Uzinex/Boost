"""
Uzinex Boost API v1 ‚Äî Admin Routes
==================================

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:
- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä—É—á–Ω—ã—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π;
- –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;
- –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏—Å—Ç–µ–º–µ).

–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —Ä–æ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã).
"""

from __future__ import annotations

import logging
from fastapi import APIRouter, HTTPException, status, Depends, Query
from typing import Any, Dict, List

from domain.services.payment_service import PaymentService
from domain.services.user_service import UserService
from adapters.payments import get_provider
from adapters.telegram import send_notification, TelegramClient
from core.security import get_current_admin  # (–≤ –±—É–¥—É—â–µ–º ‚Äì –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)

logger = logging.getLogger("uzinex.api.admin")

router = APIRouter(tags=["Admin"], prefix="/admin")


# ----------------------------
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# ----------------------------

async def get_payment_service() -> PaymentService:
    return PaymentService()


async def get_user_service() -> UserService:
    return UserService()


# ----------------------------
# üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä—É—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
# ----------------------------

@router.post("/payments/{invoice_id}/approve", response_model=Dict[str, Any])
async def approve_payment(
    invoice_id: str,
    payment_service: PaymentService = Depends(get_payment_service),
    telegram_client: TelegramClient = Depends(),
    current_admin: Dict[str, Any] = Depends(get_current_admin),
):
    """
    ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–∞–¥–º–∏–Ω–æ–º).
    """
    provider = get_provider("manual")
    try:
        await provider.approve_invoice(invoice_id)
        await payment_service.confirm_payment(invoice_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        invoice = await payment_service.get_invoice(invoice_id)
        await send_notification(
            telegram_client,
            user_id=invoice.user_id,
            text=f"–í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {invoice.amount_uzt:.2f} UZT –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ",
            message_type="success",
        )

        logger.info(f"[Admin] Payment {invoice_id} approved by {current_admin['username']}")
        return {"ok": True, "invoice_id": invoice_id, "status": "paid"}

    except Exception as e:
        logger.exception(f"[Admin] Failed to approve invoice {invoice_id}: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


@router.post("/payments/{invoice_id}/reject", response_model=Dict[str, Any])
async def reject_payment(
    invoice_id: str,
    reason: str = Query(..., description="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"),
    payment_service: PaymentService = Depends(get_payment_service),
    telegram_client: TelegramClient = Depends(),
    current_admin: Dict[str, Any] = Depends(get_current_admin),
):
    """
    ‚ùå –û—Ç–∫–ª–æ–Ω—è–µ—Ç —Ä—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–∞–¥–º–∏–Ω–æ–º).
    """
    provider = get_provider("manual")
    try:
        await provider.reject_invoice(invoice_id, reason)
        await payment_service.decline_payment(invoice_id, reason)

        invoice = await payment_service.get_invoice(invoice_id)
        await send_notification(
            telegram_client,
            user_id=invoice.user_id,
            text=f"–í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            message_type="error",
        )

        logger.info(f"[Admin] Payment {invoice_id} rejected by {current_admin['username']}")
        return {"ok": True, "invoice_id": invoice_id, "status": "declined", "reason": reason}

    except Exception as e:
        logger.exception(f"[Admin] Failed to reject invoice {invoice_id}: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# ----------------------------

@router.get("/users", response_model=List[Dict[str, Any]])
async def list_users(
    user_service: UserService = Depends(get_user_service),
    current_admin: Dict[str, Any] = Depends(get_current_admin),
):
    """
    üë§ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏).
    """
    try:
        users = await user_service.list_all()
        logger.info(f"[Admin] {current_admin['username']} fetched user list.")
        return users
    except Exception as e:
        logger.exception("[Admin] Failed to fetch users")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# ----------------------------

@router.get("/stats", response_model=Dict[str, Any])
async def get_system_stats(
    payment_service: PaymentService = Depends(get_payment_service),
    user_service: UserService = Depends(get_user_service),
    current_admin: Dict[str, Any] = Depends(get_current_admin),
):
    """
    üìä –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏—Å—Ç–µ–º–µ.
    """
    try:
        stats = {
            "total_users": await user_service.count_users(),
            "total_payments": await payment_service.count_all(),
            "total_volume_uzt": await payment_service.get_total_volume(),
        }
        logger.info(f"[Admin] {current_admin['username']} fetched system stats.")
        return stats
    except Exception as e:
        logger.exception("[Admin] Failed to fetch system stats")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
