"""
Uzinex Boost API v1 ‚Äî Statistics Routes
=======================================

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Boost.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ø—É–±–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è WebApp;
- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞—Ä–∞–±–æ—Ç–æ–∫, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è);
- —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å);
"""

from __future__ import annotations

import logging
from typing import Any, Dict

from fastapi import APIRouter, Depends, HTTPException, status

from domain.services.stats import StatsService
from domain.services.task_service import TaskService
from domain.services.payment_service import PaymentService
from core.security import get_current_user, get_current_admin  # –¥–æ—Å—Ç—É–ø—ã

logger = logging.getLogger("uzinex.api.stats")

router = APIRouter(tags=["Statistics"], prefix="/stats")


# ----------------------------
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# ----------------------------

async def get_stats_service() -> StatsService:
    return StatsService()


async def get_task_service() -> TaskService:
    return TaskService()


async def get_payment_service() -> PaymentService:
    return PaymentService()


# ----------------------------
# üîπ –ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (WebApp / Landing)
# ----------------------------

@router.get("/public", response_model=Dict[str, Any])
async def get_public_stats(
    stats_service: StatsService = Depends(get_stats_service),
):
    """
    üåç –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è WebApp).
    """
    try:
        stats = await stats_service.get_public_summary()
        return {
            "ok": True,
            "data": stats,
        }
    except Exception as e:
        logger.exception("[Stats] Failed to get public stats")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç)
# ----------------------------

@router.get("/user", response_model=Dict[str, Any])
async def get_user_stats(
    current_user: Dict[str, Any] = Depends(get_current_user),
    task_service: TaskService = Depends(get_task_service),
    payment_service: PaymentService = Depends(get_payment_service),
):
    """
    üë§ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ;
    - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π;
    - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        total_earned = await task_service.get_total_earned(user_id=current_user["id"])
        completed_tasks = await task_service.count_completed(user_id=current_user["id"])
        total_deposits = await payment_service.get_total_paid(user_id=current_user["id"])

        return {
            "ok": True,
            "data": {
                "total_earned_uzt": total_earned,
                "tasks_completed": completed_tasks,
                "total_deposit_uzt": total_deposits,
            },
        }
    except Exception as e:
        logger.exception(f"[Stats] Failed to get user stats for {current_user['id']}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# ----------------------------
# üîπ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
# ----------------------------

@router.get("/system", response_model=Dict[str, Any])
async def get_system_stats(
    stats_service: StatsService = Depends(get_stats_service),
    current_admin: Dict[str, Any] = Depends(get_current_admin),
):
    """
    ‚öôÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤):
    - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;
    - –æ–±—â–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π;
    - –æ–±—â–∏–π –æ–±–æ—Ä–æ—Ç UZT;
    - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    """
    try:
        data = await stats_service.get_system_summary()
        logger.info(f"[Stats] Admin {current_admin['username']} fetched system stats.")
        return {"ok": True, "data": data}
    except Exception as e:
        logger.exception("[Stats] Failed to get system stats")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
