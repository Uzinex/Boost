"""
Uzinex Boost API v1 ‚Äî Tasks Routes
===================================

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
- –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π;
- –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π);
- –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á;
- –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
–∏—Å–ø–æ–ª—å–∑—É–µ—Ç domain.services.tasks, balance –∏ telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

from __future__ import annotations

import logging
from typing import Any, Dict, List

from fastapi import APIRouter, Depends, HTTPException, status, Query

from domain.services.tasks import TaskService
from domain.services.balance import BalanceService
from adapters.telegram import TelegramClient, send_notification
from core.security import get_current_user  # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp

logger = logging.getLogger("uzinex.api.tasks")

router = APIRouter(tags=["Tasks"], prefix="/tasks")


# -------------------------------------------------
# üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# -------------------------------------------------

async def get_task_service() -> TaskService:
    return TaskService()


async def get_balance_service() -> BalanceService:
    return BalanceService()


# -------------------------------------------------
# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
# -------------------------------------------------

@router.get("/", response_model=List[Dict[str, Any]])
async def list_available_tasks(
    task_service: TaskService = Depends(get_task_service),
    current_user: Dict[str, Any] = Depends(get_current_user),
    limit: int = Query(20, ge=1, le=100, description="–ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á"),
):
    """
    üìã –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        tasks = await task_service.list_available_tasks(user_id=current_user["id"], limit=limit)
        logger.info(f"[Tasks] {current_user['id']} fetched {len(tasks)} tasks")
        return tasks
    except Exception as e:
        logger.exception("[Tasks] Failed to list tasks")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# -------------------------------------------------
# üîπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
# -------------------------------------------------

@router.post("/{task_id}/complete", response_model=Dict[str, Any])
async def complete_task(
    task_id: int,
    task_service: TaskService = Depends(get_task_service),
    balance_service: BalanceService = Depends(get_balance_service),
    telegram_client: TelegramClient = Depends(),
    current_user: Dict[str, Any] = Depends(get_current_user),
):
    """
    ‚úÖ –û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        result = await task_service.complete_task(task_id=task_id, user_id=current_user["id"])

        if not result:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ")

        reward = result["reward"]
        await balance_service.increase_balance(current_user["id"], reward)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        await send_notification(
            telegram_client,
            user_id=current_user["id"],
            text=f"üéâ –ó–∞–¥–∞–Ω–∏–µ #{task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n–ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>{reward:.2f} UZT</b>",
            message_type="success",
        )

        logger.info(f"[Tasks] User {current_user['id']} completed task {task_id} (+{reward} UZT)")
        return {"ok": True, "task_id": task_id, "reward": reward}

    except HTTPException:
        raise
    except Exception as e:
        logger.exception("[Tasks] Task completion error")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# -------------------------------------------------
# üîπ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
# -------------------------------------------------

@router.get("/history", response_model=List[Dict[str, Any]])
async def get_completed_tasks(
    task_service: TaskService = Depends(get_task_service),
    current_user: Dict[str, Any] = Depends(get_current_user),
    limit: int = Query(50, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π"),
):
    """
    üßæ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–¥–∞–Ω–∏–π.
    """
    try:
        history = await task_service.list_completed_tasks(user_id=current_user["id"], limit=limit)
        return history
    except Exception as e:
        logger.exception("[Tasks] Failed to fetch completed tasks")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))


# -------------------------------------------------
# üîπ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# -------------------------------------------------

@router.get("/stats", response_model=Dict[str, Any])
async def get_task_stats(
    task_service: TaskService = Depends(get_task_service),
    current_user: Dict[str, Any] = Depends(get_current_user),
):
    """
    üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π;
    - —Å—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥;
    - —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å.
    """
    try:
        stats = await task_service.get_user_stats(user_id=current_user["id"])
        logger.info(f"[Tasks] Stats fetched for user {current_user['id']}")
        return {"ok": True, "data": stats}
    except Exception as e:
        logger.exception("[Tasks] Failed to fetch task stats")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
