"""
Uzinex Boost API v1 ‚Äî Base Schemas
===================================

–ë–∞–∑–æ–≤—ã–µ Pydantic-–º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤–æ –≤—Å–µ—Ö —Å—Ö–µ–º–∞—Ö API.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ (BaseResponse, ErrorResponse);
- —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ (IDMixin, TimestampMixin);
- —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å ORM-–º–æ–¥–µ–ª—è–º–∏ (SQLAlchemy);
- —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∏–ª—è API –¥–ª—è Swagger / OpenAPI.
"""

from __future__ import annotations

from datetime import datetime
from typing import Any, Optional
from pydantic import BaseModel, Field


# -------------------------------------------------
# üîπ –ë–∞–∑–æ–≤—ã–µ –º–∏–∫—Å–∏–Ω—ã
# -------------------------------------------------

class IDMixin(BaseModel):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ ID –≤ –º–æ–¥–µ–ª—å."""
    id: int = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞")

    class Config:
        orm_mode = True
        from_attributes = True


class TimestampMixin(BaseModel):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    created_at: datetime = Field(..., description="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at: Optional[datetime] = Field(None, description="–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    class Config:
        orm_mode = True
        from_attributes = True


# -------------------------------------------------
# üîπ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã API
# -------------------------------------------------

class BaseResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç API."""
    ok: bool = Field(True, description="–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞")
    data: Optional[Any] = Field(None, description="–ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–≤–µ—Ç–∞")

    class Config:
        json_schema_extra = {
            "example": {
                "ok": True,
                "data": {"message": "Operation successful"}
            }
        }


class ErrorResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ API."""
    ok: bool = Field(False, description="–§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ (–≤—Å–µ–≥–¥–∞ False –ø—Ä–∏ –æ—à–∏–±–∫–µ)")
    detail: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏")
    code: Optional[int] = Field(None, description="–ö–æ–¥ –æ—à–∏–±–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

    class Config:
        json_schema_extra = {
            "example": {
                "ok": False,
                "detail": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                "code": 400
            }
        }


# -------------------------------------------------
# üîπ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
# -------------------------------------------------

class PaginatedResponse(BaseModel):
    """–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    ok: bool = Field(True, description="–°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞")
    total: int = Field(..., description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    page: int = Field(..., description="–ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)")
    page_size: int = Field(..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    items: list[Any] = Field(..., description="–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

    class Config:
        json_schema_extra = {
            "example": {
                "ok": True,
                "total": 100,
                "page": 1,
                "page_size": 20,
                "items": [{"id": 1, "name": "Example"}]
            }
        }
