"""
Uzinex Boost API v1 ‚Äî Telegram Schemas
=======================================

–°—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
- –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ WebApp (initData);
- webhook-—Å–æ–±—ã—Ç–∏—è (callback, message);
- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–¥–∞–ø—Ç–µ—Ä–∞—Ö –∏ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö `/telegram/*`.
"""

from __future__ import annotations

from datetime import datetime
from pydantic import BaseModel, Field
from typing import Optional


# -------------------------------------------------
# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp
# -------------------------------------------------

class WebAppAuthRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram WebApp initData."""

    init_data: str = Field(..., description="–°—Ç—Ä–æ–∫–∞ initData, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è Telegram WebApp")
    referrer_id: Optional[int] = Field(None, description="ID —Ä–µ—Ñ–µ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à—ë–Ω")
    platform: Optional[str] = Field("webapp", description="–ò—Å—Ç–æ—á–Ω–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (webapp, bot, api)")

    class Config:
        json_schema_extra = {
            "example": {
                "init_data": "query_id=AAE123xyz&user={...}&hash=abc123",
                "referrer_id": 42,
                "platform": "webapp"
            }
        }


class WebAppAuthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram WebApp."""

    ok: bool = Field(True, description="–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    user_id: int = Field(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ Boost")
    username: Optional[str] = Field(None, description="Telegram username")
    first_name: Optional[str] = Field(None, description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    session_token: str = Field(..., description="–í—Ä–µ–º–µ–Ω–Ω—ã–π JWT-—Ç–æ–∫–µ–Ω –¥–ª—è API")
    is_new: bool = Field(False, description="–§–ª–∞–≥: –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π")

    class Config:
        json_schema_extra = {
            "example": {
                "ok": True,
                "user_id": 1201,
                "username": "feruz",
                "first_name": "Feruz",
                "session_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                "is_new": True
            }
        }


# -------------------------------------------------
# üîπ Webhook-—Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram
# -------------------------------------------------

class TelegramWebhookUpdate(BaseModel):
    """–û–±—ä–µ–∫—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ Telegram (message, callback –∏ —Ç.–ø.)."""

    update_id: int = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–ø–¥–µ–π—Ç–∞ Telegram")
    message: Optional[dict] = Field(None, description="–°–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ç–∏–ø update ‚Äî message)")
    callback_query: Optional[dict] = Field(None, description="Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç inline-–∫–Ω–æ–ø–∫–∏")
    edited_message: Optional[dict] = Field(None, description="–ò–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    inline_query: Optional[dict] = Field(None, description="Inline-–∑–∞–ø—Ä–æ—Å")
    chat_join_request: Optional[dict] = Field(None, description="–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É")

    class Config:
        json_schema_extra = {
            "example": {
                "update_id": 84591321,
                "message": {
                    "message_id": 105,
                    "from": {"id": 1201, "username": "feruz"},
                    "chat": {"id": 1201, "type": "private"},
                    "text": "/start"
                }
            }
        }


# -------------------------------------------------
# üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
# -------------------------------------------------

class NotificationRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""

    user_id: int = Field(..., description="ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π user_id)")
    text: str = Field(..., description="–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (HTML –∏–ª–∏ Markdown)")
    message_type: str = Field(
        "info",
        description="–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: info | success | warning | error"
    )
    silent: bool = Field(False, description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∑–≤—É–∫–∞ (silent notification)")

    class Config:
        json_schema_extra = {
            "example": {
                "user_id": 1201,
                "text": "üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 0.6 UZT –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è!",
                "message_type": "success",
                "silent": False
            }
        }


# -------------------------------------------------
# üîπ –û—Ç–≤–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# -------------------------------------------------

class NotificationResponse(BaseModel):
    """–û—Ç–≤–µ—Ç API –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""

    ok: bool = Field(True, description="–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    user_id: int = Field(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    sent_at: datetime = Field(..., description="–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
    message_id: Optional[int] = Field(None, description="ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)")

    class Config:
        json_schema_extra = {
            "example": {
                "ok": True,
                "user_id": 1201,
                "sent_at": "2025-10-12T18:40:00",
                "message_id": 785
            }
        }
