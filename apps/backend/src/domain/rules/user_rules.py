"""
Uzinex Boost ‚Äî User Rules
=========================

–ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Uzinex Boost.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–û–ø—Ä–µ–¥–µ–ª—è—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å–∞:
- –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, —Ä–µ–π—Ç–∏–Ω–≥, —Ä–æ–ª—å;
- —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π, –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤;
- –ø–æ–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –¥–æ–≤–µ—Ä–∏—è.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.user
- domain.services.order
- domain.services.task
- adapters.security
- api.v1.routes.user
"""

from __future__ import annotations
from typing import Dict, Any
from datetime import datetime, timedelta

from domain.rules.base import BaseRule
from db.models.user_model import User


# -------------------------------------------------
# üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–ª–∏—Ç–∏–∫–∏
# -------------------------------------------------
MIN_RATING_TO_PUBLISH_ORDER = 3.5
MIN_RATING_TO_TAKE_TASK = 2.0
UNVERIFIED_ORDER_LIMIT = 2
MAX_INACTIVE_DAYS = 180  # –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è "—Å–ø—è—â–∏–º"


# -------------------------------------------------
# üîπ –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# -------------------------------------------------
class UserRules(BaseRule):
    """
    –ü—Ä–∞–≤–∏–ª–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.
    """

    rule_name = "UserRules"

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    @classmethod
    async def is_active(cls, user: User):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ —Å–ø—è—â–∏–π).
        """
        if not user.is_active:
            return await cls._deny("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚Äî –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã")
        if user.is_blocked:
            return await cls._deny("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
        if user.last_login and (datetime.utcnow() - user.last_login) > timedelta(days=MAX_INACTIVE_DAYS):
            return await cls._deny("–ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è")
        return await cls._allow("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω", {"user_id": user.id})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    @classmethod
    async def is_verified(cls, user: User):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.
        """
        if not user.is_verified:
            return await cls._deny("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return await cls._allow("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã
    # -------------------------------------------------
    @classmethod
    async def can_publish_order(cls, user: User, existing_orders_count: int):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã.
        """
        if not user.is_verified and existing_orders_count >= UNVERIFIED_ORDER_LIMIT:
            return await cls._deny("–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–∞–∫—Å–∏–º—É–º 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")

        if user.rating is not None and user.rating < MIN_RATING_TO_PUBLISH_ORDER:
            return await cls._deny(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ ‚Äî {MIN_RATING_TO_PUBLISH_ORDER}")

        return await cls._allow("–†–∞–∑—Ä–µ—à–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", {"rating": user.rating})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è
    # -------------------------------------------------
    @classmethod
    async def can_take_task(cls, user: User):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
        """
        if not user.is_verified:
            return await cls._deny("–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è")
        if user.rating and user.rating < MIN_RATING_TO_TAKE_TASK:
            return await cls._deny(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π ‚Äî {MIN_RATING_TO_TAKE_TASK}")
        return await cls._allow("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è", {"rating": user.rating})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
    # -------------------------------------------------
    @classmethod
    async def can_transfer(cls, user: User):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã.
        """
        if not user.is_verified:
            return await cls._deny("–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏")
        if not user.is_active or user.is_blocked:
            return await cls._deny("–ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return await cls._allow("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞")

    # -------------------------------------------------
    # üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # -------------------------------------------------
    @classmethod
    async def _allow(cls, message: str, meta: Dict[str, Any] | None = None):
        return await cls._result(True, message, meta)

    @classmethod
    async def _deny(cls, message: str, meta: Dict[str, Any] | None = None):
        return await cls._result(False, message, meta)

    @classmethod
    async def _result(cls, allowed: bool, message: str, meta: Dict[str, Any] | None = None):
        from domain.rules.base import RuleResult
        return RuleResult(
            is_allowed=allowed,
            message=message,
            rule_name=cls.rule_name,
            metadata=meta or {},
        )
