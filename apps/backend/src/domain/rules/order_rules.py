"""
Uzinex Boost ‚Äî Order Rules
==========================

–ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–µ —Å–æ–∑–¥–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:
- –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã;
- –∫–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã;
- —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –¥–µ–¥–ª–∞–π–Ω—ã;
- –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è;
- –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.order
- domain.services.payment
- domain.services.balance
- adapters.analytics
- api.v1.routes.order
"""

from __future__ import annotations
from datetime import datetime, timedelta
from typing import Dict, Any

from domain.rules.base import BaseRule


# -------------------------------------------------
# üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–ª–∏—Ç–∏–∫–∏
# -------------------------------------------------
MIN_ORDER_PRICE = 10_000.0
MAX_ORDER_PRICE = 50_000_000.0
PLATFORM_FEE_PERCENT = 10.0  # –∫–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ %
MAX_ACTIVE_ORDERS_PER_CLIENT = 10
MAX_ACTIVE_ORDERS_PER_PERFORMER = 5
DEFAULT_ORDER_DURATION = timedelta(days=7)  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è


# -------------------------------------------------
# üîπ –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–∫–∞–∑–æ–≤
# -------------------------------------------------
class OrderRules(BaseRule):
    """
    –ù–∞–±–æ—Ä –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.
    """

    rule_name = "OrderRules"

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    # -------------------------------------------------
    @classmethod
    async def can_create_order(cls, client, price: float, active_orders_count: int):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π.
        """
        if not client.is_verified:
            return await cls._deny("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

        if price < MIN_ORDER_PRICE:
            return await cls._deny(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ‚Äî {MIN_ORDER_PRICE:.0f} UZT")

        if price > MAX_ORDER_PRICE:
            return await cls._deny(f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {MAX_ORDER_PRICE:.0f} UZT")

        if active_orders_count >= MAX_ACTIVE_ORDERS_PER_CLIENT:
            return await cls._deny("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")

        return await cls._allow("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", {"price": price})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
    # -------------------------------------------------
    @classmethod
    async def can_accept_order(cls, performer, active_orders_count: int):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É.
        """
        if not performer.is_verified:
            return await cls._deny("–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
        if active_orders_count >= MAX_ACTIVE_ORDERS_PER_PERFORMER:
            return await cls._deny("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
        if performer.rating < 2.5:
            return await cls._deny("–†–µ–π—Ç–∏–Ω–≥ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∑–∞–∫–∞–∑–∞—Ö")
        return await cls._allow("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", {"rating": performer.rating})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    # -------------------------------------------------
    @classmethod
    async def validate_deadline(cls, deadline: datetime):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        """
        now = datetime.utcnow()
        max_deadline = now + timedelta(days=30)
        if deadline > max_deadline:
            return await cls._deny("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äî 30 –¥–Ω–µ–π")
        if deadline < now:
            return await cls._deny("–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º")
        return await cls._allow("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", {"deadline": deadline.isoformat()})

    # -------------------------------------------------
    # üî∏ –†–∞—Å—á—ë—Ç –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    # -------------------------------------------------
    @classmethod
    async def calculate_fee(cls, price: float) -> Dict[str, Any]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —á–∏—Å—Ç—É—é —Å—É–º–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
        """
        fee = round(price * PLATFORM_FEE_PERCENT / 100, 2)
        net = round(price - fee, 2)
        return {"fee": fee, "net_amount": net, "percent": PLATFORM_FEE_PERCENT}

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    # -------------------------------------------------
    @classmethod
    async def can_complete_order(cls, order_status: str, deadline: datetime):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ (—Å—Ç–∞—Ç—É—Å –∏ —Å—Ä–æ–∫).
        """
        if order_status not in ["in_progress", "review"]:
            return await cls._deny(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ '{order_status}'")
        if datetime.utcnow() > deadline + timedelta(days=3):
            return await cls._deny("–°—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å—Ç—ë–∫ ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è")
        return await cls._allow("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
    # -------------------------------------------------
    @classmethod
    async def can_cancel_order(cls, order_status: str, user_role: str):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.
        """
        if order_status in ["completed", "cancelled"]:
            return await cls._deny("–ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω")
        if user_role not in ["client", "admin"]:
            return await cls._deny("–û—Ç–º–µ–Ω—É –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return await cls._allow("–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞", {"role": user_role})

    # -------------------------------------------------
    # üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # -------------------------------------------------
    @classmethod
    async def _allow(cls, message: str, meta: Dict[str, Any] | None = None):
        return await cls._result(True, message, meta)

    @classmethod
    async def _deny(cls, message: str, meta: Dict[str, Any] | None = None):
        return await cls._result(False, message, meta)

    @classmethod
    async def _result(cls, allowed: bool, message: str, meta: Dict[str, Any] | None = None):
        from domain.rules.base import RuleResult
        return RuleResult(
            is_allowed=allowed,
            message=message,
            rule_name=cls.rule_name,
            metadata=meta or {},
        )
