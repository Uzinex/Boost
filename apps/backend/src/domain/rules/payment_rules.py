"""
Uzinex Boost ‚Äî Payment Rules
============================

–ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ –∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã, –ª–∏–º–∏—Ç—ã –∏ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
- –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π;
- –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã;
- –∫–æ–Ω—Ç—Ä–æ–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏;
- —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.payment
- domain.services.balance
- adapters.payments
- api.v1.routes.payment
"""

from __future__ import annotations
from typing import Dict, Any
from datetime import datetime, timedelta

from domain.rules.base import BaseRule
from db.repositories.user_repository import UserRepository


# -------------------------------------------------
# üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–ª–∏—Ç–∏–∫–∏
# -------------------------------------------------
SUPPORTED_METHODS = ["click", "payme", "uzcard", "crypto"]
VERIFIED_ONLY_METHODS = ["crypto"]
MIN_PAYMENT_AMOUNT = 5_000.0
MAX_PAYMENT_AMOUNT = 10_000_000.0
DAILY_PAYMENT_LIMIT = 20_000_000.0
MAX_PAYMENT_ATTEMPTS_PER_HOUR = 5


# -------------------------------------------------
# üîπ –ü—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç–µ–∂–µ–π
# -------------------------------------------------
class PaymentRules(BaseRule):
    """
    –ù–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–µ–π.
    """

    rule_name = "PaymentRules"

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    # -------------------------------------------------
    @classmethod
    async def validate_method(
        cls,
        user_id: int,
        method: str,
        user_repo: UserRepository,
    ):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã.
        """
        method = method.lower().strip()

        if method not in SUPPORTED_METHODS:
            return await cls._deny(f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã '{method}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π")

        user = await user_repo.get_by_id(user_id)
        if not user:
            return await cls._deny("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if method in VERIFIED_ONLY_METHODS and not user.is_verified:
            return await cls._deny("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")

        return await cls._allow("–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —Ä–∞–∑—Ä–µ—à—ë–Ω", {"method": method})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
    # -------------------------------------------------
    @classmethod
    async def validate_amount(cls, amount: float):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å—É–º–º–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
        """
        if amount < MIN_PAYMENT_AMOUNT:
            return await cls._deny(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ ‚Äî {MIN_PAYMENT_AMOUNT:.0f} UZT")
        if amount > MAX_PAYMENT_AMOUNT:
            return await cls._deny(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º {MAX_PAYMENT_AMOUNT:.0f} UZT")
        return await cls._allow("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", {"amount": amount})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # -------------------------------------------------
    @classmethod
    async def check_activity_limits(cls, user_id: int, recent_payments: list):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏ –ª–∏–º–∏—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ —Å—É—Ç–∫–∏.
        """
        now = datetime.utcnow()
        since = now - timedelta(hours=24)

        recent = [p for p in recent_payments if p.created_at >= since]
        total_sum = sum(p.amount for p in recent)
        if total_sum > DAILY_PAYMENT_LIMIT:
            return await cls._deny("–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–ª–∞—Ç–µ–∂–µ–π")

        if len(recent) > MAX_PAYMENT_ATTEMPTS_PER_HOUR:
            return await cls._deny("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–ø–ª–∞—Ç –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è")

        return await cls._allow("–ü–ª–∞—Ç—ë–∂–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ", {"payments_today": len(recent)})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    @classmethod
    async def validate_user_status(cls, user):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∏–º–µ–µ—Ç –ª–∏ –ø—Ä–∞–≤–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏.
        """
        if not user.is_active:
            return await cls._deny("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚Äî –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        if user.is_blocked:
            return await cls._deny("–ü–ª–∞—Ç—ë–∂ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return await cls._allow("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–æ–ø—É—â–µ–Ω –∫ –æ–ø–ª–∞—Ç–µ")

    # -------------------------------------------------
    # üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # -------------------------------------------------
    @classmethod
    async def _allow(cls, message: str, meta: Dict[str, Any] | None = None):
        return await cls._result(True, message, meta)

    @classmethod
    async def _deny(cls, message: str, meta: Dict[str, Any] | None = None):
        return await cls._result(False, message, meta)

    @classmethod
    async def _result(cls, allowed: bool, message: str, meta: Dict[str, Any] | None = None):
        from domain.rules.base import RuleResult
        return RuleResult(
            is_allowed=allowed,
            message=message,
            rule_name=cls.rule_name,
            metadata=meta or {},
        )
