"""
Uzinex Boost ‚Äî Balance Rules
============================

–ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (UZT).

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–û–ø—Ä–µ–¥–µ–ª—è—é—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:
- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –≤—ã–≤–æ–¥–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è;
- –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏;
- –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏ —Å—Ç–∞—Ç—É—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
- –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π –∏ —Ñ—Ä–æ–¥–∞.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.balance
- domain.services.transaction
- adapters.payments
- api.v1.routes.balance
"""

from __future__ import annotations
from datetime import datetime, timedelta
from typing import Dict, Any

from domain.rules.base import BaseRule
from db.repositories.transaction_repository import TransactionRepository


# -------------------------------------------------
# üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–ª–∏—Ç–∏–∫–∏
# -------------------------------------------------
MIN_WITHDRAW_AMOUNT = 10_000.0      # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ (UZT)
MAX_WITHDRAW_AMOUNT = 5_000_000.0   # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é
MAX_DAILY_WITHDRAW_COUNT = 3        # –º–∞–∫—Å–∏–º—É–º –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–≤–æ–¥–∞ –≤ —Å—É—Ç–∫–∏
MAX_DAILY_WITHDRAW_SUM = 10_000_000.0  # –ª–∏–º–∏—Ç –æ–±—â–µ–π —Å—É–º–º—ã –≤—ã–≤–æ–¥–æ–≤ –≤ –¥–µ–Ω—å
MIN_DEPOSIT_AMOUNT = 5_000.0        # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
COOLDOWN_BETWEEN_TX = timedelta(seconds=30)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏


# -------------------------------------------------
# üîπ –ü—Ä–∞–≤–∏–ª–∞ –±–∞–ª–∞–Ω—Å–∞
# -------------------------------------------------
class BalanceRules(BaseRule):
    """
    –ù–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º.
    """

    rule_name = "BalanceRules"

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
    # -------------------------------------------------
    @classmethod
    async def can_withdraw(
        cls,
        user_id: int,
        amount: float,
        transaction_repo: TransactionRepository,
    ):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–≤–µ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É.
        """
        # 1Ô∏è‚É£ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
        if amount < MIN_WITHDRAW_AMOUNT:
            return await cls._deny(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ ‚Äî {MIN_WITHDRAW_AMOUNT:.0f} UZT")
        if amount > MAX_WITHDRAW_AMOUNT:
            return await cls._deny(f"–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {MAX_WITHDRAW_AMOUNT:.0f} UZT –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é")

        # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π
        now = datetime.utcnow()
        since = now - timedelta(hours=24)
        recent_tx = await transaction_repo.get_by_user(user_id)
        recent_withdraws = [tx for tx in recent_tx if tx.type == "withdraw" and tx.created_at >= since]

        if len(recent_withdraws) >= MAX_DAILY_WITHDRAW_COUNT:
            return await cls._deny("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–≤–æ–¥–∞ –∑–∞ —Å—É—Ç–∫–∏")

        total_withdraw_sum = sum(abs(tx.amount) for tx in recent_withdraws)
        if total_withdraw_sum + amount > MAX_DAILY_WITHDRAW_SUM:
            return await cls._deny("–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å—É–º–º—ã –≤—ã–≤–æ–¥–æ–≤")

        # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (anti-spam)
        if recent_tx:
            last_tx = max(recent_tx, key=lambda t: t.created_at)
            if (now - last_tx.created_at) < COOLDOWN_BETWEEN_TX:
                return await cls._deny("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")

        # ‚úÖ –í—Å—ë —Ö–æ—Ä–æ—à–æ
        return await cls._allow("–í—ã–≤–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω", {"amount": amount})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    # -------------------------------------------------
    @classmethod
    async def can_deposit(cls, amount: float):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
        """
        if amount < MIN_DEPOSIT_AMOUNT:
            return await cls._deny(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî {MIN_DEPOSIT_AMOUNT:.0f} UZT")
        if amount > MAX_WITHDRAW_AMOUNT:
            return await cls._deny(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî {MAX_WITHDRAW_AMOUNT:.0f} UZT")
        return await cls._allow("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", {"amount": amount})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    # -------------------------------------------------
    @classmethod
    async def can_transfer(cls, sender_id: int, receiver_id: int, amount: float):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
        """
        if sender_id == receiver_id:
            return await cls._deny("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ")
        if amount <= 0:
            return await cls._deny("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
        if amount < 1000:
            return await cls._deny("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî 1000 UZT")
        return await cls._allow("–ü–µ—Ä–µ–≤–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω", {"sender_id": sender_id, "receiver_id": receiver_id})

    # -------------------------------------------------
    # üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # -------------------------------------------------
    @classmethod
    async def _allow(cls, message: str, meta: Dict[str, Any] | None = None):
        return await super().evaluate_result(True, message, meta)

    @classmethod
    async def _deny(cls, message: str, meta: Dict[str, Any] | None = None):
        return await super().evaluate_result(False, message, meta)

    @classmethod
    async def evaluate_result(cls, allowed: bool, message: str, meta: Dict[str, Any] | None = None):
        from domain.rules.base import RuleResult
        return RuleResult(is_allowed=allowed, message=message, rule_name=cls.rule_name, metadata=meta or {})
