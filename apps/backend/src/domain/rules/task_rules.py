"""
Uzinex Boost ‚Äî Task Rules
=========================

–ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è (tasks) –∏ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫—Ç–æ –∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –º–æ–∂–µ—Ç:
- —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è;
- –±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤ —Ä–∞–±–æ—Ç—É;
- –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ;
- –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –æ–¥–æ–±—Ä—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.task
- domain.services.balance
- domain.services.referral
- adapters.analytics
- api.v1.routes.task
"""

from __future__ import annotations
from datetime import datetime, timedelta
from typing import Dict, Any

from domain.rules.base import BaseRule


# -------------------------------------------------
# üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–ª–∏—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π
# -------------------------------------------------
MIN_TASK_REWARD = 2_000.0
MAX_TASK_REWARD = 1_000_000.0
MAX_ACTIVE_TASKS_PER_USER = 5
DEFAULT_TASK_DURATION = timedelta(days=3)
MAX_TASK_DURATION = timedelta(days=14)
REVIEW_PERIOD = timedelta(days=2)  # —Å—Ä–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º


# -------------------------------------------------
# üîπ –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–¥–∞–Ω–∏–π
# -------------------------------------------------
class TaskRules(BaseRule):
    """
    –ù–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞–Ω–∏—è–º–∏.
    """

    rule_name = "TaskRules"

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    # -------------------------------------------------
    @classmethod
    async def can_create_task(cls, creator, reward: float, active_tasks_count: int):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ.
        """
        if not creator.is_verified:
            return await cls._deny("–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

        if reward < MIN_TASK_REWARD:
            return await cls._deny(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ ‚Äî {MIN_TASK_REWARD:.0f} UZT")

        if reward > MAX_TASK_REWARD:
            return await cls._deny(f"–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {MAX_TASK_REWARD:.0f} UZT")

        if active_tasks_count >= MAX_ACTIVE_TASKS_PER_USER:
            return await cls._deny("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")

        return await cls._allow("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", {"reward": reward})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ
    # -------------------------------------------------
    @classmethod
    async def can_accept_task(cls, user, active_tasks_count: int):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç—É.
        """
        if not user.is_verified:
            return await cls._deny("–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è")
        if active_tasks_count >= MAX_ACTIVE_TASKS_PER_USER:
            return await cls._deny("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ —Ä–∞–±–æ—Ç–µ")
        if getattr(user, "rating", 0) < 2.0:
            return await cls._deny("–†–µ–π—Ç–∏–Ω–≥ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π")
        return await cls._allow("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", {"rating": user.rating})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    # -------------------------------------------------
    @classmethod
    async def validate_deadline(cls, deadline: datetime):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ª–∏ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
        """
        now = datetime.utcnow()
        if deadline < now:
            return await cls._deny("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º")
        if deadline - now > MAX_TASK_DURATION:
            return await cls._deny("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è ‚Äî 14 –¥–Ω–µ–π")
        return await cls._allow("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", {"deadline": deadline.isoformat()})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
    # -------------------------------------------------
    @classmethod
    async def can_complete_task(cls, task_status: str, deadline: datetime):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.
        """
        if task_status not in ["in_progress", "review"]:
            return await cls._deny(f"–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ '{task_status}'")

        if datetime.utcnow() > deadline + REVIEW_PERIOD:
            return await cls._deny("–°—Ä–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è –∏—Å—Ç—ë–∫ ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è")

        return await cls._allow("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
    # -------------------------------------------------
    @classmethod
    async def validate_reward(cls, reward: float):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è.
        """
        if reward < MIN_TASK_REWARD:
            return await cls._deny(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ ‚Äî {MIN_TASK_REWARD:.0f} UZT")
        if reward > MAX_TASK_REWARD:
            return await cls._deny(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ ‚Äî {MAX_TASK_REWARD:.0f} UZT")
        return await cls._allow("–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", {"reward": reward})

    # -------------------------------------------------
    # üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
    # -------------------------------------------------
    @classmethod
    async def can_approve_task(cls, reviewer_role: str, task_status: str):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.
        """
        if reviewer_role not in ["admin", "moderator"]:
            return await cls._deny("–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
        if task_status != "review":
            return await cls._deny("–ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        return await cls._allow("–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", {"role": reviewer_role})

    # -------------------------------------------------
    # üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # -------------------------------------------------
    @classmethod
    async def _allow(cls, message: str, meta: Dict[str, Any] | None = None):
        return await cls._result(True, message, meta)

    @classmethod
    async def _deny(cls, message: str, meta: Dict[str, Any] | None = None):
        return await cls._result(False, message, meta)

    @classmethod
    async def _result(cls, allowed: bool, message: str, meta: Dict[str, Any] | None = None):
        from domain.rules.base import RuleResult
        return RuleResult(
            is_allowed=allowed,
            message=message,
            rule_name=cls.rule_name,
            metadata=meta or {},
        )
