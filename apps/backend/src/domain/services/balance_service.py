"""
Uzinex Boost ‚Äî Balance Service
==============================

–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (UZT).

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–†–µ–∞–ª–∏–∑—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
- –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏ —Å–ø–∏—Å–∞–Ω–∏—è;
- –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏;
- –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π;
- –∫–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
------------
‚Ä¢ domain.rules.balance_rules      ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è;
‚Ä¢ domain.events.balance_events    ‚Äî —Å–æ–±—ã—Ç–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π;
‚Ä¢ db.repositories.transaction_repository ‚Äî —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π;
‚Ä¢ db.repositories.user_repository       ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

from __future__ import annotations
from typing import Optional
from sqlalchemy.ext.asyncio import AsyncSession

from domain.services.base import BaseService
from domain.rules.balance_rules import BalanceRules
from domain.events.balance_events import (
    BalanceUpdatedEvent,
    BalanceWithdrawnEvent,
    BalanceDepositedEvent,
    BalanceTransferredEvent,
)
from db.repositories.transaction_repository import TransactionRepository
from db.repositories.user_repository import UserRepository


class BalanceService(BaseService):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (UZT).
    """

    def __init__(self, session: AsyncSession):
        super().__init__(session)
        self.tx_repo = TransactionRepository(session)
        self.user_repo = UserRepository(session)

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    async def get_balance(self, user_id: int) -> Optional[float]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        user = await self.user_repo.get_by_id(user_id)
        if not user:
            return None
        return float(user.balance)

    # -------------------------------------------------
    # üîπ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    # -------------------------------------------------
    async def deposit(self, user_id: int, amount: float, payment_id: Optional[int] = None):
        """
        –ü–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª
        result = await BalanceRules.can_deposit(amount)
        if not result.is_allowed:
            return {"success": False, "message": result.message}

        user = await self.user_repo.get_by_id(user_id)
        if not user:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        user.balance += amount

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        tx = await self.tx_repo.create_transaction(
            user_id=user_id,
            amount=amount,
            tx_type="deposit",
            description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            payment_id=payment_id,
        )
        await self.publish_event(
            BalanceDepositedEvent(user_id=user_id, amount=amount, transaction_id=tx.id)
        )

        await self.commit()
        await self.log(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω: {user_id} (+{amount} UZT)")
        return {"success": True, "balance": user.balance, "transaction_id": tx.id}

    # -------------------------------------------------
    # üîπ –°–Ω—è—Ç–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ (–≤—ã–≤–æ–¥)
    # -------------------------------------------------
    async def withdraw(self, user_id: int, amount: float):
        """
        –°–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–≤–æ–¥).
        """
        user = await self.user_repo.get_by_id(user_id)
        if not user:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        rule_result = await BalanceRules.can_withdraw(user_id, amount, self.tx_repo)
        if not rule_result.is_allowed:
            return {"success": False, "message": rule_result.message}

        if user.balance < amount:
            return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"}

        user.balance -= amount

        tx = await self.tx_repo.create_transaction(
            user_id=user_id,
            amount=-amount,
            tx_type="withdraw",
            description="–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
        )

        await self.publish_event(
            BalanceWithdrawnEvent(user_id=user_id, amount=amount, transaction_id=tx.id)
        )
        await self.commit()
        await self.log(f"–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤: {user_id} (-{amount} UZT)")
        return {"success": True, "balance": user.balance, "transaction_id": tx.id}

    # -------------------------------------------------
    # üîπ –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    # -------------------------------------------------
    async def transfer(self, sender_id: int, receiver_id: int, amount: float):
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª
        rule_result = await BalanceRules.can_transfer(sender_id, receiver_id, amount)
        if not rule_result.is_allowed:
            return {"success": False, "message": rule_result.message}

        sender = await self.user_repo.get_by_id(sender_id)
        receiver = await self.user_repo.get_by_id(receiver_id)
        if not sender or not receiver:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        if sender.balance < amount:
            return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"}

        sender.balance -= amount
        receiver.balance += amount

        # –î–≤–µ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        tx_sender = await self.tx_repo.create_transaction(
            user_id=sender_id,
            amount=-amount,
            tx_type="transfer_out",
            description=f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_id}",
        )
        tx_receiver = await self.tx_repo.create_transaction(
            user_id=receiver_id,
            amount=amount,
            tx_type="transfer_in",
            description=f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id}",
        )

        await self.publish_event(
            BalanceTransferredEvent(
                sender_id=sender_id,
                receiver_id=receiver_id,
                amount=amount,
                sender_tx_id=tx_sender.id,
                receiver_tx_id=tx_receiver.id,
            )
        )

        await self.commit()
        await self.log(f"–ü–µ—Ä–µ–≤–æ–¥: {sender_id} ‚Üí {receiver_id} ({amount} UZT)")
        return {"success": True, "amount": amount, "sender_balance": sender.balance}

    # -------------------------------------------------
    # üîπ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    # -------------------------------------------------
    async def get_transaction_history(self, user_id: int, limit: int = 50):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        transactions = await self.tx_repo.get_by_user(user_id=user_id, limit=limit)
        return [tx.as_dict() for tx in transactions]

    # -------------------------------------------------
    # üîπ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    # -------------------------------------------------
    async def get_balance_summary(self, user_id: int):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        summary = await self.tx_repo.get_summary_by_user(user_id)
        current_balance = await self.get_balance(user_id)
        summary["current_balance"] = current_balance
        await self.log(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç—á—ë—Ç –ø–æ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return summary

    # -------------------------------------------------
    # üîπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–∞–¥–º–∏–Ω)
    # -------------------------------------------------
    async def adjust_balance(self, user_id: int, amount: float, reason: str):
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º).
        """
        user = await self.user_repo.get_by_id(user_id)
        if not user:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        user.balance += amount
        tx = await self.tx_repo.create_transaction(
            user_id=user_id,
            amount=amount,
            tx_type="adjustment",
            description=reason,
        )

        await self.publish_event(
            BalanceUpdatedEvent(user_id=user_id, amount=amount, reason=reason, transaction_id=tx.id)
        )
        await self.commit()
        await self.log(f"–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {amount} UZT ({reason})")
        return {"success": True, "balance": user.balance}
