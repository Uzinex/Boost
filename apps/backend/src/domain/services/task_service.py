"""
Uzinex Boost ‚Äî Task Service
===========================

–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏ (Tasks) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–†–µ–∞–ª–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:
- —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è;
- –ø—Ä–∏–Ω—è—Ç–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º;
- –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º;
- –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è;
- –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- api.v1.routes.task
- domain.rules.task_rules
- domain.events.task_events
- db.repositories.task_repository
- domain.services.balance_service
"""

from __future__ import annotations
from typing import Optional
from datetime import datetime, timedelta

from sqlalchemy.ext.asyncio import AsyncSession

from domain.services.base import BaseService
from domain.rules.task_rules import TaskRules
from domain.events.task_events import (
    TaskCreatedEvent,
    TaskAcceptedEvent,
    TaskCompletedEvent,
    TaskApprovedEvent,
    TaskRejectedEvent,
)
from domain.services.balance_service import BalanceService
from db.repositories.task_repository import TaskRepository
from db.repositories.user_repository import UserRepository


class TaskService(BaseService):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Å–æ–∑–¥–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ–ø–ª–∞—Ç–∞.
    """

    def __init__(self, session: AsyncSession):
        super().__init__(session)
        self.task_repo = TaskRepository(session)
        self.user_repo = UserRepository(session)
        self.balance_service = BalanceService(session)

    # -------------------------------------------------
    # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    # -------------------------------------------------
    async def create_task(
        self,
        creator_id: int,
        title: str,
        description: str,
        reward: float,
        deadline: Optional[datetime] = None,
    ):
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        """
        creator = await self.user_repo.get_by_id(creator_id)
        if not creator:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        active_tasks = await self.task_repo.count_active_by_user(creator_id)
        rule = await TaskRules.can_create_task(creator, reward, active_tasks)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (—Å–æ–∑–¥–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ)
        balance = await self.balance_service.get_balance(creator_id)
        if balance is None or balance < reward:
            return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"}

        await self.balance_service.withdraw(creator_id, reward)

        task = await self.task_repo.create_task(
            creator_id=creator_id,
            title=title,
            description=description,
            reward=reward,
            deadline=deadline or datetime.utcnow() + timedelta(days=3),
        )

        await self.publish_event(TaskCreatedEvent(task_id=task.id, creator_id=creator_id, reward=reward))
        await self.commit()
        await self.log(f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ {task.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {creator_id}")
        return {"success": True, "task_id": task.id}

    # -------------------------------------------------
    # üîπ –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç—É
    # -------------------------------------------------
    async def accept_task(self, performer_id: int, task_id: int):
        """
        –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
        """
        performer = await self.user_repo.get_by_id(performer_id)
        task = await self.task_repo.get_by_id(task_id)

        if not performer or not task:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
        if task.status != "open":
            return {"success": False, "message": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è"}

        active_tasks = await self.task_repo.count_active_by_user(performer_id)
        rule = await TaskRules.can_accept_task(performer, active_tasks)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        task.performer_id = performer_id
        task.status = "in_progress"
        task.accepted_at = datetime.utcnow()

        await self.publish_event(TaskAcceptedEvent(task_id=task.id, performer_id=performer_id))
        await self.commit()
        await self.log(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {performer_id} –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞–Ω–∏–µ {task_id}")
        return {"success": True, "status": "in_progress"}

    # -------------------------------------------------
    # üîπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
    # -------------------------------------------------
    async def complete_task(self, performer_id: int, task_id: int):
        """
        –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É).
        """
        task = await self.task_repo.get_by_id(task_id)
        if not task or task.performer_id != performer_id:
            return {"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ"}

        rule = await TaskRules.can_complete_task(task.status, task.deadline)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        task.status = "review"
        task.completed_at = datetime.utcnow()

        await self.publish_event(TaskCompletedEvent(task_id=task.id, performer_id=performer_id))
        await self.commit()
        await self.log(f"–ó–∞–¥–∞–Ω–∏–µ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º {performer_id}")
        return {"success": True, "status": "review"}

    # -------------------------------------------------
    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    # -------------------------------------------------
    async def approve_task(self, task_id: int, reviewer_role: str):
        """
        –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.
        """
        task = await self.task_repo.get_by_id(task_id)
        if not task:
            return {"success": False, "message": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}

        rule = await TaskRules.can_approve_task(reviewer_role, task.status)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        task.status = "approved"
        task.reviewed_at = datetime.utcnow()

        # –í—ã–ø–ª–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        await self.balance_service.deposit(task.performer_id, task.reward)

        await self.publish_event(TaskApprovedEvent(task_id=task.id, performer_id=task.performer_id, reward=task.reward))
        await self.commit()
        await self.log(f"–ó–∞–¥–∞–Ω–∏–µ {task.id} –æ–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
        return {"success": True, "status": "approved"}

    # -------------------------------------------------
    # üîπ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    # -------------------------------------------------
    async def reject_task(self, task_id: int, reviewer_role: str, reason: str):
        """
        –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.
        """
        task = await self.task_repo.get_by_id(task_id)
        if not task:
            return {"success": False, "message": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}

        rule = await TaskRules.can_approve_task(reviewer_role, task.status)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        task.status = "rejected"
        task.reviewed_at = datetime.utcnow()
        task.reject_reason = reason

        # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–∫–∞–∑—á–∏–∫—É
        await self.balance_service.deposit(task.creator_id, task.reward)

        await self.publish_event(TaskRejectedEvent(task_id=task.id, reason=reason))
        await self.commit()
        await self.log(f"–ó–∞–¥–∞–Ω–∏–µ {task.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {reason}")
        return {"success": True, "status": "rejected"}

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    async def get_user_tasks(self, user_id: int, role: str, limit: int = 50):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö).
        """
        if role == "creator":
            tasks = await self.task_repo.get_by_creator(user_id, limit)
        else:
            tasks = await self.task_repo.get_by_performer(user_id, limit)
        return [t.as_dict() for t in tasks]

    # -------------------------------------------------
    # üîπ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
    # -------------------------------------------------
    async def get_global_stats(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞–Ω–∏—è–º.
        """
        stats = await self.task_repo.get_stats()
        await self.log("–ü–æ–ª—É—á–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π")
        return stats
