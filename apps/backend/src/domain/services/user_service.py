"""
Uzinex Boost ‚Äî User Service
===========================

–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã Uzinex Boost.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –±–∏–∑–Ω–µ—Å-–æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è;
- –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è;
- –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è;
- –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ;
- –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- api.v1.routes.user
- domain.rules.user_rules
- domain.events.user_events
- db.repositories.user_repository
"""

from __future__ import annotations
from typing import Optional

from sqlalchemy.ext.asyncio import AsyncSession

from domain.services.base import BaseService
from domain.rules.user_rules import UserRules
from domain.events.user_events import (
    UserRegisteredEvent,
    UserVerifiedEvent,
    UserProfileUpdatedEvent,
    UserDeactivatedEvent,
    UserDeletedEvent,
)
from db.repositories.user_repository import UserRepository


class UserService(BaseService):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """

    def __init__(self, session: AsyncSession):
        super().__init__(session)
        self.user_repo = UserRepository(session)

    # -------------------------------------------------
    # üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    async def register_user(
        self,
        email: str,
        username: str,
        password_hash: str,
        referral_id: Optional[int] = None,
    ):
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email / username
        existing = await self.user_repo.get_by_email(email)
        if existing:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}

        user = await self.user_repo.create_user(
            email=email,
            username=username,
            password_hash=password_hash,
            referral_id=referral_id,
        )

        await self.publish_event(
            UserRegisteredEvent(
                user_id=user.id,
                email=user.email,
                username=user.username,
                referral_id=referral_id,
            )
        )
        await self.commit()
        await self.log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {username}")
        return {"success": True, "user_id": user.id}

    # -------------------------------------------------
    # üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    # -------------------------------------------------
    async def verify_user(self, user_id: int):
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (email / KYC).
        """
        user = await self.user_repo.get_by_id(user_id)
        if not user:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        user.is_verified = True
        await self.commit()

        await self.publish_event(UserVerifiedEvent(user_id=user.id, email=user.email))
        await self.log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {user.email}")
        return {"success": True, "message": "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"}

    # -------------------------------------------------
    # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    # -------------------------------------------------
    async def update_profile(
        self,
        user_id: int,
        username: Optional[str] = None,
        full_name: Optional[str] = None,
        bio: Optional[str] = None,
    ):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤–∏–ª.
        """
        user = await self.user_repo.get_by_id(user_id)
        if not user:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        can_operate = await UserRules.can_operate(user_id, self.user_repo)
        if not can_operate.is_allowed:
            return {"success": False, "message": can_operate.message}

        updated_user = await self.user_repo.update_profile(
            user_id=user_id, username=username, full_name=full_name, bio=bio
        )

        await self.publish_event(
            UserProfileUpdatedEvent(
                user_id=user_id,
                username=updated_user.username,
                full_name=updated_user.full_name,
                bio=updated_user.bio,
            )
        )
        await self.commit()
        await self.log(f"–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω: {user_id}")
        return {"success": True, "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"}

    # -------------------------------------------------
    # üîπ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    async def deactivate_user(self, user_id: int, reason: Optional[str] = None):
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç (–±–ª–æ–∫–∏—Ä—É–µ—Ç) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        user = await self.user_repo.get_by_id(user_id)
        if not user:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        user.is_active = False
        await self.commit()

        await self.publish_event(
            UserDeactivatedEvent(user_id=user_id, reason=reason or "Manual block")
        )
        await self.log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {user_id}")
        return {"success": True, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}

    # -------------------------------------------------
    # üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    async def delete_user(self, user_id: int, deleted_by_admin: bool = False):
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
        """
        user = await self.user_repo.get_by_id(user_id)
        if not user:
            return {"success": False, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        await self.user_repo.delete(user_id)
        await self.publish_event(
            UserDeletedEvent(user_id=user_id, deleted_by_admin=deleted_by_admin)
        )
        await self.commit()
        await self.log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω: {user_id}")
        return {"success": True, "message": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"}

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # -------------------------------------------------
    async def get_user_stats(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        """
        total_users = await self.user_repo.count_all()
        verified_users = await self.user_repo.count_verified()
        active_users = await self.user_repo.count_active()

        stats = {
            "total": total_users,
            "verified": verified_users,
            "active": active_users,
        }

        await self.log(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats}")
        return stats
