"""
Uzinex Boost ‚Äî Order Service
============================

–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ (orders) –≤ —Å–∏—Å—Ç–µ–º–µ Uzinex Boost.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –±–∏–∑–Ω–µ—Å-–æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏:
- —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è;
- –ø—Ä–∏–Ω—è—Ç–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º;
- –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω–∞;
- —Ä–∞—Å—á—ë—Ç –∫–æ–º–∏—Å—Å–∏–π –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- api.v1.routes.order
- domain.rules.order_rules
- domain.events.order_events
- db.repositories.order_repository
- domain.services.payment_service
"""

from __future__ import annotations
from typing import Optional
from datetime import datetime, timedelta

from sqlalchemy.ext.asyncio import AsyncSession

from domain.services.base import BaseService
from domain.rules.order_rules import OrderRules
from domain.events.order_events import (
    OrderCreatedEvent,
    OrderAcceptedEvent,
    OrderCompletedEvent,
    OrderCancelledEvent,
)
from domain.services.balance_service import BalanceService
from db.repositories.order_repository import OrderRepository
from db.repositories.user_repository import UserRepository


class OrderService(BaseService):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑–∞–º–∏: —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–∏–Ω—è—Ç–∏–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ—Ç–º–µ–Ω–∞.
    """

    def __init__(self, session: AsyncSession):
        super().__init__(session)
        self.order_repo = OrderRepository(session)
        self.user_repo = UserRepository(session)
        self.balance_service = BalanceService(session)

    # -------------------------------------------------
    # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    # -------------------------------------------------
    async def create_order(
        self,
        client_id: int,
        title: str,
        description: str,
        price: float,
        deadline: Optional[datetime] = None,
    ):
        """
        –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, –±–∞–ª–∞–Ω—Å –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ.
        """
        client = await self.user_repo.get_by_id(client_id)
        if not client:
            return {"success": False, "message": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        active_orders = await self.order_repo.count_active_by_client(client_id)
        rule = await OrderRules.can_create_order(client, price, active_orders)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = await self.balance_service.get_balance(client_id)
        if balance is None or balance < price:
            return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"}

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–¥ —ç—Å–∫—Ä–æ—É
        await self.balance_service.withdraw(client_id, price)

        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        order = await self.order_repo.create_order(
            client_id=client_id,
            title=title,
            description=description,
            price=price,
            deadline=deadline or datetime.utcnow() + timedelta(days=7),
        )

        await self.publish_event(
            OrderCreatedEvent(order_id=order.id, client_id=client_id, price=price)
        )
        await self.commit()
        await self.log(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ {order.id} –∫–ª–∏–µ–Ω—Ç–æ–º {client_id}")
        return {"success": True, "order_id": order.id}

    # -------------------------------------------------
    # üîπ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
    # -------------------------------------------------
    async def accept_order(self, performer_id: int, order_id: int):
        """
        –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É.
        """
        performer = await self.user_repo.get_by_id(performer_id)
        order = await self.order_repo.get_by_id(order_id)
        if not performer or not order:
            return {"success": False, "message": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        if order.status != "open":
            return {"success": False, "message": "–ó–∞–∫–∞–∑ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω"}

        active_orders = await self.order_repo.count_active_by_performer(performer_id)
        rule = await OrderRules.can_accept_order(performer, active_orders)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        order.performer_id = performer_id
        order.status = "in_progress"
        order.accepted_at = datetime.utcnow()

        await self.publish_event(
            OrderAcceptedEvent(order_id=order.id, performer_id=performer_id)
        )
        await self.commit()
        await self.log(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {performer_id} –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ {order_id}")
        return {"success": True, "status": "in_progress"}

    # -------------------------------------------------
    # üîπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    # -------------------------------------------------
    async def complete_order(self, order_id: int):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
        """
        order = await self.order_repo.get_by_id(order_id)
        if not order:
            return {"success": False, "message": "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        rule = await OrderRules.can_complete_order(order.status, order.deadline)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        order.status = "completed"
        order.completed_at = datetime.utcnow()

        # –†–∞—Å—á—ë—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∏ –≤—ã–ø–ª–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        fee_data = await OrderRules.calculate_fee(order.price)
        net = fee_data["net_amount"]
        performer_id = order.performer_id

        if performer_id:
            await self.balance_service.deposit(performer_id, net)

        await self.publish_event(
            OrderCompletedEvent(
                order_id=order.id,
                performer_id=performer_id,
                price=order.price,
                net_amount=net,
                platform_fee=fee_data["fee"],
            )
        )
        await self.commit()
        await self.log(f"–ó–∞–∫–∞–∑ {order_id} –∑–∞–≤–µ—Ä—à—ë–Ω, –≤—ã–ø–ª–∞—á–µ–Ω–æ {net} UZT")
        return {"success": True, "status": "completed"}

    # -------------------------------------------------
    # üîπ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
    # -------------------------------------------------
    async def cancel_order(self, order_id: int, user_id: int, user_role: str):
        """
        –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ (–ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
        """
        order = await self.order_repo.get_by_id(order_id)
        if not order:
            return {"success": False, "message": "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        rule = await OrderRules.can_cancel_order(order.status, user_role)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        order.status = "cancelled"
        order.cancelled_at = datetime.utcnow()

        # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞—á–∞–ª—Å—è
        if order.status == "open":
            await self.balance_service.deposit(order.client_id, order.price)

        await self.publish_event(
            OrderCancelledEvent(order_id=order.id, user_id=user_id, role=user_role)
        )
        await self.commit()
        await self.log(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        return {"success": True, "status": "cancelled"}

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    # -------------------------------------------------
    async def get_user_orders(self, user_id: int, role: str, limit: int = 50):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
        """
        if role == "client":
            orders = await self.order_repo.get_by_client(user_id, limit)
        else:
            orders = await self.order_repo.get_by_performer(user_id, limit)
        return [o.as_dict() for o in orders]

    # -------------------------------------------------
    # üîπ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º
    # -------------------------------------------------
    async def get_global_stats(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º.
        """
        stats = await self.order_repo.get_stats()
        await self.log("–ü–æ–ª—É—á–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤")
        return stats
