"""
Uzinex Boost ‚Äî Health Service
=============================

–°–µ—Ä–≤–∏—Å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (PostgreSQL, Redis, Telegram API);
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /health –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏;
- –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º (UptimeRobot, Grafana, etc.).
"""

from __future__ import annotations
import time
import logging
from typing import Any, Dict

import aiohttp
from sqlalchemy.ext.asyncio import AsyncEngine

from core.config import settings
from adapters.cache.redis_cache import RedisCache

logger = logging.getLogger("uzinex.domain.health")


class HealthService:
    """
    HealthService ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.
    """

    def __init__(self, db_engine: AsyncEngine, redis_client: RedisCache):
        self.db_engine = db_engine
        self.redis_client = redis_client

    # -------------------------------------------------
    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    # -------------------------------------------------
    async def check_postgres(self) -> bool:
        try:
            async with self.db_engine.connect() as conn:
                await conn.execute("SELECT 1")
            logger.debug("‚úÖ PostgreSQL connection OK")
            return True
        except Exception as e:
            logger.error(f"‚ùå PostgreSQL check failed: {e}")
            return False

    # -------------------------------------------------
    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    # -------------------------------------------------
    async def check_redis(self) -> bool:
        try:
            client = await self.redis_client.ensure_connection()
            pong = await client.ping()
            if pong:
                logger.debug("‚úÖ Redis connection OK")
                return True
        except Exception as e:
            logger.error(f"‚ùå Redis check failed: {e}")
        return False

    # -------------------------------------------------
    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # -------------------------------------------------
    async def check_telegram(self) -> bool:
        if not settings.TELEGRAM_BOT_TOKEN or settings.TELEGRAM_BOT_TOKEN.startswith("YOUR_"):
            logger.warning("‚ö†Ô∏è Telegram check skipped ‚Äî bot token not configured")
            return False

        url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/getMe"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=5) as response:
                    data = await response.json()
                    if data.get("ok"):
                        logger.debug("‚úÖ Telegram API reachable")
                        return True
                    logger.error(f"‚ùå Telegram API responded with error: {data}")
        except Exception as e:
            logger.error(f"‚ùå Telegram API check failed: {e}")
        return False

    # -------------------------------------------------
    # üîπ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
    # -------------------------------------------------
    async def get_health_status(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-—Å–≤–æ–¥–∫—É.
        """
        start_time = time.perf_counter()

        postgres_ok = await self.check_postgres()
        redis_ok = await self.check_redis()
        telegram_ok = await self.check_telegram()

        elapsed = round(time.perf_counter() - start_time, 3)

        summary = {
            "status": "ok" if all([postgres_ok, redis_ok]) else "degraded",
            "details": {
                "postgres": postgres_ok,
                "redis": redis_ok,
                "telegram": telegram_ok,
            },
            "elapsed_seconds": elapsed,
            "environment": settings.APP_ENV,
            "version": settings.APP_VERSION,
        }

        logger.info(
            f"üìä Health check summary: DB={postgres_ok} | Redis={redis_ok} | Telegram={telegram_ok} | {elapsed}s"
        )
        return summary
