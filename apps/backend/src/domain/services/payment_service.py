"""
Uzinex Boost ‚Äî Payment Service
==============================

–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
–†–µ–∞–ª–∏–∑—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–ª–∞—Ç—ë–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏:
- –ø—Ä–∏—ë–º –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (–≤–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤);
- –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤;
- –≤–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã;
- –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º;
- –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.balance_service
- domain.rules.payment_rules
- domain.events.payment_events
- api.v1.routes.payment
"""

from __future__ import annotations
from typing import Optional
from datetime import datetime

from sqlalchemy.ext.asyncio import AsyncSession

from domain.services.base import BaseService
from domain.services.balance_service import BalanceService
from domain.rules.payment_rules import PaymentRules
from domain.events.payment_events import (
    PaymentCreatedEvent,
    PaymentCompletedEvent,
    PaymentFailedEvent,
    PaymentRefundedEvent,
)
from db.repositories.payment_repository import PaymentRepository
from db.repositories.transaction_repository import TransactionRepository


class PaymentService(BaseService):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –ø–ª–∞—Ç—ë–∂–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ (–¥–µ–ø–æ–∑–∏—Ç—ã, –≤—ã–≤–æ–¥—ã, –≤–æ–∑–≤—Ä–∞—Ç—ã).
    """

    def __init__(self, session: AsyncSession):
        super().__init__(session)
        self.payment_repo = PaymentRepository(session)
        self.tx_repo = TransactionRepository(session)
        self.balance_service = BalanceService(session)

    # -------------------------------------------------
    # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    # -------------------------------------------------
    async def create_payment(
        self,
        user_id: int,
        amount: float,
        method: str,
        direction: str,  # 'in' (deposit) –∏–ª–∏ 'out' (withdraw)
        metadata: Optional[dict] = None,
    ):
        """
        –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ (–æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è).
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
        rule = await PaymentRules.validate_method(user_id=user_id, method=method)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        payment = await self.payment_repo.create_payment(
            user_id=user_id,
            amount=amount,
            method=method,
            direction=direction,
            status="pending",
            metadata=metadata or {},
        )

        await self.publish_event(
            PaymentCreatedEvent(
                payment_id=payment.id,
                user_id=user_id,
                amount=amount,
                method=method,
                direction=direction,
            )
        )
        await self.commit()
        await self.log(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç—ë–∂ {payment.id} ({direction}, {amount} UZT, {method})")
        return {"success": True, "payment_id": payment.id, "status": payment.status}

    # -------------------------------------------------
    # üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    # -------------------------------------------------
    async def complete_payment(self, payment_id: int):
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞.
        """
        payment = await self.payment_repo.get_by_id(payment_id)
        if not payment:
            return {"success": False, "message": "–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        if payment.status == "completed":
            return {"success": False, "message": "–ü–ª–∞—Ç—ë–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"}

        payment.status = "completed"
        payment.completed_at = datetime.utcnow()

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º
        if payment.direction == "in":
            await self.balance_service.deposit(
                user_id=payment.user_id,
                amount=payment.amount,
                payment_id=payment.id,
            )
        elif payment.direction == "out":
            await self.balance_service.withdraw(
                user_id=payment.user_id,
                amount=payment.amount,
            )

        await self.publish_event(
            PaymentCompletedEvent(
                payment_id=payment.id,
                user_id=payment.user_id,
                amount=payment.amount,
                method=payment.method,
                direction=payment.direction,
            )
        )
        await self.commit()
        await self.log(f"–ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {payment.id}")
        return {"success": True, "status": "completed"}

    # -------------------------------------------------
    # üîπ –û—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –∫–∞–∫ –Ω–µ—É–¥–∞–≤—à–∏–π—Å—è
    # -------------------------------------------------
    async def fail_payment(self, payment_id: int, reason: Optional[str] = None):
        """
        –ü–æ–º–µ—á–∞–µ—Ç –ø–ª–∞—Ç—ë–∂ –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π.
        """
        payment = await self.payment_repo.get_by_id(payment_id)
        if not payment:
            return {"success": False, "message": "–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        payment.status = "failed"
        payment.failed_reason = reason or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        payment.failed_at = datetime.utcnow()

        await self.publish_event(
            PaymentFailedEvent(
                payment_id=payment.id,
                user_id=payment.user_id,
                amount=payment.amount,
                reason=payment.failed_reason,
            )
        )
        await self.commit()
        await self.log(f"–ü–ª–∞—Ç—ë–∂ –Ω–µ—É—Å–ø–µ—à–µ–Ω: {payment.id} ({reason})")
        return {"success": True, "status": "failed"}

    # -------------------------------------------------
    # üîπ –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
    # -------------------------------------------------
    async def refund_payment(self, payment_id: int, reason: Optional[str] = None):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ä–µ—Ñ–∞–Ω–¥).
        """
        payment = await self.payment_repo.get_by_id(payment_id)
        if not payment or payment.status != "completed":
            return {"success": False, "message": "–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω"}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        rule = await PaymentRules.can_refund(payment)
        if not rule.is_allowed:
            return {"success": False, "message": rule.message}

        payment.status = "refunded"
        payment.refunded_at = datetime.utcnow()

        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å
        await self.balance_service.deposit(
            user_id=payment.user_id,
            amount=payment.amount,
            payment_id=payment.id,
        )

        await self.publish_event(
            PaymentRefundedEvent(
                payment_id=payment.id,
                user_id=payment.user_id,
                amount=payment.amount,
                reason=reason or "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤",
            )
        )
        await self.commit()
        await self.log(f"–ü–ª–∞—Ç—ë–∂ –≤–æ–∑–≤—Ä–∞—â—ë–Ω: {payment.id} (+{payment.amount} UZT)")
        return {"success": True, "status": "refunded"}

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
    # -------------------------------------------------
    async def get_payment_history(self, user_id: int, limit: int = 50):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        payments = await self.payment_repo.get_by_user(user_id, limit)
        return [p.as_dict() for p in payments]

    # -------------------------------------------------
    # üîπ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    # -------------------------------------------------
    async def get_global_stats(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –ø–ª–∞—Ç–µ–∂–∞–º.
        """
        stats = await self.payment_repo.get_stats()
        await self.log("–ü–æ–ª—É—á–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π")
        return stats
