"""
Uzinex Boost ‚Äî Stats Service
=============================

–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –°–æ–±–∏—Ä–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–¥–∞–Ω–∏—è, –±–∞–ª–∞–Ω—Å, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏);
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–∞—à–±–æ—Ä–¥–æ–≤, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏ API `/system/stats`;
- –†–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å PostgreSQL –∏ Redis;
- –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
- db.repositories.*
- adapters.cache.RedisCache
"""

from __future__ import annotations
import time
import logging
from typing import Any, Dict, Optional

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text

from adapters.cache.redis_cache import RedisCache

logger = logging.getLogger("uzinex.domain.stats")


class StatsService:
    """
    StatsService ‚Äî –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.
    """

    def __init__(self, db_session: AsyncSession, cache: Optional[RedisCache] = None):
        self.db = db_session
        self.cache = cache

    # -------------------------------------------------
    # üîπ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # -------------------------------------------------
    async def get_platform_stats(self, use_cache: bool = True) -> Dict[str, Any]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ:
        - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
        - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        - –æ–±—â–∏–π –æ–±–æ—Ä–æ—Ç (—Å—É–º–º–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
        - —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        cache_key = "stats:platform_summary"
        if use_cache and self.cache:
            cached = await self.cache.get(cache_key)
            if cached:
                logger.debug("üì¶ Stats fetched from cache")
                return self.cache.from_json(cached)

        start = time.perf_counter()

        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await self._count("users")

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
            tasks = await self._count("tasks")

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            orders_active = await self._count("orders", where="status = 'active'")

            # –û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            total_payments = await self._sum("payments", "amount", where="status = 'completed'")

            # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            avg_balance = await self._avg("balances", "amount")

            stats = {
                "users_total": users,
                "tasks_total": tasks,
                "orders_active": orders_active,
                "payments_total": float(total_payments or 0),
                "avg_balance": float(avg_balance or 0),
                "elapsed_seconds": round(time.perf_counter() - start, 3),
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (TTL = 60 —Å–µ–∫)
            if self.cache:
                await self.cache.set(cache_key, stats, expire=60)

            logger.info(
                f"üìä Stats summary ‚Üí users={users}, tasks={tasks}, orders={orders_active}, "
                f"payments={total_payments}, avg_balance={avg_balance}"
            )
            return stats

        except Exception as e:
            logger.error(f"‚ùå Failed to collect platform stats: {e}")
            return {"error": str(e)}

    # -------------------------------------------------
    # üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ SQL-–º–µ—Ç–æ–¥—ã
    # -------------------------------------------------
    async def _count(self, table: str, where: Optional[str] = None) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
        query = f"SELECT COUNT(*) FROM {table}"
        if where:
            query += f" WHERE {where}"
        result = await self.db.execute(text(query))
        return int(result.scalar() or 0)

    async def _sum(self, table: str, column: str, where: Optional[str] = None) -> float:
        """–°—É–º–º–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞."""
        query = f"SELECT COALESCE(SUM({column}), 0) FROM {table}"
        if where:
            query += f" WHERE {where}"
        result = await self.db.execute(text(query))
        return float(result.scalar() or 0)

    async def _avg(self, table: str, column: str, where: Optional[str] = None) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Å—Ç–æ–ª–±—Ü—É."""
        query = f"SELECT COALESCE(AVG({column}), 0) FROM {table}"
        if where:
            query += f" WHERE {where}"
        result = await self.db.execute(text(query))
        return float(result.scalar() or 0)
