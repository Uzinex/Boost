"""
Uzinex Boost ‚Äî Domain Event Base
================================

–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∏ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–æ–º–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–∏—Å—Ç–µ–º—ã Uzinex Boost.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- —Å–ª—É–∂–∏—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–º –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –¥–æ–º–µ–Ω–∞;
- –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, timestamp –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è;
- –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è EventDispatcher'–æ–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

–ü–∞—Ç—Ç–µ—Ä–Ω: Domain Event (DDD)
---------------------------
–ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º–µ.
–°–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞—é—Ç —Å–æ–±—ã—Ç–∏—è, –∞ –∞–¥–∞–ø—Ç–µ—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –Ω–∏—Ö —Ä–µ–∞–≥–∏—Ä—É—é—Ç.

–ü—Ä–∏–º–µ—Ä:
--------
event = BalanceUpdatedEvent(user_id=42, amount=+50.0, ...)
await EventDispatcher.publish(event)
"""

from __future__ import annotations
import uuid
from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field


# -------------------------------------------------
# üîπ –ë–∞–∑–æ–≤—ã–π –¥–æ–º–µ–Ω–Ω—ã–π –∏–≤–µ–Ω—Ç
# -------------------------------------------------
class DomainEvent(BaseModel):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –¥–æ–º–µ–Ω–∞ Uzinex Boost.
    """

    id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è")
    event_type: str = Field(..., description="–¢–∏–ø —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: balance.updated, user.registered)")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è (UTC)")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")

    class Config:
        arbitrary_types_allowed = True
        json_encoders = {datetime: lambda v: v.isoformat()}
        orm_mode = True

    # -------------------------------------------------
    # üîπ –£—Ç–∏–ª–∏—Ç—ã
    # -------------------------------------------------
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        return self.model_dump()

    def to_json(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è."""
        return self.model_dump_json(indent=2)

    def __str__(self) -> str:
        return f"<DomainEvent {self.event_type} id={self.id} at={self.timestamp.isoformat()}>"

    # -------------------------------------------------
    # üîπ –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
    # -------------------------------------------------
    @classmethod
    def from_payload(cls, payload: Dict[str, Any]) -> "DomainEvent":
        """
        –°–æ–∑–¥–∞—ë—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –±—Ä–æ–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π).
        """
        return cls(**payload)
