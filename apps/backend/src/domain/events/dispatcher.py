"""
Uzinex Boost ‚Äî Event Dispatcher
===============================

–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π (Event Bus) –¥–æ–º–µ–Ω–∞ Uzinex Boost.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π;
- –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏ –¥–æ—Å—Ç–∞–≤–∫—É;
- —Å–ª—É–∂–∏—Ç —Ç–æ—á–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É domain –∏ adapters —Å–ª–æ—è–º–∏.

–ü–∞—Ç—Ç–µ—Ä–Ω: Event Bus / Pub-Sub
-----------------------------
‚Ä¢ domain/services –ø—É–±–ª–∏–∫—É—é—Ç —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ EventDispatcher.publish(event)
‚Ä¢ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (handlers) –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
‚Ä¢ adapters —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ç.–¥.)

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.*
- adapters.notifications
- adapters.analytics
- adapters.logging
"""

from __future__ import annotations
import asyncio
from typing import Any, Awaitable, Callable, Dict, List, Type, Union
from loguru import logger

from domain.events.base import DomainEvent


# -------------------------------------------------
# üîπ –¢–∏–ø—ã
# -------------------------------------------------
EventHandler = Union[Callable[[DomainEvent], Awaitable[None]], Callable[[DomainEvent], None]]


# -------------------------------------------------
# üîπ –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π
# -------------------------------------------------
class EventDispatcher:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π (Event Bus) –¥–ª—è Uzinex Boost.
    """

    _subscribers: Dict[str, List[EventHandler]] = {}

    # -------------------------------------------------
    # üîπ –ü–æ–¥–ø–∏—Å–∫–∞
    # -------------------------------------------------
    @classmethod
    def subscribe(cls, event_type: str, handler: EventHandler) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è.
        """
        if event_type not in cls._subscribers:
            cls._subscribers[event_type] = []
        cls._subscribers[event_type].append(handler)
        logger.debug(f"[EventDispatcher] Subscribed handler '{handler.__name__}' to event '{event_type}'")

    # -------------------------------------------------
    # üîπ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
    # -------------------------------------------------
    @classmethod
    async def publish(cls, event: DomainEvent) -> None:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.
        """
        handlers = cls._subscribers.get(event.event_type, [])
        if not handlers:
            logger.debug(f"[EventDispatcher] No handlers for event '{event.event_type}'")
            return

        logger.info(f"[EventDispatcher] Publishing event '{event.event_type}' ‚Üí {len(handlers)} handler(s)")

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        tasks = []
        for handler in handlers:
            try:
                if asyncio.iscoroutinefunction(handler):
                    tasks.append(asyncio.create_task(handler(event)))
                else:
                    handler(event)
            except Exception as e:
                logger.error(f"[EventDispatcher] Error executing handler {handler.__name__}: {e}")

        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

    # -------------------------------------------------
    # üîπ –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    # -------------------------------------------------
    @classmethod
    def unsubscribe(cls, event_type: str, handler: EventHandler) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.
        """
        handlers = cls._subscribers.get(event_type, [])
        if handler in handlers:
            handlers.remove(handler)
            logger.debug(f"[EventDispatcher] Unsubscribed '{handler.__name__}' from event '{event_type}'")

    # -------------------------------------------------
    # üîπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
    # -------------------------------------------------
    @classmethod
    def clear(cls) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö).
        """
        cls._subscribers.clear()
        logger.debug("[EventDispatcher] All event subscriptions cleared")

    # -------------------------------------------------
    # üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # -------------------------------------------------
    @classmethod
    def get_subscribers(cls) -> Dict[str, List[str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏/–æ—Ç–ª–∞–¥–∫–∏).
        """
        return {etype: [h.__name__ for h in handlers] for etype, handlers in cls._subscribers.items()}
