"""
Uzinex Boost ‚Äî User Repository
==============================

–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Uzinex.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;
- –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, —Å—Ç–∞—Ç—É—Å–∞ –∏ –±–∞–ª–∞–Ω—Å–∞;
- –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º;
- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º, –∑–∞–¥–∞—á–∞–º–∏, –∑–∞–∫–∞–∑–∞–º–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.user
- api.v1.routes.user
- adapters.auth
"""

from __future__ import annotations
from typing import Optional, List, Dict
from datetime import datetime

from sqlalchemy import select, update, func
from sqlalchemy.ext.asyncio import AsyncSession

from db.models.user_model import User
from db.repositories.base import BaseRepository


class UserRepository(BaseRepository[User]):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Uzinex.
    """

    def __init__(self, session: AsyncSession):
        super().__init__(session, User)

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ email
    # -------------------------------------------------
    async def get_by_id(self, user_id: int) -> Optional[User]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.
        """
        result = await self.session.execute(
            select(User).where(User.id == user_id)
        )
        return result.scalar_one_or_none()

    async def get_by_email(self, email: str) -> Optional[User]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email.
        """
        result = await self.session.execute(
            select(User).where(User.email == email)
        )
        return result.scalar_one_or_none()

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    # -------------------------------------------------
    async def get_all(
        self,
        is_active: Optional[bool] = None,
        is_verified: Optional[bool] = None,
        limit: int = 100,
    ) -> List[User]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏).
        """
        query = select(User)
        if is_active is not None:
            query = query.where(User.is_active == is_active)
        if is_verified is not None:
            query = query.where(User.is_verified == is_verified)

        result = await self.session.execute(
            query.order_by(User.created_at.desc()).limit(limit)
        )
        return result.scalars().all()

    # -------------------------------------------------
    # üîπ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    async def create_user(
        self,
        email: str,
        username: str,
        password_hash: str,
        full_name: Optional[str] = None,
        referral_id: Optional[int] = None,
    ) -> User:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email/password).
        """
        user = User(
            email=email.lower(),
            username=username,
            password_hash=password_hash,
            full_name=full_name,
            referral_id=referral_id,
            created_at=datetime.utcnow(),
        )
        self.session.add(user)
        await self.session.commit()
        await self.session.refresh(user)
        return user

    # -------------------------------------------------
    # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    # -------------------------------------------------
    async def update_profile(
        self,
        user_id: int,
        full_name: Optional[str] = None,
        username: Optional[str] = None,
        bio: Optional[str] = None,
    ) -> Optional[User]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        update_data = {}
        if full_name:
            update_data["full_name"] = full_name
        if username:
            update_data["username"] = username
        if bio:
            update_data["bio"] = bio

        if not update_data:
            return await self.get_by_id(user_id)

        await self.session.execute(
            update(User)
            .where(User.id == user_id)
            .values(**update_data)
            .execution_options(synchronize_session="fetch")
        )
        await self.session.commit()
        return await self.get_by_id(user_id)

    # -------------------------------------------------
    # üîπ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–∞–∫—Ç–∏–≤–∞—Ü–∏—è, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ —Ç.–¥.)
    # -------------------------------------------------
    async def update_status(
        self, user_id: int, is_active: bool
    ) -> Optional[User]:
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        await self.session.execute(
            update(User)
            .where(User.id == user_id)
            .values(is_active=is_active)
            .execution_options(synchronize_session="fetch")
        )
        await self.session.commit()
        return await self.get_by_id(user_id)

    # -------------------------------------------------
    # üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
    # -------------------------------------------------
    async def verify_email(self, user_id: int) -> Optional[User]:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email.
        """
        await self.session.execute(
            update(User)
            .where(User.id == user_id)
            .values(is_verified=True)
        )
        await self.session.commit()
        return await self.get_by_id(user_id)

    # -------------------------------------------------
    # üîπ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    # -------------------------------------------------
    async def get_stats(self) -> Dict[str, int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
        - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
        - –∞–∫—Ç–∏–≤–Ω—ã–µ,
        - –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ.
        """
        result = await self.session.execute(
            select(
                func.count(User.id),
                func.sum(func.case((User.is_active == True, 1), else_=0)),
                func.sum(func.case((User.is_verified == True, 1), else_=0)),
            )
        )
        total, active, verified = result.one_or_none() or (0, 0, 0)
        return {
            "total": total,
            "active": int(active or 0),
            "verified": int(verified or 0),
        }

    # -------------------------------------------------
    # üîπ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    # -------------------------------------------------
    async def get_recent(self, limit: int = 20) -> List[User]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏).
        """
        result = await self.session.execute(
            select(User)
            .order_by(User.created_at.desc())
            .limit(limit)
        )
        return result.scalars().all()

    # -------------------------------------------------
    # üîπ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, email –∏–ª–∏ username
    # -------------------------------------------------
    async def search(self, query: str, limit: int = 20) -> List[User]:
        """
        –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email, –∏–º–µ–Ω–∏ –∏–ª–∏ username.
        """
        like_query = f"%{query.lower()}%"
        result = await self.session.execute(
            select(User).where(
                func.lower(User.email).like(like_query)
                | func.lower(User.username).like(like_query)
                | func.lower(User.full_name).like(like_query)
            ).limit(limit)
        )
        return result.scalars().all()
