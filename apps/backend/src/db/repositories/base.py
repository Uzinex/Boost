"""
Uzinex Boost ‚Äî Base Repository
===============================

–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLAlchemy (Async ORM).

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏;
- –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ë–î;
- —Å–ª—É–∂–∏—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –∫–ª–∞—Å—Å–æ–º –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- db.repositories.*
- domain.services.*
"""

from __future__ import annotations
from typing import Generic, TypeVar, Type, List, Optional, Any, Dict

from sqlalchemy import select, update, delete
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import SQLAlchemyError

# –¢–∏–ø –¥–ª—è –æ–±–æ–±—â—ë–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
T = TypeVar("T")

class BaseRepository(Generic[T]):
    """
    –ë–∞–∑–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (CRUD –¥–ª—è –º–æ–¥–µ–ª–µ–π ORM).
    """

    def __init__(self, session: AsyncSession, model: Type[T]):
        self.session = session
        self.model = model

    # -------------------------------------------------
    # üîπ CREATE
    # -------------------------------------------------
    async def create(self, data: Dict[str, Any]) -> T:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ.
        """
        obj = self.model(**data)
        self.session.add(obj)
        try:
            await self.session.commit()
            await self.session.refresh(obj)
            return obj
        except SQLAlchemyError as e:
            await self.session.rollback()
            raise RuntimeError(f"Database error on create: {e}")

    # -------------------------------------------------
    # üîπ READ
    # -------------------------------------------------
    async def get(self, obj_id: int) -> Optional[T]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID.
        """
        result = await self.session.execute(select(self.model).where(self.model.id == obj_id))
        return result.scalar_one_or_none()

    async def list(self, skip: int = 0, limit: int = 100) -> List[T]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π.
        """
        result = await self.session.execute(select(self.model).offset(skip).limit(limit))
        return result.scalars().all()

    async def get_by_field(self, field_name: str, value: Any) -> Optional[T]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—é.
        """
        field = getattr(self.model, field_name, None)
        if not field:
            raise AttributeError(f"Model {self.model.__name__} has no attribute '{field_name}'")
        result = await self.session.execute(select(self.model).where(field == value))
        return result.scalar_one_or_none()

    # -------------------------------------------------
    # üîπ UPDATE
    # -------------------------------------------------
    async def update(self, obj_id: int, data: Dict[str, Any]) -> Optional[T]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID.
        """
        await self.session.execute(
            update(self.model)
            .where(self.model.id == obj_id)
            .values(**data)
            .execution_options(synchronize_session="fetch")
        )
        try:
            await self.session.commit()
        except SQLAlchemyError as e:
            await self.session.rollback()
            raise RuntimeError(f"Database error on update: {e}")

        return await self.get(obj_id)

    # -------------------------------------------------
    # üîπ DELETE
    # -------------------------------------------------
    async def delete(self, obj_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID.
        """
        try:
            await self.session.execute(delete(self.model).where(self.model.id == obj_id))
            await self.session.commit()
            return True
        except SQLAlchemyError as e:
            await self.session.rollback()
            raise RuntimeError(f"Database error on delete: {e}")

    # -------------------------------------------------
    # üîπ COUNT
    # -------------------------------------------------
    async def count(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π.
        """
        from sqlalchemy import func
        result = await self.session.execute(select(func.count()).select_from(self.model))
        return result.scalar() or 0
