"""
Uzinex Boost ‚Äî Task Repository
===============================

–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ (ORM-–º–æ–¥–µ–ª—å Task).

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏;
- —Ñ–∏–∫—Å–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π;
- —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.tasks
- api.v1.routes.tasks
- balance/transaction logic
"""

from __future__ import annotations
from datetime import datetime
from typing import List, Optional

from sqlalchemy import select, update, func
from sqlalchemy.ext.asyncio import AsyncSession

from db.models.task_model import Task, TaskStatus
from db.repositories.base import BaseRepository


class TaskRepository(BaseRepository[Task]):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """

    def __init__(self, session: AsyncSession):
        super().__init__(session, Task)

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # -------------------------------------------------
    async def get_by_user(self, user_id: int, status: Optional[TaskStatus] = None) -> List[Task]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ —Å—Ç–∞—Ç—É—Å—É.
        """
        query = select(Task).where(Task.user_id == user_id)
        if status:
            query = query.where(Task.status == status)
        result = await self.session.execute(query.order_by(Task.created_at.desc()))
        return result.scalars().all()

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑—É
    # -------------------------------------------------
    async def get_by_order(self, order_id: int) -> List[Task]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–∫–∞–∑–æ–º.
        """
        result = await self.session.execute(
            select(Task)
            .where(Task.order_id == order_id)
            .order_by(Task.created_at.desc())
        )
        return result.scalars().all()

    # -------------------------------------------------
    # üîπ –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    # -------------------------------------------------
    async def complete_task(self, task_id: int) -> Optional[Task]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ COMPLETED –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
        """
        await self.session.execute(
            update(Task)
            .where(Task.id == task_id)
            .values(
                status=TaskStatus.COMPLETED,
                completed_at=datetime.utcnow(),
            )
            .execution_options(synchronize_session="fetch")
        )
        await self.session.commit()
        return await self.get(task_id)

    # -------------------------------------------------
    # üîπ –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
    # -------------------------------------------------
    async def reject_task(self, task_id: int) -> Optional[Task]:
        """
        –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ REJECTED.
        """
        await self.session.execute(
            update(Task)
            .where(Task.id == task_id)
            .values(status=TaskStatus.REJECTED)
            .execution_options(synchronize_session="fetch")
        )
        await self.session.commit()
        return await self.get(task_id)

    # -------------------------------------------------
    # üîπ –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    async def get_user_stats(self, user_id: int) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:
        - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö,
        - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö,
        - –æ–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è.
        """
        result = await self.session.execute(
            select(
                Task.status,
                func.count(Task.id),
                func.sum(Task.reward_amount),
            ).where(Task.user_id == user_id).group_by(Task.status)
        )

        stats = {status.value: {"count": cnt, "sum": float(total or 0)} for status, cnt, total in result.all()}
        total_tasks = sum(v["count"] for v in stats.values()) if stats else 0
        total_earned = sum(v["sum"] for v in stats.values()) if stats else 0.0

        stats["total"] = {"count": total_tasks, "sum": round(total_earned, 2)}
        return stats

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    # -------------------------------------------------
    async def get_active_tasks(self, limit: int = 50) -> List[Task]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è).
        """
        result = await self.session.execute(
            select(Task)
            .where(Task.status == TaskStatus.PENDING)
            .order_by(Task.created_at.asc())
            .limit(limit)
        )
        return result.scalars().all()

    # -------------------------------------------------
    # üîπ –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # -------------------------------------------------
    async def get_global_earn_stats(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –≤—Å–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º:
        - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á;
        - –æ–±—â–∞—è —Å—É–º–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π.
        """
        result = await self.session.execute(
            select(
                func.count(Task.id),
                func.sum(Task.reward_amount),
            ).where(Task.status == TaskStatus.COMPLETED)
        )
        count, total = result.first() or (0, 0.0)
        return {"completed": count or 0, "total_reward": round(float(total or 0), 2)}
