"""
Uzinex Boost ‚Äî Payment Repository
==================================

–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ORM-–º–æ–¥–µ–ª—å Payment).

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –±–∞–ª–∞–Ω—Å–∞ (UZT);
- –ø—Ä–æ–≤–µ—Ä–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ–∫–æ–≤;
- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –∏ –ø–ª–∞—Ç—ë–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ (Click, Payme, Manual).

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:
- domain.services.payments
- api.v1.routes.payments
- adapters.payments.manual
"""

from __future__ import annotations
from typing import List, Optional
from datetime import datetime

from sqlalchemy import select, update, func
from sqlalchemy.ext.asyncio import AsyncSession

from db.models.payment_model import Payment, PaymentStatus, PaymentMethod
from db.repositories.base import BaseRepository


class PaymentRepository(BaseRepository[Payment]):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """

    def __init__(self, session: AsyncSession):
        super().__init__(session, Payment)

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -------------------------------------------------
    async def get_by_user(self, user_id: int, include_rejected: bool = False) -> List[Payment]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        query = select(Payment).where(Payment.user_id == user_id)
        if not include_rejected:
            query = query.where(Payment.status != PaymentStatus.REJECTED)
        result = await self.session.execute(query.order_by(Payment.created_at.desc()))
        return result.scalars().all()

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∏
    # -------------------------------------------------
    async def get_pending(self, limit: int = 100) -> List[Payment]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤).
        """
        result = await self.session.execute(
            select(Payment)
            .where(Payment.status == PaymentStatus.PENDING)
            .order_by(Payment.created_at.asc())
            .limit(limit)
        )
        return result.scalars().all()

    # -------------------------------------------------
    # üîπ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂
    # -------------------------------------------------
    async def verify_payment(self, payment_id: int, admin_id: int) -> Optional[Payment]:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–ª–∞—Ç—ë–∂ (–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ VERIFIED –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
        """
        await self.session.execute(
            update(Payment)
            .where(Payment.id == payment_id)
            .values(
                status=PaymentStatus.VERIFIED,
                verified_by=admin_id,
                verified_at=datetime.utcnow(),
            )
            .execution_options(synchronize_session="fetch")
        )
        await self.session.commit()
        return await self.get(payment_id)

    # -------------------------------------------------
    # üîπ –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂
    # -------------------------------------------------
    async def reject_payment(self, payment_id: int, admin_id: int, comment: str = "") -> Optional[Payment]:
        """
        –û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–ª–∞—Ç—ë–∂ (–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ REJECTED –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π).
        """
        await self.session.execute(
            update(Payment)
            .where(Payment.id == payment_id)
            .values(
                status=PaymentStatus.REJECTED,
                verified_by=admin_id,
                verified_at=datetime.utcnow(),
                comment=comment,
            )
            .execution_options(synchronize_session="fetch")
        )
        await self.session.commit()
        return await self.get(payment_id)

    # -------------------------------------------------
    # üîπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º
    # -------------------------------------------------
    async def get_stats(self, user_id: Optional[int] = None) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º:
        –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –æ–±—â–∞—è —Å—É–º–º–∞, —É—Å–ø–µ—à–Ω—ã–µ, –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ, –æ–∂–∏–¥–∞—é—â–∏–µ.
        """
        query = select(
            Payment.status,
            func.count(Payment.id),
            func.sum(Payment.amount),
        ).group_by(Payment.status)

        if user_id:
            query = query.where(Payment.user_id == user_id)

        result = await self.session.execute(query)
        stats = {}
        for status, count, total in result.all():
            stats[status.value] = {"count": count, "sum": float(total or 0)}

        # –î–æ–±–∞–≤–∏–º –æ–±—â–∏–µ —Å—É–º–º—ã
        stats["total"] = {
            "count": sum(v["count"] for v in stats.values()),
            "sum": round(sum(v["sum"] for v in stats.values()), 2),
        }

        return stats

    # -------------------------------------------------
    # üîπ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–ª–∞—Ç–µ–∂–µ–π
    # -------------------------------------------------
    async def get_recent(self, limit: int = 10) -> List[Payment]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏ (–¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∞–¥–º–∏–Ω–∞).
        """
        result = await self.session.execute(
            select(Payment).order_by(Payment.created_at.desc()).limit(limit)
        )
        return result.scalars().all()
