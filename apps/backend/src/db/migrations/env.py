"""
Uzinex Boost ‚Äî Alembic Environment
===================================

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è Alembic –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π PostgreSQL.

–§—É–Ω–∫—Ü–∏–∏:
- –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ core.database.engine;
- –∑–∞–≥—Ä—É–∑–∫–∞ metadata –∏–∑ domain.models;
- –ø–æ–¥–¥–µ—Ä–∂–∫–∞ offline / online —Ä–µ–∂–∏–º–æ–≤;
- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å core.config.settings (DATABASE_URL).

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–∞—Ö:
    alembic revision --autogenerate -m "init"
    alembic upgrade head
    alembic downgrade -1
"""

from __future__ import annotations

import sys
import asyncio
from logging.config import fileConfig
from pathlib import Path

from alembic import context
from sqlalchemy import pool
from sqlalchemy.engine import Connection
from sqlalchemy.ext.asyncio import AsyncEngine, create_async_engine

# --- –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
BASE_DIR = Path(__file__).resolve().parents[3]
if str(BASE_DIR) not in sys.path:
    sys.path.append(str(BASE_DIR))

# --- –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ ---
from core import settings  # noqa
from core.database import Base  # noqa
from domain import models  # noqa (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö ORM –º–æ–¥–µ–ª–µ–π)
from core.logging import setup_logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Alembic ---
fileConfig(context.config.config_file_name)
setup_logging()
logger = context.get_context().opts.get("logger", None)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic ---
target_metadata = Base.metadata
DATABASE_URL = settings.DATABASE_URL


# -------------------------------------------------
# üîπ OFFLINE —Ä–µ–∂–∏–º (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
# -------------------------------------------------

def run_migrations_offline() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ offline-—Ä–µ–∂–∏–º–µ (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î)."""
    url = DATABASE_URL
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
    )

    with context.begin_transaction():
        context.run_migrations()


# -------------------------------------------------
# üîπ ONLINE —Ä–µ–∂–∏–º (—Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π)
# -------------------------------------------------

def do_run_migrations(connection: Connection) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏."""
    context.configure(
        connection=connection,
        target_metadata=target_metadata,
        compare_type=True,
        compare_server_default=True,
    )

    with context.begin_transaction():
        context.run_migrations()


async def run_migrations_online() -> None:
    """–°–æ–∑–¥–∞—ë—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏."""
    connectable: AsyncEngine = create_async_engine(DATABASE_URL, poolclass=pool.NullPool)

    async with connectable.connect() as connection:
        await connection.run_sync(do_run_migrations)

    await connectable.dispose()


# -------------------------------------------------
# üîπ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# -------------------------------------------------

if context.is_offline_mode():
    run_migrations_offline()
else:
    asyncio.run(run_migrations_online())
