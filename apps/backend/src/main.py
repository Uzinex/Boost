from __future__ import annotations

"""
Uzinex Boost ‚Äî Main Application Entry Point
===========================================

–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞ backend-—Å–∏—Å—Ç–µ–º—ã Uzinex Boost v2.0.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;
- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ API (v1);
- –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middlewares (CORS, Logging);
- —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;
- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, Redis –∏ Telegram Bot.

–ó–∞–ø—É—Å–∫:
--------
$ uvicorn apps.backend.src.main:app --reload
"""

# -------------------------------------------------
# üîπ –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# -------------------------------------------------
import os
import sys
import asyncio
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from loguru import logger

# -------------------------------------------------
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è Railway –∏ –ª–æ–∫–∞–ª–∏)
# -------------------------------------------------
BACKEND_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if BACKEND_ROOT not in sys.path:
    sys.path.append(BACKEND_ROOT)

BOT_PATH = os.path.join(BACKEND_ROOT, "bot")
if BOT_PATH not in sys.path:
    sys.path.append(BOT_PATH)

# -------------------------------------------------
# üîπ –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Telegram Bot
# -------------------------------------------------
try:
    from bot.app.service.bot_service import *  # type: ignore
    logger.info("ü§ñ Telegram Bot module loaded successfully.")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Telegram Bot module not loaded: {e}")

# -------------------------------------------------
# üîπ –ò–º–ø–æ—Ä—Ç—ã —è–¥—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------------------------------
from core.config import settings
from core.database import engine
from core.startup import init_app
from core.logging import setup_logging
from db.base import Base

# -------------------------------------------------
# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------------------------------
app = FastAPI(
    title="Uzinex Boost API",
    version="2.0.0",
    description="High-performance backend for Uzinex Boost v2.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
)

# -------------------------------------------------
# üîπ CORS Middleware
# -------------------------------------------------
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -------------------------------------------------
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫
# -------------------------------------------------
setup_logging()
logger.info("üöÄ Starting Uzinex Boost API v2.0...")

# -------------------------------------------------
# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API
# -------------------------------------------------
try:
    from api.v1.routes import router as api_router
    app.include_router(api_router, prefix="/api/v1")
    logger.info("‚úÖ API routes successfully registered.")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è API routes not loaded: {e}")

# -------------------------------------------------
# üîπ –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------------------------------
@app.on_event("startup")
async def on_startup():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üîß Initializing Uzinex Boost backend components...")
    async with engine.begin() as connection:
        await connection.run_sync(Base.metadata.create_all)
    await init_app()
    logger.success("‚úÖ Application startup completed.")


@app.on_event("shutdown")
async def on_shutdown():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üßπ Shutting down Uzinex Boost backend...")
    await asyncio.sleep(0.1)
    logger.success("üõë Application stopped gracefully.")

# -------------------------------------------------
# üîπ Healthcheck Endpoint
# -------------------------------------------------
@app.get("/", tags=["System"])
async def root():
    """Healthcheck: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API."""
    return {
        "status": "ok",
        "service": "Uzinex Boost Backend",
        "version": "2.0.0",
        "environment": settings.APP_ENV,
    }

# –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ main.py
@app.on_event("startup")
async def start_bot_on_backend():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å backend"""
    from aiogram import executor
    from bot import dp

    async def run_bot():
        import asyncio
        await asyncio.sleep(1)  # –∂–¥—ë–º –ø–æ–∫–∞ API –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è
        logger.info("ü§ñ Launching Telegram bot polling...")
        await dp.start_polling()

    asyncio.create_task(run_bot())

