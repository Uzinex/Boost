from __future__ import annotations

"""
Uzinex Boost ‚Äî Main Application Entry Point
===========================================

–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞ backend-—Å–∏—Å—Ç–µ–º—ã Uzinex Boost v2.0.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
-----------
- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;
- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ API (v1);
- –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middlewares (CORS, Logging);
- —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;
- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, Redis –∏ Telegram Bot.

–ó–∞–ø—É—Å–∫:
--------
$ uvicorn apps.backend.src.main:app --reload
"""

# -------------------------------------------------
# üîπ –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# -------------------------------------------------
import os
import sys
import asyncio
from pathlib import Path

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles
from loguru import logger

# -------------------------------------------------
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è Railway –∏ –ª–æ–∫–∞–ª–∏)
# -------------------------------------------------
BACKEND_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if BACKEND_ROOT not in sys.path:
    sys.path.append(BACKEND_ROOT)

BOT_PATH = os.path.join(BACKEND_ROOT, "bot")
if BOT_PATH not in sys.path:
    sys.path.append(BOT_PATH)

WEBAPP_DIR = Path(BACKEND_ROOT) / "bot" / "webapp"

WEBAPP_PUBLIC = WEBAPP_DIR / "public"
WEBAPP_SRC = WEBAPP_DIR / "src"

# -------------------------------------------------
# üîπ –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Telegram Bot
# -------------------------------------------------
try:
    from bot.app.service.bot_service import *  # type: ignore
    logger.info("ü§ñ Telegram Bot module loaded successfully.")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Telegram Bot module not loaded: {e}")

# -------------------------------------------------
# üîπ –ò–º–ø–æ—Ä—Ç—ã —è–¥—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------------------------------
from core.config import settings
from core.database import engine
from core.startup import init_app
from core.logging import setup_logging
from db.base import Base

# -------------------------------------------------
# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------------------------------
app = FastAPI(
    title="Uzinex Boost API",
    version="2.0.0",
    description="High-performance backend for Uzinex Boost v2.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
)

if WEBAPP_SRC.exists():
    app.mount("/src", StaticFiles(directory=WEBAPP_SRC), name="webapp-src")


styles_dir = WEBAPP_PUBLIC / "styles"
if styles_dir.exists():
    app.mount("/styles", StaticFiles(directory=styles_dir), name="webapp-styles")

# -------------------------------------------------
# üîπ CORS Middleware
# -------------------------------------------------
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -------------------------------------------------
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫
# -------------------------------------------------
setup_logging()
logger.info("üöÄ Starting Uzinex Boost API v2.0...")

# -------------------------------------------------
# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API
# -------------------------------------------------
try:
    from api.v1.routes import router as api_router
    app.include_router(api_router, prefix="/api/v1")
    logger.info("‚úÖ API routes successfully registered.")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è API routes not loaded: {e}")

# -------------------------------------------------
# üîπ –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------------------------------
@app.on_event("startup")
async def on_startup():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üîß Initializing Uzinex Boost backend components...")
    async with engine.begin() as connection:
        await connection.run_sync(Base.metadata.create_all)
    await init_app()
    logger.success("‚úÖ Application startup completed.")


@app.on_event("shutdown")
async def on_shutdown():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üßπ Shutting down Uzinex Boost backend...")
    await asyncio.sleep(0.1)
    logger.success("üõë Application stopped gracefully.")

# -------------------------------------------------
# üîπ Healthcheck Endpoint
# -------------------------------------------------
@app.get("/", include_in_schema=False)
async def serve_webapp():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–π Telegram WebApp –∏–ª–∏ healthcheck JSON, –µ—Å–ª–∏ —Å–±–æ—Ä–∫–∏ –Ω–µ—Ç."""
    build_index = WEBAPP_PUBLIC / "index.html"
    dev_index = WEBAPP_DIR / "index.html"

    if build_index.exists():
        logger.debug("üìÑ Serving built webapp index.html")
        return FileResponse(build_index)

    if dev_index.exists():
        logger.debug("üõ†Ô∏è Serving development webapp index.html")
        return FileResponse(dev_index)

    logger.warning("‚ö†Ô∏è WebApp index not found, falling back to JSON healthcheck.")
    return {
        "status": "ok",
        "service": "Uzinex Boost Backend",
        "version": "2.0.0",
        "environment": settings.APP_ENV,
    }


@app.get("/manifest.webmanifest", include_in_schema=False)
async def serve_manifest():
    manifest_path = WEBAPP_PUBLIC / "manifest.webmanifest"
    if manifest_path.exists():
        logger.debug("üßæ Serving manifest.webmanifest")
        return FileResponse(manifest_path, media_type="application/manifest+json")

    raise HTTPException(status_code=404, detail="manifest.webmanifest not found")


@app.get("/favicon.svg", include_in_schema=False)
async def serve_favicon():
    favicon_path = WEBAPP_PUBLIC / "favicon.svg"
    if favicon_path.exists():
        logger.debug("üñºÔ∏è Serving favicon.svg")
        return FileResponse(favicon_path, media_type="image/svg+xml")

    raise HTTPException(status_code=404, detail="favicon.svg not found")


@app.get("/healthz", tags=["System"])
async def healthcheck():
    """Healthcheck endpoint for deployment probes."""
    return {
        "status": "ok",
        "service": "Uzinex Boost Backend",
        "version": "2.0.0",
        "environment": settings.APP_ENV,
    }

# -------------------------------------------------
# üîπ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ Telegram Bot –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ backend
# -------------------------------------------------
@app.on_event("startup")
async def start_bot_on_backend():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å backend (Aiogram v3)."""
    import asyncio
    from bot import dp, bot  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ bot/__init__.py –µ—Å—Ç—å bot = Bot(...)

    async def run_bot():
        await asyncio.sleep(2)  # –∂–¥—ë–º, –ø–æ–∫–∞ API –∏ Redis –ø–æ–¥–Ω–∏–º—É—Ç—Å—è
        logger.info("ü§ñ Launching Telegram bot polling (Aiogram 3)...")
        try:
            await dp.start_polling(bot)
        except Exception as e:
            logger.error(f"‚ùå Telegram bot polling stopped: {e}")

    asyncio.create_task(run_bot())


