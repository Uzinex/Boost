"""
Uzinex Boost Core ‚Äî Exceptions
===============================

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —è–¥—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å `AppException` –¥–ª—è –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫;
- —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª–∞—Å—Å—ã (DBError, CacheError, AuthError –∏ —Ç.–¥.);
- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FastAPI –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º;
- –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è REST API.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Å–ª–æ—è—Ö: core, adapters, domain, api.
"""

from __future__ import annotations
import logging
from fastapi import HTTPException, status

logger = logging.getLogger("uzinex.core.exceptions")


# -------------------------------------------------
# üîπ –ë–∞–∑–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ
# -------------------------------------------------

class AppException(Exception):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ Uzinex Boost.
    –í—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç –Ω–µ–≥–æ.
    """

    code: int = 500
    message: str = "Internal server error"
    details: str | None = None

    def __init__(self, message: str | None = None, *, details: str | None = None, code: int | None = None):
        super().__init__(message or self.message)
        if message:
            self.message = message
        if details:
            self.details = details
        if code:
            self.code = code

        logger.error(f"[AppException] {self.message} ‚Äî Details: {self.details or '-'}")

    def to_http(self) -> HTTPException:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç AppException –≤ HTTPException –¥–ª—è FastAPI.
        """
        return HTTPException(status_code=self.code, detail=self.message)


# -------------------------------------------------
# üîπ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫
# -------------------------------------------------

class AuthError(AppException):
    code = status.HTTP_401_UNAUTHORIZED
    message = "Authentication failed"


class PermissionError(AppException):
    code = status.HTTP_403_FORBIDDEN
    message = "Permission denied"


class NotFoundError(AppException):
    code = status.HTTP_404_NOT_FOUND
    message = "Requested resource not found"


class ValidationError(AppException):
    code = status.HTTP_422_UNPROCESSABLE_ENTITY
    message = "Validation error"


class DBError(AppException):
    code = status.HTTP_500_INTERNAL_SERVER_ERROR
    message = "Database operation failed"


class CacheError(AppException):
    code = status.HTTP_503_SERVICE_UNAVAILABLE
    message = "Cache system unavailable"


class TelegramAPIError(AppException):
    code = status.HTTP_502_BAD_GATEWAY
    message = "Telegram API communication failed"


class BusinessLogicError(AppException):
    code = status.HTTP_409_CONFLICT
    message = "Business rule violation"


# -------------------------------------------------
# üîπ –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫
# -------------------------------------------------

def handle_exception(exc: Exception) -> HTTPException:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–π:
    - –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É;
    - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTTPException;
    - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ AppException.
    """
    if isinstance(exc, AppException):
        logger.warning(f"[Handled] {exc.__class__.__name__}: {exc.message}")
        return exc.to_http()

    if isinstance(exc, HTTPException):
        logger.warning(f"[HTTPException] {exc.detail}")
        return exc

    logger.exception(f"[Unhandled Exception] {type(exc).__name__}: {exc}")
    return HTTPException(status_code=500, detail="Internal server error")
