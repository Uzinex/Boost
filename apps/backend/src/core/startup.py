"""
Uzinex Boost Core ‚Äî Startup Initialization
===========================================

–ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–¥—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL –∏ Redis
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –í—ã–≤–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–≤–µ—Ä—Å–∏—è, –æ–∫—Ä—É–∂–µ–Ω–∏–µ, –±–∏–ª–¥)
- –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI / Worker

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ backend (FastAPI) –∏ –±–æ—Ç–∞.
"""

from __future__ import annotations

import asyncio
import logging
import time
import aiohttp

from core import settings, get_logger
from core.database import test_database_connection
from adapters.cache.redis_cache import RedisCache

logger = get_logger("uzinex.core.startup")


# -------------------------------------------------
# üîπ System startup
# -------------------------------------------------

async def init_startup_checks() -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FastAPI event handler'–æ–º (on_startup).
    """
    logger.info("üöÄ Starting Uzinex Boost initialization sequence...")

    start_time = time.time()
    results = {"database": False, "redis": False, "telegram": None}

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL ---
    db_ok = await test_database_connection()
    results["database"] = db_ok
    logger.info(f"üóÑ PostgreSQL connection: {'‚úÖ OK' if db_ok else '‚ùå FAIL'}")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis ---
    try:
        cache = RedisCache()
        await cache.connect()
        results["redis"] = await cache.ping()
        await cache.close()
    except Exception as e:
        logger.error(f"Redis initialization failed: {e}")
        results["redis"] = False

    logger.info(f"üß† Redis connection: {'‚úÖ OK' if results['redis'] else '‚ùå FAIL'}")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
    if settings.TELEGRAM_DEBUG_MODE:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/getMe"
                ) as resp:
                    results["telegram"] = resp.status == 200
        except Exception as e:
            results["telegram"] = False
            logger.warning(f"Telegram check skipped or failed: {e}")
        logger.info(f"ü§ñ Telegram API: {'‚úÖ OK' if results['telegram'] else '‚ö†Ô∏è SKIPPED'}")

    # --- –†–µ–∑—é–º–µ –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    duration = round(time.time() - start_time, 2)
    logger.info(f"‚úÖ Startup checks completed in {duration}s")
    logger.info(
        f"System summary ‚Üí DB: {results['database']} | Redis: {results['redis']} | Telegram: {results['telegram']}"
    )

    if not results["database"] or not results["redis"]:
        logger.warning("‚ö†Ô∏è Some dependencies failed ‚Äî application may not work correctly!")


# -------------------------------------------------
# üîπ Optional: preloading / cache warming
# -------------------------------------------------

async def warm_up_cache() -> None:
    """
    –ü—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, —Ç–∞—Ä–∏—Ñ—ã, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ).
    """
    try:
        cache = RedisCache()
        await cache.connect()

        await cache.set("boost:version", settings.APP_VERSION, expire=3600)
        await cache.set("boost:environment", settings.APP_ENV, expire=3600)

        logger.info("üî• Cache warm-up completed successfully")
        await cache.close()

    except Exception as e:
        logger.warning(f"Cache warm-up skipped: {e}")


# -------------------------------------------------
# üîπ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -------------------------------------------------

async def init_app() -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ–≤ –∫–µ—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    await init_startup_checks()
    await warm_up_cache()


# -------------------------------------------------
# üîπ Entrypoint (for manual startup)
# -------------------------------------------------

async def main() -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (python -m core.startup).
    """
    await init_startup_checks()
    await warm_up_cache()
    logger.info("üéØ Uzinex Boost core startup sequence finished.")


if __name__ == "__main__":
    asyncio.run(main())
