"""
Uzinex Boost ‚Äî Application Startup Module
=========================================

–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
- PostgreSQL
- Redis
- Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
"""

from __future__ import annotations
import time
import logging
from core.config import settings
from core.database import test_database_connection
from adapters.cache.redis_cache import RedisCache

logger = logging.getLogger("uzinex.core.startup")

redis_cache: RedisCache | None = None


async def init_app():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global redis_cache

    logger.info("üöÄ Starting Uzinex Boost initialization sequence...")
    start_time = time.perf_counter()

    # -----------------------------
    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    # -----------------------------
    db_ok = await test_database_connection()
    if db_ok:
        logger.info("üóÑ PostgreSQL connection: ‚úÖ OK")
    else:
        logger.error("‚ùå PostgreSQL connection: FAIL")

    # -----------------------------
    # üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Redis
    # -----------------------------
    redis_ok = False
    try:
        redis_cache = RedisCache(url=settings.REDIS_URL)
        await redis_cache.connect()
        redis_ok = True
    except Exception as e:
        logger.error(f"Redis initialization failed: {e}")

    logger.info(f"üß† Redis connection: {'‚úÖ OK' if redis_ok else '‚ùå FAIL'}")

    # -----------------------------
    # üîπ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # -----------------------------
    telegram_ok = None  # –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

    # -----------------------------
    # üîπ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    # -----------------------------
    elapsed = time.perf_counter() - start_time
    logger.info(f"‚úÖ Startup checks completed in {elapsed:.2f}s")
    logger.info(f"System summary ‚Üí DB: {db_ok} | Redis: {redis_ok} | Telegram: {telegram_ok}")

    if not db_ok or not redis_ok:
        logger.warning("‚ö†Ô∏è Some dependencies failed ‚Äî application may not work correctly!")

    # -----------------------------
    # üîπ Cache warm-up
    # -----------------------------
    if redis_ok:
        try:
            await redis_cache.set("system:startup_check", "ok", expire=30)
        except Exception as e:
            logger.warning(f"Cache warm-up failed: {e}")
    else:
        logger.warning("Cache warm-up skipped: Redis unavailable.")
