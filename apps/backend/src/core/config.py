"""
Uzinex Boost Core ‚Äî Configuration
==================================

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è backend —è–¥—Ä–∞ Boost v2.0.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Pydantic BaseSettings –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- API, BOT –∏ WebApp –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
- –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ Redis
- –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (JWT, —Ç–æ–∫–µ–Ω—ã, hash)
- –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (dev/staging/prod)

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ `.env`, Railway –∏ Docker ENV.
"""

from __future__ import annotations

import os
from pydantic import BaseSettings, Field
from functools import lru_cache


# -------------------------------------------------
# üîπ Settings class
# -------------------------------------------------

class Settings(BaseSettings):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ—Ä–µ–∑ `from core import settings`.
    """

    # --- üîß App Info ---
    APP_NAME: str = Field("Uzinex Boost", description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    APP_VERSION: str = Field("2.0.0", description="–í–µ—Ä—Å–∏—è API")
    APP_ENV: str = Field("production", description="–û–∫—Ä—É–∂–µ–Ω–∏–µ: development | staging | production")
    API_V1_PREFIX: str = Field("/api/v1", description="–ü—Ä–µ—Ñ–∏–∫—Å –≤—Å–µ—Ö REST —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")

    # --- üåê URLs ---
    BASE_DOMAIN: str = Field("https://boost.uzinex.com", description="–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω WebApp")
    BACKEND_URL: str = Field("https://api.uzinex.com", description="–ë–∞–∑–æ–≤—ã–π URL API")
    FRONTEND_URL: str = Field("https://boost.uzinex.com", description="–§—Ä–æ–Ω—Ç–µ–Ω–¥ (WebApp) URL")

    # --- üóÑ Database ---
    DB_HOST: str = Field("localhost", description="–•–æ—Å—Ç PostgreSQL")
    DB_PORT: int = Field(5432, description="–ü–æ—Ä—Ç PostgreSQL")
    DB_USER: str = Field("postgres", description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    DB_PASSWORD: str = Field("postgres", description="–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    DB_NAME: str = Field("uzinex_boost", description="–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    # --- ‚öôÔ∏è Redis / Cache ---
    REDIS_HOST: str = Field("localhost", description="–•–æ—Å—Ç Redis")
    REDIS_PORT: int = Field(6379, description="–ü–æ—Ä—Ç Redis")
    REDIS_DB: int = Field(0, description="–ù–æ–º–µ—Ä –±–∞–∑—ã Redis")
    REDIS_URL: str | None = Field(None, description="–ü–æ–ª–Ω—ã–π URL Redis (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)")

    # --- üîí Security / JWT ---
    SECRET_KEY: str = Field("CHANGE_ME_SECRET", description="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á JWT")
    JWT_ALGORITHM: str = Field("HS256", description="–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏ JWT")
    ACCESS_TOKEN_EXPIRE_MINUTES: int = Field(60 * 24 * 7, description="–°—Ä–æ–∫ –∂–∏–∑–Ω–∏ JWT —Ç–æ–∫–µ–Ω–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)")

    # --- ü§ñ Telegram ---
    TELEGRAM_BOT_TOKEN: str = Field("YOUR_TELEGRAM_BOT_TOKEN", description="–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
    TELEGRAM_WEBHOOK_URL: str | None = Field(None, description="Webhook URL –¥–ª—è Telegram API")

    # --- üí∞ Currency / Business Logic ---
    UZT_TO_SUM_RATE: float = Field(75.0, description="–ö—É—Ä—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ 1 UZT –≤ —Å—É–º")
    START_BONUS: float = Field(100.0, description="–ë–æ–Ω—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (UZT)")
    REWARD_CHANNEL: float = Field(0.6, description="–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
    REWARD_GROUP: float = Field(0.4, description="–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É")

    # --- üß† Misc / System ---
    LOG_LEVEL: str = Field("INFO", description="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    RAILWAY_MODE: bool = Field(False, description="–§–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞ –≤ Railway")
    TELEGRAM_DEBUG_MODE: bool = Field(False, description="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ Telegram")
    TIMEZONE: str = Field("Asia/Tashkent", description="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–µ—Ä–≤–µ—Ä–∞")

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = True


# -------------------------------------------------
# üîπ Cached instance
# -------------------------------------------------

@lru_cache()
def get_settings() -> Settings:
    """–°–æ–∑–¥–∞—ë—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ (singleton)."""
    return Settings()


# -------------------------------------------------
# üîπ –£–¥–æ–±–Ω—ã–π –∞–ª–∏–∞—Å –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
# -------------------------------------------------

settings = get_settings()

# -------------------------------------------------
# üîπ Derived / Computed properties
# -------------------------------------------------

# –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
settings.DATABASE_URL = (
    settings.REDIS_URL
    if settings.REDIS_URL
    else f"postgresql+asyncpg://{settings.DB_USER}:{settings.DB_PASSWORD}@{settings.DB_HOST}:{settings.DB_PORT}/{settings.DB_NAME}"
)

# –§–æ—Ä–º–∏—Ä—É–µ–º URL Redis (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
if not settings.REDIS_URL:
    settings.REDIS_URL = f"redis://{settings.REDIS_HOST}:{settings.REDIS_PORT}/{settings.REDIS_DB}"
