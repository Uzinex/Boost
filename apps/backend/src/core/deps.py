"""
Uzinex Boost Core ‚Äî Dependencies
=================================

–ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —è–¥—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
- –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º (`get_settings`);
- –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (`get_db`);
- –¥–æ—Å—Ç—É–ø –∫ Redis / Cache (`get_cache`);
- –ª–æ–≥–≥–µ—Ä (`get_logger`).

–û—Ç–ª–∏—á–∏–µ –æ—Ç api/v1/deps.py:
    ‚Üí —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç FastAPI (–º–∏–Ω–∏–º—É–º –∏–º–ø–æ—Ä—Ç–æ–≤),
      —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ CLI, Celery, Alembic –∏ —Ç–µ—Å—Ç–∞—Ö.
"""

from __future__ import annotations

import logging
from typing import AsyncGenerator

from core import settings, get_logger
from core.database import get_async_session
from adapters.cache.redis_cache import RedisCache


# -------------------------------------------------
# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -------------------------------------------------

def get_settings():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤, —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ —Ç–µ—Å—Ç–æ–≤.
    """
    return settings


# -------------------------------------------------
# üîπ –õ–æ–≥–≥–µ—Ä
# -------------------------------------------------

def get_logger_instance(name: str = "uzinex.core") -> logging.Logger:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏ –≤–Ω–µ FastAPI.
    """
    return get_logger(name)


# -------------------------------------------------
# üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ë–î
# -------------------------------------------------

async def get_db() -> AsyncGenerator:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ PostgreSQL.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π commit / rollback.
    """
    async for session in get_async_session():
        yield session


# -------------------------------------------------
# üîπ Redis Cache
# -------------------------------------------------

async def get_cache() -> RedisCache:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä RedisCache –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –≤–æ—Ä–∫–µ—Ä–æ–≤.
    """
    cache = RedisCache()
    await cache.connect()
    return cache


# -------------------------------------------------
# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# -------------------------------------------------

async def system_health_check() -> dict[str, bool]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (DB + Redis).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤ /system/health.
    """
    db_ok = False
    redis_ok = False

    try:
        async for session in get_async_session():
            await session.execute("SELECT 1")
            db_ok = True
            break
    except Exception as e:
        get_logger_instance().error(f"[Core] Database check failed: {e}")

    try:
        cache = RedisCache()
        redis_ok = await cache.ping()
    except Exception as e:
        get_logger_instance().error(f"[Core] Redis check failed: {e}")

    return {"database": db_ok, "redis": redis_ok}
