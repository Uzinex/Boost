"""
Uzinex Boost ‚Äî Core Database Utilities
======================================

–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PostgreSQL —á–µ—Ä–µ–∑ SQLAlchemy.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö –∏ FastAPI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö.
"""

from __future__ import annotations
import logging
from typing import AsyncGenerator
from sqlalchemy.ext.asyncio import AsyncSession

from db.base import async_session_factory, engine, Base

logger = logging.getLogger("uzinex.core.database")


# -------------------------------------------------
# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ (FastAPI dependency)
# -------------------------------------------------
async def get_async_session() -> AsyncGenerator[AsyncSession, None]:
    """
    Dependency –¥–ª—è FastAPI.
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é SQLAlchemy –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ—ë –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.
    """
    async with async_session_factory() as session:
        try:
            yield session
        finally:
            await session.close()


# -------------------------------------------------
# üîπ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# -------------------------------------------------
async def test_database_connection() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è).
    """
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("üóÑ PostgreSQL connection: ‚úÖ OK")
        return True
    except Exception as e:
        logger.error(f"‚ùå PostgreSQL connection failed: {e}")
        return False
