"""
Uzinex Boost ‚Äî Core Database Utilities
======================================

–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PostgreSQL —á–µ—Ä–µ–∑ SQLAlchemy.
"""

from __future__ import annotations
import logging
from typing import AsyncGenerator
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker

from core.config import settings
from db.base import Base  # –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç.–∫. —Ç–µ–ø–µ—Ä—å db/base –Ω–µ —Ç—è–Ω–µ—Ç core –æ–±—Ä–∞—Ç–Ω–æ

logger = logging.getLogger("uzinex.core.database")

# -------------------------------------------------
# üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
# -------------------------------------------------
engine = create_async_engine(
    settings.DATABASE_URL,
    echo=settings.DEBUG,
    future=True,
    pool_pre_ping=True,
)

# -------------------------------------------------
# üîπ –°–µ—Å—Å–∏—è
# -------------------------------------------------
async_session_factory = async_sessionmaker(
    bind=engine,
    expire_on_commit=False,
    class_=AsyncSession,
)

# -------------------------------------------------
# üîπ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# -------------------------------------------------
async def get_async_session() -> AsyncGenerator[AsyncSession, None]:
    """Dependency –¥–ª—è FastAPI ‚Äî —Å–æ–∑–¥–∞—ë—Ç —Å–µ—Å—Å–∏—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ—ë."""
    async with async_session_factory() as session:
        yield session


# -------------------------------------------------
# üîπ Health-check –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
# -------------------------------------------------
async def test_database_connection() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("üóÑ PostgreSQL connection: ‚úÖ OK")
        return True
    except Exception as e:
        logger.error(f"‚ùå PostgreSQL connection failed: {e}")
        return False
