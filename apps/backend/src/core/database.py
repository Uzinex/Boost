"""
Uzinex Boost Core ‚Äî Database Layer
===================================

–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL –¥–ª—è Boost v2.0.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ SQLAlchemy engine;
- —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π `get_async_session`;
- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Alembic (–º–∏–≥—Ä–∞—Ü–∏–∏);
- –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (commit/rollback);
- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
    - asyncpg
    - SQLAlchemy 2.x async
"""

from __future__ import annotations

import logging
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine
from sqlalchemy.orm import declarative_base
from contextlib import asynccontextmanager

from core import settings

# -------------------------------------------------
# üîπ –õ–æ–≥–≥–µ—Ä –∏ –±–∞–∑–∞ –º–æ–¥–µ–ª–µ–π
# -------------------------------------------------

logger = logging.getLogger("uzinex.core.database")
Base = declarative_base()

# -------------------------------------------------
# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
# -------------------------------------------------

DATABASE_URL = settings.DATABASE_URL

engine = create_async_engine(
    DATABASE_URL,
    echo=False,
    pool_pre_ping=True,
    pool_size=10,
    max_overflow=20,
    future=True,
)

# -------------------------------------------------
# üîπ –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π (sessionmaker)
# -------------------------------------------------

AsyncSessionLocal = async_sessionmaker(
    bind=engine,
    expire_on_commit=False,
    class_=AsyncSession,
)


# -------------------------------------------------
# üîπ Dependency –¥–ª—è FastAPI
# -------------------------------------------------

@asynccontextmanager
async def get_async_session() -> AsyncSession:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –ë–î.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö (domain layer) –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö API.
    """
    session = AsyncSessionLocal()
    try:
        yield session
        await session.commit()
    except Exception as e:
        await session.rollback()
        logger.exception(f"[DB] Transaction rollback due to: {e}")
        raise
    finally:
        await session.close()


# -------------------------------------------------
# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (HealthCheck)
# -------------------------------------------------

async def test_database_connection() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ /system/health).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.
    """
    try:
        async with engine.connect() as conn:
            await conn.execute(text("SELECT 1"))
        return True
    except Exception as e:
        logger.error(f"[DB] Connection test failed: {e}")
        return False


# -------------------------------------------------
# üîπ –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è Alembic
# -------------------------------------------------

def get_engine() -> any:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç SQLAlchemy engine –¥–ª—è Alembic –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.
    """
    return engine
